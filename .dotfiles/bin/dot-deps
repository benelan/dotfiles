#!/usr/bin/env bash
# shellcheck disable=2046
#
# This script installs the programming languages, packages, scripts, and tools
# I use. Comment out functions at the bottom to skip sections.

# Setup install paths                                                   {{{
# --------------------------------------------------------------------- {|}

if [ -z "$LIB" ] || [ -z "$DOTFILES" ]; then
    printf "\$LIB and/or \$DOTFILES environment variable(s) not set, exiting.\n" >&2
    exit 1
fi

set -e
sudo -v

BIN_DIR="$HOME/.local/bin"
MAN_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/man"
DEPS_DIR="$DOTFILES/deps"
CACHE_DIR="$DOTFILES/cache"

mkdir -p "$BIN_DIR" "$MAN_DIR/man1" "$MAN_DIR/man5" "$CACHE_DIR"

if [ "$USE_GUI_APPS" = "1" ]; then
    FONTS_DIR="$XDG_DATA_HOME/fonts"
    WALLPAPER_DIR="$HOME/Pictures/Wallpapers"
    mkdir -p "$FONTS_DIR" "$WALLPAPER_DIR"
fi

# --------------------------------------------------------------------- }}}
# Install programming languages                                         {{{
# --------------------------------------------------------------------- {|}

## Rust    - https://www.rust-lang.org/tools/install           {{{
install_rust() {
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    export PATH="${PATH}:${HOME}/.cargo/bin"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Nim     - https://nim-lang.org/install_unix.html            {{{
install_nim() {
    curl https://nim-lang.org/choosenim/init.sh -sSf | sh
    export PATH="${PATH}:${HOME}/.nimble/bin"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Golang  - https://go.dev/doc/install                        {{{
install_golang() {
    # checksum will need to be updated when using a new go version
    checksum="d7ec48cde0d3d2be2c69203bc3e0a44de8660b9c09a6e85c4732a3f7dc442612"
    outfile="go1.20.5.linux-amd64.tar.gz"
    curl -sSLo "$outfile" "https://go.dev/dl/$outfile"

    if [ "$(shasum -a 256 "$outfile" | awk '{print $1}')" = "$checksum" ]; then
        sudo rm -rf /usr/local/go
        sudo tar -C /usr/local -xzf "$outfile"
        rm "$outfile"
        export PATH="${PATH}:/usr/local/go/bin"
    else
        printf "\nchecksum does not match, please install golang manually:\nhttps://go.dev/doc/install"
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Node.js - https://docs.volta.sh/guide/getting-started       {{{
install_volta() {
    curl https://get.volta.sh | bash -s -- --skip-setup

    export VOLTA_HOME=~/.volta
    export PATH="${PATH}:${VOLTA_HOME}/bin"

    volta install node@16
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Lua     - https://www.lua.org/download.html                 {{{
install_lua() {
    is-supported lua && return
    curl -R -O https://www.lua.org/ftp/lua-5.4.6.tar.gz

    tar -zxf lua-5.4.6.tar.gz
    cd lua-5.4.6

    make linux test
    sudo make install
}

### LuaJIT (compiler)              {{{
### https://luajit.org/download.html
install_luajit() {
    is-supported luajit && return

    if ! [ -d "$LIB/luajit" ]; then
        git clone https://luajit.org/git/luajit.git "$LIB/luajit"
    fi

    cd "$LIB/luajit"
    git pull

    sudo make
    sudo make install
}

###}}}
### Luarocks (Lua package manager) {{{
### https://luarocks.org#quick-start
install_luarocks() {
    is-supported luarocks && return

    wget https://luarocks.org/releases/luarocks-3.9.2.tar.gz
    tar zxpf luarocks-3.9.2.tar.gz
    cd luarocks-3.9.2

    ./configure --lua-version=5.4
    make
    sudo make install
}
###}}}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Install programming language packages                                 {{{
# --------------------------------------------------------------------- {|}

## Rust   CLI tools - https://crates.io                        {{{
install_cargo_packages() {
    ! [ -f "$DEPS_DIR/cargo" ] && return

    if ! is-supported cargo || ! is-supported rustup; then
        install_rust
    else
        rustup update
    fi

    cargo install $(cat "$DEPS_DIR/cargo")

    # link batcat to bat due to package name conflict
    ! is-supported bat && is-supported batcat &&
        ln -s "$(command -v batcat)" "$BIN_DIR/bat"

    # link fdfind to fd
    ! is-supported fd && is-supported fdfind &&
        ln -s "$(command -v fdfind)" "$BIN_DIR/fd"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Golang CLI tools - https://pkg.go.dev                       {{{
install_golang_packages() {
    ! is-supported go && install_golang
    ! [ -f "$DEPS_DIR/golang" ] && return

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        go install "$pkg"
    done <"$DEPS_DIR/golang"
    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Python CLI tools - https://pypi.org/project/pipx/           {{{
install_pip_packages() {
    ! [ -f "$DEPS_DIR/pip" ] && return

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        pip3 install --user "$pkg"
    done <"$DEPS_DIR/pip"
    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Node.js packages - https://www.npmjs.com                    {{{
install_node_packages() {
    ! [ -f "$DEPS_DIR/node" ] && return

    # NOTE: volta only works on x86_64 architectures for now
    ! is-supported volta && ! is-supported node && install_volta
    npm install -g $(cat "$DEPS_DIR/node")
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Install shell scripts                                                 {{{
# --------------------------------------------------------------------- {|}

## taskopen   - https://github.com/jschlatow/taskopen          {{{
install_taskopen() {
    is-supported taskopen || ! is-supported task && return

    curl -sSLo "$BIN_DIR/taskopen" \
        https://raw.githubusercontent.com/jschlatow/taskopen/v1.2-devel/taskopen

    curl -sSLo "$MAN_DIR/man1/taskopen.1" \
        https://raw.githubusercontent.com/jschlatow/taskopen/v1.2-devel/doc/man/taskopen.1

    curl -sSLo "$MAN_DIR/man5/taskopenrc.5" \
        https://raw.githubusercontent.com/jschlatow/taskopen/v1.2-devel/doc/man/taskopenrc.5

    chmod +x "$BIN_DIR/taskopen"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## fasd       - https://github.com/clvv/fasd                   {{{
install_fasd() {
    is-supported fasd && return

    curl -sSLo "$BIN_DIR/fasd" \
        https://raw.githubusercontent.com/clvv/fasd/master/fasd

    curl -sSLo "$MAN_DIR/man1/fasd.1" \
        https://raw.githubusercontent.com/clvv/fasd/master/fasd.1

    sudo chmod +x "$BIN_DIR/fasd"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## fff        - https://github.com/dylanaraps/fff              {{{
install_fff() {
    is-supported fff && return

    curl -sSLo "$BIN_DIR/fff" \
        https://raw.githubusercontent.com/dylanaraps/fff/master/fff

    curl -sSLo "$MAN_DIR/man1/fff.1" \
        https://raw.githubusercontent.com/clvv/fff/master/fff.1

    sudo chmod +x "$BIN_DIR/fff"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## git-open   - https://github.com/paulirish/git-open          {{{
install_git-open() {
    is-supported git-open && return

    curl -sSLo "$BIN_DIR/git-o" \
        https://raw.githubusercontent.com/paulirish/git-open/master/git-open

    sudo chmod +x "$BIN_DIR/git-o"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## git-jump   - https://github.com/git/git/tree/master/contrib {{{
install_git-jump() {
    is-supported git-jump && return

    # it may already be on in the filesystem
    loc1="/usr/local/share/git-core/contrib/git-jump/git-jump"

    # sometimes it gets put in doc for some reason
    loc2="/usr/share/doc/git/contrib/git-jump/git-jump"

    if [ -f "$loc1" ] && [ -r "$loc1" ]; then
        cp -p "$loc1" "$BIN_DIR"
    elif [ -f "$loc2" ] && [ -r "$loc2" ]; then
        cp -p "$loc2" "$BIN_DIR"
    else
        # otherwise download it
        curl -sSLo "$BIN_DIR/git-jump" \
            https://raw.githubusercontent.com/git/git/master/contrib/git-jump/git-jump
    fi

    sudo chmod +x "$BIN_DIR/git-jump"
    unset loc1 loc2
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## git-extras - https://github.com/tj/git-extras               {{{
## Install helpful bash scripts for git workflows
install_git-extras() {
    curl -sSL https://raw.githubusercontent.com/tj/git-extras/master/install.sh |
        sudo bash /dev/stdin
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Install Ubuntu packages                                               {{{
# --------------------------------------------------------------------- {|}

## Install CLI apt packages                                    {{{
## https://manpages.ubuntu.com/manpages/jammy/man8/apt.8
install_apt_packages() {
    ! [ -f "$DEPS_DIR/apt" ] && return

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        sudo apt install -y "$pkg" || true
    done <"$DEPS_DIR/apt"

    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install GUI apt packages                                    {{{
install_apt_gui_packages() {
    ! [ -f "$DEPS_DIR/apt-gui" ] && return

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        sudo apt install -y "$pkg" || true
    done <"$DEPS_DIR/apt-gui"

    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install VS Code                                             {{{
## https://code.visualstudio.com/docs/setup/linux
install_vscode() {
    is-supported code && return
    deb="$CACHE_DIR/vscode.deb"

    curl -ssLo "$deb" \
        "https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"

    sudo apt install -y "$deb" || true
    unset deb
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install ProtonVPN CLI                                       {{{
## https://protonvpn.com/support/linux-vpn-tool/#debian
install_protonvpn_cli() {
    is-supported protonvpn-cli && return
    checksum="c409c819eed60985273e94e575fd5dfd8dd34baef3764fc7356b0f23e25a372c"
    deb="protonvpn-stable-release_1.0.3_all.deb"

    curl -sSLo "$CACHE_DIR/$deb" \
        "https://repo.protonvpn.com/debian/dists/stable/main/binary-all/$deb"
    echo "$checksum $CACHE_DIR/$deb" | sha256sum --check -

    sudo apt install -y "$CACHE_DIR/$deb" || true
    unset deb
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Discord                                             {{{
## https://discord.com/download
install_discord() {
    is-supported discord && return
    deb="$CACHE_DIR/discord.deb"

    curl -sSLo "$deb" \
        https://discord.com/api/download?platform=linux\&format=deb

    sudo apt install -y "$deb"
    unset deb
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install WezTerm                                             {{{
## https://wezfurlong.org/wezterm/install/linux.html
install_wezterm() {
    deb="wezterm-nightly.Ubuntu22.04.deb"

    curl -sSLo "$CACHE_DIR/$deb" \
        "https://github.com/wez/wezterm/releases/download/nightly/$deb"

    sudo apt install -y "$CACHE_DIR/$deb" || true
    unset deb

    # https://wezfurlong.org/wezterm/config/lua/config/term.html
    tempfile=$(mktemp) &&
        curl -o "$tempfile" \
            https://raw.githubusercontent.com/wez/wezterm/main/termwiz/data/wezterm.terminfo &&
        tic -x -o ~/.terminfo "$tempfile" &&
        rm "$tempfile"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Taskwarrior TUI                                     {{{
## https://github.com/kdheepak/taskwarrior-tui
install_taskwarrior_tui() {
    is-supported taskwarrior-tui && return
    deb="taskwarrior-tui.deb"

    curl -sSLo "$CACHE_DIR/$deb" \
        "https://github.com/kdheepak/taskwarrior-tui/releases/latest/download/$deb"

    sudo apt install -y "$CACHE_DIR/$deb" || true
    unset deb
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Docker Desktop                                      {{{
## https://docs.docker.com/desktop/install/ubuntu/
install_docker_desktop() {
    is-supported docker-desktop && return
    deb="docker-desktop-4.16.2-amd64.deb"

    rm -r ~/.docker/desktop || true
    sudo rm /usr/local/bin/com.docker.cli || true
    sudo apt purge docker-desktop || true

    curl -sSLo "$CACHE_DIR/$deb" \
        "https://desktop.docker.com/linux/main/amd64/$deb"

    sudo apt install "$CACHE_DIR/$deb" || true
    unset deb
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Docker Engine                                       {{{
## https://docs.docker.com/engine/install/ubuntu/
install_docker_engine() {
    is-supported docker && return

    sudo install -m 0755 -d /etc/apt/keyrings

    curl -fsSL https://download.docker.com/linux/ubuntu/gpg |
        sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

    sudo chmod a+r /etc/apt/keyrings/docker.gpg

    echo "deb [arch=$(dpkg --print-architecture) \
    signed-by=/etc/apt/keyrings/docker.gpg] \
    https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" |
        sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install latest stable git version                           {{{
## https://git-scm.com/download/linux
install_latest_git() {
    grep -q "git-core/ppa" \
        /etc/apt/sources.list /etc/apt/sources.list.d/* ||
        sudo add-apt-repository -y ppa:git-core/ppa

    sudo apt install -y git
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install GitHub CLI                                          {{{
## https://github.com/cli/cli/blob/trunk/docs/install_linux.md
install_gh_cli() {
    is-supported gh && return

    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg |
        sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg &&
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg &&
        echo "deb [arch=$(dpkg --print-architecture) \
          signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] \
          https://cli.github.com/packages stable main" |
        sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null

    sudo apt install -y gh
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Glow CLI (Markdown rendering)                       {{{
## https://github.com/charmbracelet/glow
install_glow() {
    sudo mkdir -p /etc/apt/keyrings

    curl -fsSL https://repo.charm.sh/apt/gpg.key |
        sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg

    echo "deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *" |
        sudo tee /etc/apt/sources.list.d/charm.list

    sudo apt update && sudo apt install glow
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Brave Browser                                       {{{
## https://brave.com/linux/#debian-ubuntu-mint
install_brave_browser() {
    is-supported brave-browser && return

    sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg \
        https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg

    echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] \
         https://brave-browser-apt-release.s3.brave.com/ stable main" |
        sudo tee /etc/apt/sources.list.d/brave-browser-release.list

    sudo apt install -y brave-browser
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install The four common font weights                        {{{
## https://github.com/ryanoasis/nerd-fonts
install_iosevka_font() {
    # Iosevka
    curl -sSLo "$FONTS_DIR/IosevkaNerdFont-Bold.ttf" \
        https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/Iosevka/Bold/IosevkaNerdFont-Bold.ttf

    curl -sSLo "$FONTS_DIR/IosevkaNerdFont-BoldItalic.ttf" \
        https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/Iosevka/Bold-Italic/IosevkaNerdFont-BoldItalic.ttf

    curl -sSLo "$FONTS_DIR/IosevkaNerdFont-Regular.ttf" \
        https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/Iosevka/Regular/IosevkaNerdFont-Regular.ttf

    curl -sSLo "$FONTS_DIR/IosevkaNerdFont-Italic.ttf" \
        https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/Iosevka/Italic/IosevkaNerdFont-Italic.ttf

    # reload the font cache
    fc-cache -rf
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install gruvbox coffee wallpaper                            {{{
install_gruvbox_wallpaper() {
    wallpaper="$WALLPAPER_DIR/gruvbox_coffee.png"

    if [ -f "$wallpaper" ]; then
        return
    fi

    curl -sSLo "$wallpaper" \
        https://i.imgur.com/XCaXGFB.png >/dev/null 2>&1 || true

    case "$XDG_CURRENT_DESKTOP" in
        *gnome* | *GNOME*)
            if is-supported gsettings; then
                gsettings set org.gnome.desktop.background picture-uri \
                    "file://$WALLPAPER_DIR/gruvbox_coffee.png"
                gsettings set org.gnome.desktop.background picture-uri-dark \
                    "file://$WALLPAPER_DIR/gruvbox_coffee.png"

                return 0
            fi
            ;;
    esac

    if is-supported feh; then
        feh --no-fehbg --bg-center --image-bg "#3c3836" \
            "$wallpaper"
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install gruvbox gnome theme                                 {{{
install_gnome_gruvbox_theme() {
    case "$XDG_CURRENT_DESKTOP" in
        *gnome* | *GNOME*)
            # download gruvbox gnome theme and icons
            git -C "$CACHE_DIR" clone --depth=1 \
                https://github.com/SylEleuth/gruvbox-plus-icon-pack.git
            git -C "$CACHE_DIR" clone --depth=1 \
                https://github.com/Fausto-Korpsvart/Gruvbox-GTK-Theme.git

            cursors="FlatbedCursors-0.5.2.tar.bz2"
            curl -sSLo "$cursors" "https://limitland.gitlab.io/flatbedcursors/$cursors"
            extract "$cursors"
            unset cursors

            # move icons and themes to the proper locations
            mkdir -p ~/.icons/FlatbedCursors-Orange/ ~/.icons ~/.themes
            cp -r "$CACHE_DIR"/gruvbox-plus-icon-pack/Gruvbox-Plus-Dark ~/.icons
            cp -r "$CACHE_DIR"/Gruvbox-GTK-Theme/themes/Gruvbox-Dark-BL ~/.themes
            cp -r ./FlatbedCursors-Orange/* ~/.icons/FlatbedCursors-Orange/

            # remove the repos because they are yuuge
            rm -rf "$CACHE_DIR/gruvbox-plus-icon-pack" "$CACHE_DIR/Gruvbox-GTK-Theme" ./FlatbedCursors*
            ;;
    esac
}
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Install git submodules                                                {{{
# --------------------------------------------------------------------- {|}

## Update git submodules                                       {{{
update_modules() {
    /usr/bin/git --git-dir="$HOME"/.git/ --work-tree="$HOME" \
        submodule update --init --recursive --rebase "$@"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install fzf                                                 {{{
install_fzf() {
    ! [ -d "$LIB/fzf" ] && return
    cd "$LIB/fzf" || return

    git fetch --all --tags --force
    git reset --hard origin/master
    git checkout "$(git describe --tags "$(git rev-list --tags --max-count=1)")"

    make
    make install
    chmod +x "$LIB/fzf/bin/fzf"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install neovim                                              {{{
install_neovim() {
    ! [ -d "$LIB/neovim" ] && return
    cd "$LIB/neovim" || return

    git fetch --all --tags --force
    git reset --hard origin/master
    git checkout nightly
    # git checkout stable

    sudo make CMAKE_BUILD_TYPE=Release
    sudo make install
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install vim plugins                                         {{{
install_vim_plugins() {
    cd && update_modules .vim

    vim +"$(
        find ~/.vim/pack/foo/opt \
            -maxdepth 1 -mindepth 1 -type d \
            -exec basename --multiple {} \; |
            perl -pe 's/^/packadd /' |
            tr '\n' '|'
    ) helptags ALL | quit"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install neovim plugins                                      {{{
install_neovim_plugins() {
    nvim --headless +"Lazy! sync" +qa
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install nvim-devdocs sources                                {{{
install_devdocs_sources() {
    if [ -d "$XDG_DATA_HOME/nvim/devdocs/docs" ] &&
        [ "$(find "$XDG_DATA_HOME/nvim/devdocs/docs" -type d | wc -l)" -lt 18 ]; then
        nvim --headless +"DevdocsInstall astro bash css docker dom gnu_make go html http javascript node npm react sass tailwindcss typescript vite vue-3"
    else
        nvim --headless +DevdocsUpdateAll
    fi
}
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Run install functions                                                 {{{
# --------------------------------------------------------------------- {|}

## Ubuntu-specific packages                                    {{{
case $(os-detect) in
    *ubuntu)
        ## CLI install scripts (suitable for servers)
        install_apt_packages
        install_latest_git
        install_gh_cli
        install_protonvpn_cli
        install_taskwarrior_tui
        install_docker_engine

        ## GUI install scripts
        if [ "$USE_GUI_APPS" = "1" ]; then
            install_apt_gui_packages
            install_discord
            install_vscode
            install_brave_browser
            install_wezterm
            # install_docker_desktop

            # install_gnome_gruvbox_theme
            # install_gruvbox_wallpaper
            # install_iosevka_font
        fi

        sudo apt update -y && sudo apt upgrade -y && sudo apt autoremove -y
        ;;
esac

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Shell scripts                                               {{{
install_fasd
install_fff
install_taskopen
install_git-open
install_git-jump
# install_git-extras

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Programming languages                                       {{{
# install_rust
# install_nim
# install_golang
# install_volta
# install_lua
# install_luajit
# install_luarocks

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Programming language packages                               {{{
install_node_packages
install_pip_packages
install_cargo_packages
install_golang_packages

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Git submodules                                              {{{
install_neovim || true
install_fzf || true

install_vim_plugins || true
install_neovim_plugins || true
install_devdocs_sources || true

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
