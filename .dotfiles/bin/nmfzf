#!/usr/bin/env sh
# vim:set foldmethod=marker:
# shellcheck disable=2016
#
# Copyright (c) 2024 Ben Elan <https://benelan.dev> [MIT License]
#
# A POSIX shell script that wraps fzf around nmcli. There are alternatives that
# use rofi/dmenu instead of fzf, but they were slow/buggy when I tried them.
# Plus this will work on both X11 and Wayland.
#
# https://github.com/firecat53/networkmanager-dmenu
# https://github.com/P3rf/rofi-network-manager
# https://github.com/ericmurphyxyz/rofi-wifi-menu

NMFZF_VERSION="0.1.0"

# utils #{{{1
opts='--colors yes --escape yes'

has() { command -v "$1" >/dev/null 2>&1; }

error() {
    if [ -n "$1" ]; then
        printf "Error: " >&2
        printf "%s\n" "$@" >&2
    fi
    printf "\n%s\n" "See -h for usage info" >&2
    exit 1
}

help_cmd() { #{{{1
    printf "
An fzf wrapper around Linux's Network Manager CLI (nmcli).

Usage:       nmfzf [<command>]
             nmfzf wifi [<subcommand>]
             nmfzf wifi connect [<SSID>]

When omitted, <command> defaults to 'wifi'.

Commands:
  d[evice]   Manage network devices.
  w[ifi]     Manage the wifi connection, an optional <subcommand> is accepted:
               c[onnect]      Select and/or connect to a wifi network (default)
               d[isconnect]   Disconnect from the current wifi network
               t[oggle]       Enable or disable the wifi device

Environment Variables:
  NMFZF_SAFE_MODE   Set to any value if <SSID> might contain consecutive spaces.
                    The downside is a password prompt is displayed for existing
                    connections too, rather than just new ones.
" >&2
    exit 0
}

device_cmd() { #{{{1
    device_actions='(enter: print) (alt-c: connect) (alt-d: disconnect) (alt-X: delete)
(alt-r: reapply) (alt-m: modify) (alt-M: monitor) (ctrl-r: reload list)

'

    FZF_DEFAULT_COMMAND="nmcli $opts device status" \
        fzf --ansi --delimiter='  ' \
        --header-lines=1 --header="$device_actions" \
        --preview='nmcli --colors yes device show {1}' \
        --bind='enter:become(echo {1})' \
        --bind='ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-M:execute(nmcli device monitor {1})' \
        --bind='alt-m:execute(nmcli device modify {1} {q})+refresh-preview' \
        --bind='alt-r:execute(nmcli device reapply {1})+refresh-preview' \
        --bind='alt-c:execute(nmcli device connect {1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )' \
        --bind='alt-d:execute(nmcli device disconnect {1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )' \
        --bind='alt-X:execute(nmcli device delete {1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )'
}

connection_cmd() { #{{{1
    conn_fields='NAME,TYPE,DEVICE,UUID'
    conn_actions='(enter: print) (alt-c: connect) (alt-d: disconnect) (alt-X: delete) (alt-e: edit) 
(alt-m: modify) (alt-M: monitor) (alt-a: active filter) (alt-r: reload list)

'
    FZF_DEFAULT_COMMAND="nmcli $opts --fields '$conn_fields' connection show" \
        fzf --ansi --delimiter='  ' --header-lines=1 --header="$conn_actions" \
        --preview='nmcli --colors yes connection show {1}' \
        --bind='enter:become(echo {1})' \
        --bind='ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-a:reload(eval "$FZF_DEFAULT_COMMAND --active")' \
        --bind='alt-M:execute(nmcli connection monitor {-1})' \
        --bind='alt-m:execute(nmcli connection modify {1} {q})+refresh-preview' \
        --bind='alt-r:execute(nmcli connection reload {-1})+refresh-preview' \
        --bind='alt-e:become(nmcli connection edit {-1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )' \
        --bind='alt-c:execute(nmcli connection up {-1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )' \
        --bind='alt-d:execute(nmcli connection down {-1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )' \
        --bind='alt-X:execute(nmcli connection delete {-1})+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )'
}

wifi_cmd() { #{{{1
    subcommand="connect"
    [ -n "$1" ] && subcommand="$1" && shift
    case "$subcommand" in
        c*) wifi_connect "$@" ;;
        d*) wifi_disconnect ;;
        t*) wifi_toggle ;;
        *) error "invalid wifi subcommand: \"$1\"" ;;
    esac
}

wifi_connect() { #{{{2
    if [ -n "$1" ]; then
        if nmcli --get-values name connection 2>/dev/null | grep -Fxq "$1"; then
            nmcli connection up "$1"
        else
            nmcli --ask device wifi connect "$1"
        fi
        return $?
    fi

    wifi_fields='BSSID,SSID,SECURITY,CHAN,BARS,SIGNAL,RATE,MODE,IN-USE'
    wifi_actions='(enter: connect) (alt-r: rescan) (alt-t: toggle) (alt-d: disconnect) (ctrl-r: reload list)

    '

    FZF_DEFAULT_COMMAND="nmcli $opts --fields '$wifi_fields' device wifi list" \
        fzf --ansi --delimiter='  ' --header-lines=1 --header="$wifi_actions" \
        --bind='ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-r:reload(eval "$FZF_DEFAULT_COMMAND --rescan yes")' \
        --bind='alt-t:execute(nmfzf wifi toggle)' \
        --bind='alt-d:execute(nmfzf wifi disconnect)+reload(
            eval "$FZF_DEFAULT_COMMAND"
        )' \
        --bind='enter:become(
            if [ "$(echo {} | awk "{print \$NF}")" = "*" ]; then
                nmfzf wifi disconnect
            else
                if [ -n "$NMFZF_SAFE_MODE" ]; then
                    nmcli --ask device wifi connect {1}
                else
                    nmfzf wifi connect {2}
                fi
            fi
        )'
}

wifi_disconnect() { #{{{2
    nmcli device status |
        awk '$2 == "wifi" && $3 == "connected" { print $1 }' |
        xargs -I{} nmcli device disconnect {}
}

wifi_toggle() { #{{{2
    nmcli radio wifi "$(
        [ "$(nmcli radio wifi)" = "enabled" ] && echo "off" || echo "on"
    )"
}

main() { #{{{1
    if ! has fzf || ! has nmcli; then
        error "fzf and nmcli are required dependencies"
    fi

    command="wifi"
    [ -n "$1" ] && command="$1" && shift

    case "$command" in
        c | co | con | conn | conne | connec | connect | \
            connecti | connectio | connection) connection_cmd ;;
        d | de | dev | devi | devic | device) device_cmd ;;
        w | wi | wif | wifi) wifi_cmd "$@" ;;
        h | -h | help | --help) help_cmd ;;
        v | -v | version | --version) printf "%s\n" "$NMFZF_VERSION" ;;
        *) error "invalid command: \"$command\"" ;;
    esac
}

main "$@"
