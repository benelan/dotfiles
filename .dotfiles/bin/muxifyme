#!/usr/bin/env bash
set -e

# If the tmux server isn't running, pick a session first
[[ -z $(pgrep tmux) ]] && muxsesh

session_name="$(tmux display-message -p "#S")"
if [[ -d "$WORK/$session_name" ]]; then
    session_dir="$WORK/$session_name"
elif [[ -d "$PERSONAL/$session_name" ]]; then
    session_dir="$PERSONAL/$session_name"
else
    session_dir="$(pwd)"
fi

cd "$session_dir" || exit 0

if [[ -d "$session_dir/.git" ]] || [[ "$(git rev-parse --show-toplevel 2>/dev/null)" = "$session_dir" ]]; then
    if [[ $# -eq 1 ]]; then
        github_user=$(git config --global github.user)
        branch="${github_user:-$(id -un)}/$1"
        ! git show-ref --verify --quiet "refs/heads/$branch" && branch_flags="-b "
    else
        branch="$(
            # remote and local branches sorted by commit date
            git for-each-ref refs/remotes refs/heads --sort='-committerdate' --format='%(refname:short)' |
                # search, remove 'origin/' prefix from branch names, remove empty line(s), dedupe, select
                awk '/'"$SEARCH_TERM"'/{gsub("^origin/(HEAD)?","");print}' | awk NF | uniq | fzf -1 -0 --cycle
        )"
    fi
    [[ -z "$branch" ]] && exit 0

    task_name="$(basename "$branch" | tr "./" "__")"
    target="$session_name:$task_name"
    # assumes a bare repo will be using worktrees
    if [[ $(git config --get core.bare) = "true" ]]; then
        task_dir="$session_dir/$task_name"
        if [[ ! -d "$task_dir" ]]; then
            # shellcheck disable=2086
            git worktree add $task_name $branch_flags$branch
            [[ -f "$task_dir/package.json" ]] && extra_cmds="npm install"
        fi
    else
        # shellcheck disable=2086
        git checkout $branch_flags$branch
    fi
    tmux new-window -Sdn "$task_name" -c "${task_dir:-"$session_dir"}"
    [[ -n "$extra_cmds" ]] && tmux send-keys -t "$target" "$extra_cmds" Enter

    if [[ -z "$TMUX" ]]; then
        tmux attach -t "$target"
    else
        tmux switch-client -t "$target"
    fi
fi

unset session_dir session_name task_name branch branch_flags github_user extra_cmds
