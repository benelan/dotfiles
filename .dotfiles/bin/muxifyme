#!/bin/sh
set -e

# If the tmux server isn't running, pick a session first
[ -z "$(pgrep tmux)" ] && muxsesh && return

session_name="$(tmux display-message -p "#S")"
if [ -d "$WORK/$session_name" ]; then
    start_dir="$WORK/$session_name"
elif [ -d "$PERSONAL/$session_name" ]; then
    start_dir="$PERSONAL/$session_name"
elif [ "$session_name" = "$(basename ~)" ]; then
    # pick a project if in the home session
    muxsesh && return
else
    start_dir="$(pwd)"
fi

cd "$start_dir" || return

if [ -d "$start_dir/.git" ] || [ "$(git rev-parse --show-toplevel 2>/dev/null)" = "$start_dir" ]; then
    if [ $# -eq 1 ]; then
        github_user="$(git config --global github.user)"
        branch="${github_user:-$(id -un)}/$1"
        ! git show-ref --verify --quiet "refs/heads/$branch" && branch_flags="-b "
    else
        branch="$(
            # remote and local branches sorted by commit date
            git for-each-ref refs/remotes refs/heads --sort='-committerdate' --format='%(refname:short)' |
                # search, remove 'origin/' prefix from branch names, remove empty line(s), dedupe, select
                awk '/'"$SEARCH_TERM"'/{gsub("^origin/(HEAD)?","");print}' | awk NF | uniq | fzf -1 -0 --cycle
        )"
    fi
    [ -z "$branch" ] && return

    task_name="$(basename "$branch" | tr "./" "__")"
    # naively assumes a bare repo will be using worktrees
    if [ "$(git config --get core.bare)" = "true" ]; then
        start_dir="$start_dir/$task_name"
        if [ ! -d "$start_dir" ]; then
            # shellcheck disable=2086
            git worktree add $task_name $branch_flags$branch
            [ -f "$start_dir/package.json" ] && extra_cmds="npm install"
        fi
    else
        # shellcheck disable=2086
        git checkout $branch_flags$branch
    fi
    muxtask "$start_dir" "$extra_cmds"
fi

unset start_dir session_name task_name target branch branch_flags github_user extra_cmds
