#!/usr/bin/env bash
# vim:filetype=sh foldmethod=marker:
# shellcheck disable=2046,2034

# Ben Elan's dotfiles and dependency management script.
#
# Copyright (c) 2024 Ben Elan <https://benelan.dev> [MIT License]
#
# The `init` command clones the dotfiles as a bare git repo in $HOME.
# Any conflicting dotfiles are moved to ${DOTFILES:-$HOME/.dotfiles}-backup.
#
# The `deps` command installs/updates dependencies. For usage information, see:
#   $ dot deps -h
#
# The `edit` command sets git environment variables in (n)vim so fugitive and
# other git plugins use the dotfiles repo.
#   $ dot edit ~/.bashrc
#
# All other commands are passed to `git` with environment variables set so it
# always executes on the dotfiles repo. For example:
#
#   $ dot add .nuxtrc && dot commit -m "chore: add nuxtrc" && dot push
#
# The repo is set up to not show untracked files so `dot status` isn't
# cluttered. The script also prevents `dot clean` so everything isn't deleted,
# and a lot of unrelated directories are gitignored.
#
# Aliases in ~/.config/git/config work with `dot` too, e.g., `dot cm` is:
#   $ git --git-dir="$HOME/.git/" --work-tree="$HOME" commit -m

# Utility functions                                                     {{{
# --------------------------------------------------------------------- {|}

_has() { command -v "$1" >/dev/null 2>&1; }

_dot() { /usr/bin/git --git-dir="$HOME"/.git/ --work-tree="$HOME" "$@"; }

_update_modules() { _dot submodule update --recursive --rebase --remote "$@"; }

# --------------------------------------------------------------------- }}}
# Setup dotfiles                                                        {{{
# --------------------------------------------------------------------- {|}
setup_dotfiles() {
    set -e

    if [ -d ~/.git ]; then
        printf "%s\n  %s\n  %s" \
            "Error: the home directory is already under version control. Either" \
            "1. Use 'dot pull' to update the dotfiles." \
            "2. Remove ~/.git and run the script again to continue." >&2
        exit 1
    fi

    # any current, conflicting dotfiles will be moved here
    backup_dir="${DOTFILES:-$HOME/.dotfiles}-backup"
    cache_dir="${DOTFILES:-$HOME/.dotfiles}/cache"
    mkdir -p "$backup_dir" "$cache_dir"

    # Don't use SSH to clone if there is no SSH key on the machine
    # This is for when I spin up a new VM and don't want to login to GitHub
    if find ~/.ssh -type f -name '*.pub' | wc -l | xargs test 0 -eq; then
        repo_url="https://github.com/benelan/dotfiles"
    else
        repo_url="git@github.com:benelan/dotfiles"
    fi

    git clone --bare "$repo_url" "$HOME/.git"

    # Make sure fetching works correctly for all branches
    _dot config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"

    # Prevents showing everything in $HOME when using status/diff.
    # Dotfiles need to be manually added for them to show up, e.g.
    # $ dot add ~/.npmrc
    _dot config status.showUntrackedFiles no

    _dot branch --set-upstream-to=origin/master master

    if _dot checkout >/dev/null 2>&1; then
        printf "\nChecked out dotfiles\n" >&2
    else
        printf "\n> Backing up conflicting dotfiles to %s\n" "$backup_dir" >&2
        # Get the list of files that need to be backed up
        files=$(_dot checkout 2>&1 | grep -e "^\s")
        printf "%s\n" "$files" >&2

        dirs=$(
            echo "$files" |
                # Remove everything after the last "/" from file paths
                awk 'BEGIN{FS=OFS="/"} {NF--} 1' |
                # Files in $HOME will end up being blank lines
                sed '/^[[:blank:]]*$/d'
        )
        # Using dirname is easier but won't work on OSX
        # dirs=$(echo "$files" | xargs dirname)

        # Create the directories in $backup_dir
        echo "$dirs" | xargs -I{} mkdir -p "$backup_dir/{}"

        # Move the conflicting files to the new directories
        echo "$files" | xargs -I{} mv {} "$backup_dir/{}"

        # Checkout the dotfiles now that there are no conflicts.
        # Move the files from the backup dir to $HOME to undo the script:
        # $ mv ~/.dotfiles-backup/* ~/
        if ! _dot checkout; then
            printf "\nError: unable to setup the dotfiles\n" >&2
            exit 1
        else
            printf "\nChecked out dotfiles\n" >&2
        fi
    fi
    unset files dirs repo_url backup_dir cache_dir

    # Make the bins and scripts executable
    printf "\n> Making scripts executable\n" >&2
    [ -d ~/.dotfiles/bin/ ] && chmod +x ~/.dotfiles/bin/*

    # Must install libs before they can be pwn'd
    printf "\n> Installing git submodules\n\n" >&2
    pushd ~
    _dot submodule update --init --recursive
    popd

    bash -l
    printf "\n+ Setup complete!\n" >&2
}

# --------------------------------------------------------------------- }}}
# Programming language install functions                                {{{
# --------------------------------------------------------------------- {|}

## Rust - https://www.rust-lang.org/tools/install              {{{

INSTALL_LANGUAGE_RUST_DOC="Install or update Rustup and Cargo"
install_language_rust() {
    if _has cargo && _has rustup; then
        rustup update
    else
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        export PATH="${PATH}:${HOME}/.cargo/bin"
    fi

    if [ -d "$COMPLETIONS_DIR" ]; then
        rustup completions bash |
            sudo tee "$COMPLETIONS_DIR/rustup" >/dev/null
        rustup completions bash cargo |
            sudo tee "$COMPLETIONS_DIR/cargo" >/dev/null
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Nim  - https://nim-lang.org/install_unix.html               {{{

INSTALL_LANGUAGE_NIM_DOC="Install ChooseNim, which is a Nim version manager"
install_language_nim() {
    curl https://nim-lang.org/choosenim/init.sh -sSf | sh
    export PATH="${PATH}:${HOME}/.nimble/bin"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Go   - https://go.dev/doc/install                           {{{

INSTALL_LANGUAGE_GO_DOC="Install Golang (only works on linux with x86_64 architectures)"
install_language_go() {
    _has go && return

    # checksum will need to be updated when using a new go version
    checksum="ba79d4526102575196273416239cca418a651e049c2b099f3159db85e7bade7d"
    outfile="go1.22.4.linux-amd64.tar.gz"
    curl -Lo "$outfile" "https://go.dev/dl/$outfile"

    if [ "$(shasum -a 256 "$outfile" | awk '{print $1}')" = "$checksum" ]; then
        sudo rm -rf /usr/local/go
        sudo tar -C /usr/local -xzf "$outfile"
        rm "$outfile"
        export PATH="${PATH}:/usr/local/go/bin"
    else
        printf "\nchecksum does not match, please install golang manually:\nhttps://go.dev/doc/install"
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Node - https://docs.volta.sh/guide/getting-started          {{{

INSTALL_LANGUAGE_NODE_DOC="Install Volta, which is a Node version manager (only works on x86_64 architectures)"
install_language_node() {
    # NOTE: volta only works on x86_64 architectures for now
    _has volta && _has node && return

    curl https://get.volta.sh | bash -s -- --skip-setup

    export VOLTA_HOME=~/.volta
    export PATH="${PATH}:${VOLTA_HOME}/bin"

    volta install node

    if _has npm && [ -d "$COMPLETIONS_DIR" ]; then
        npm completion | sudo tee "$COMPLETIONS_DIR/npm" >/dev/null
    fi

}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Bun  - https://bun.sh/docs/installation                     {{{

INSTALL_LANGUAGE_BUN_DOC="Install Bun, which is a new javascript runtime similar to Node"
install_language_bun() {
    _has bun && return

    curl -fsSL https://bun.sh/install | bash
    export BUN_INSTALL="$HOME/.bun"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Lua  - https://www.lua.org/download.html                    {{{

INSTALL_LANGUAGE_LUA_DOC="Install Lua, LuaJIT (compiler), and LuaRocks (package manager)"
install_language_lua() {
    if ! _has lua; then
        curl -R -O https://www.lua.org/ftp/lua-5.4.6.tar.gz
        tar -zxf lua-5.4.6.tar.gz
        cd lua-5.4.6 || return

        make linux test
        sudo make install

        cd ..
        rm -rf lua-5.4.6 lua-5.4.6.tar.gz
    fi

    ### LuaJIT (compiler)              {{{
    ### https://luajit.org/download.html
    if ! _has luajit; then
        if ! [ -d "$LIB/luajit" ]; then
            git clone https://luajit.org/git/luajit.git "$LIB/luajit"
        fi

        cd "$LIB/luajit" || return
        git pull

        sudo make
        sudo make install
    fi

    ###}}}
    ### Luarocks (Lua package manager) {{{
    ### https://luarocks.org#quick-start
    if ! _has luarocks; then
        wget https://luarocks.org/releases/luarocks-3.9.2.tar.gz
        tar zxpf luarocks-3.9.2.tar.gz
        cd luarocks-3.9.2 || return

        ./configure --lua-version=5.4
        make
        sudo make install

        cd ..
        rm -rf luarocks-3.9.2 luarocks-3.9.2.tar.gz
    fi

    ###}}}
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Package manager install functions                                     {{{
# --------------------------------------------------------------------- {|}

## Cargo global packages - https://crates.io                   {{{

INSTALL_PACKAGES_CARGO_DOC="Install global Rust packages with cargo"
install_packages_cargo() {
    ! [ -r "$DEPS_DIR/cargo" ] && return
    install_language_rust

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        # shellcheck disable=2015
        [ "${pkg:0:1}" != "#" ] && cargo install "$pkg" || true
    done <"$DEPS_DIR/cargo"
    unset pkg

    # link batcat to bat due to package name conflict
    ! _has bat && _has batcat &&
        ln -s "$(command -v batcat)" "$BIN_DIR/bat"

    # link fdfind to fd
    ! _has fd && _has fdfind &&
        ln -s "$(command -v fdfind)" "$BIN_DIR/fd"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Go global packages - https://pkg.go.dev                     {{{

INSTALL_PACKAGES_GO_DOC="Install global Golang packages"
install_packages_go() {
    ! [ -r "$DEPS_DIR/go" ] && return
    install_language_go

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        # shellcheck disable=2015
        [ "${pkg:0:1}" != "#" ] && go install "$pkg" || true
    done <"$DEPS_DIR/go"
    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Pip global packages - https://pypi.org/project/pip          {{{

INSTALL_PACKAGES_PIP_DOC="Install global Python packages with pip3"
install_packages_pip() {
    ! [ -r "$DEPS_DIR/pip" ] && return

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        # shellcheck disable=2015
        [ "${pkg:0:1}" != "#" ] && pip3 install --user "$pkg" || true
    done <"$DEPS_DIR/pip"
    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## NPM global packages - https://www.npmjs.com                 {{{

INSTALL_PACKAGES_NPM_DOC="Install global Node packages with npm"
install_packages_npm() {
    ! [ -r "$DEPS_DIR/npm" ] && return
    install_language_node

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        # shellcheck disable=2015
        [ "${pkg:0:1}" != "#" ] && npm install -g "$pkg" || true
    done <"$DEPS_DIR/npm"
    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

## Install vim plugins                                         {{{

INSTALL_PACKAGES_VIM_DOC="Update vim plugins from source and build helptags"
install_packages_vim() {
    cd && _update_modules .vim

    vim +"$(
        find ~/.vim/pack/foo/opt -maxdepth 1 -mindepth 1 -type d \
            -exec basename --multiple {} \; |
            perl -pe 's/^/packadd /' | tr '\n' '|'
    ) helptags ALL | quit"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install neovim plugins                                      {{{

INSTALL_PACKAGES_NEOVIM_DOC="Update/install neovim plugins and devdoc sources"
install_packages_neovim() {
    nvim --headless +"Lazy! sync" +qa

    devdoc_sources=(
        "astro"
        "bash"
        "browser_support_tables"
        "css"
        "docker"
        "dom"
        "esbuild"
        "gnu_make"
        "go"
        "html"
        "http"
        "javascript"
        "jest"
        "jq"
        "jsdoc"
        "lua-5.1"
        "markdown"
        "node"
        "npm"
        "react"
        "sass"
        "sqlite"
        "svelte"
        "svg"
        "tailwindcss"
        "typescript"
        "vite"
        "vue-3"
        "webpack-5"
    )

    if [ -d "$XDG_DATA_HOME/nvim/devdocs/docs" ] && [ "$(
        find "$XDG_DATA_HOME/nvim/devdocs/docs" -type d | wc -l
    )" -le ${#devdoc_sources[@]} ]; then
        nvim --headless +"DevdocsInstall ${devdoc_sources[*]}"
    else
        nvim --headless +DevdocsUpdateAll
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Shell script install functions                                        {{{
# --------------------------------------------------------------------- {|}

## dircolors                                                   {{{

# https://github.com/seebi/dircolors-solarized
# https://github.com/nordtheme/dircolors/
# https://github.com/dracula/dircolors
# https://github.com/ivoarch/dircolors-zenburn
# https://github.com/karoliskoncevicius/dircolors-moonshine
# https://github.com/joshjon/bliss-dircolors
# https://github.com/peterhellberg/dircolors-jellybeans
# https://github.com/trapd00r/LS_COLORS

INSTALL_SCRIPT_DIRCOLORS_DOC="Install script for styling the output of ls"
install_script_dircolors() {
    curl -Lo "$HOME/.dircolors" \
        https://raw.githubusercontent.com/trapd00r/LS_COLORS/master/LS_COLORS
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## bash completion                                             {{{

INSTALL_SCRIPT_COMPLETION_DOC="Install bash completion scripts for various tools"
install_script_completion() {
    ! [ -d "$COMPLETIONS_DIR" ] && return

    if _has make; then
        curl -Lo "$COMPLETIONS_DIR/make" \
            https://raw.githubusercontent.com/Bash-it/bash-it/master/completion/available/makefile.completion.bash
    fi

    if _has notify-send; then
        curl -Lo "$COMPLETIONS_DIR/notify-send" \
            https://raw.githubusercontent.com/Bash-it/bash-it/master/completion/available/notify-send.completion.bash
    fi

    if _has ssh; then
        curl -Lo "$COMPLETIONS_DIR/ssh" \
            https://raw.githubusercontent.com/Bash-it/bash-it/master/completion/available/ssh.completion.bash
        ln -fs "$COMPLETIONS_DIR/ssh" "$COMPLETIONS_DIR/scp"
        ln -fs "$COMPLETIONS_DIR/ssh" "$COMPLETIONS_DIR/slogin"
        ln -fs "$COMPLETIONS_DIR/ssh" "$COMPLETIONS_DIR/sftp"
    fi

    if _has git-forgit; then
        curl -Lo "$COMPLETIONS_DIR/git-forgit" \
            https://raw.githubusercontent.com/wfxr/forgit/master/completions/git-forgit.bash
    fi

    if _has broot; then
        curl -Lo "$COMPLETIONS_DIR/broot" \
            https://dystroy.org/broot/download/completion/broot.bash
        curl -Lo "$COMPLETIONS_DIR/br" \
            https://dystroy.org/broot/download/completion/br.bash
    fi

    if _has tmux; then
        curl -Lo "$COMPLETIONS_DIR/tmux" \
            https://raw.githubusercontent.com/Bash-it/bash-it/master/completion/available/tmux.completion.bash
        # add completion for 'x' alias
        sed -ri 's/(complete -F _tmux tmux)/\1 x/' "$COMPLETIONS_DIR/tmux"
    fi

    if _has fasd; then
        fasd --init bash-ccomp >"$COMPLETIONS_DIR/fasd"
        # enable bash command mode completion for aliases
        echo "_fasd_bash_hook_cmd_complete fasd za zs zd zf zsd zsf z zz ze zo" >> \
            "$COMPLETIONS_DIR/fasd"
    fi

    if _has pandoc; then
        pandoc --bash-completion >"$COMPLETIONS_DIR/pandoc"
    fi

    if _has glow; then
        glow completion bash >"$COMPLETIONS_DIR/glow"
    fi

    if _has gh; then
        gh completion -s bash >"$COMPLETIONS_DIR/gh"
    fi

    if _has rustup; then
        rustup completions bash >"$COMPLETIONS_DIR/rustup"
        if _has cargo; then
            rustup completions bash cargo >"$COMPLETIONS_DIR/cargo"
        fi
    fi

    if _has npm; then
        npm completion >"$COMPLETIONS_DIR/npm"
    fi

    if _has bun; then
        curl -Lo "$COMPLETIONS_DIR/bun" \
            https://raw.githubusercontent.com/oven-sh/bun/main/completions/bun.bash
    fi

    if _has yarn; then
        curl -Lo "$COMPLETIONS_DIR/yarn" \
            https://raw.githubusercontent.com/dsifford/yarn-completion/master/yarn-completion.bash
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## taskopen   - https://github.com/jschlatow/taskopen          {{{

INSTALL_SCRIPT_TASKOPEN_DOC="Install script for opening files/links in Taskwarrior annotations"
install_script_taskopen() {
    _has taskopen && return

    curl -Lo "$BIN_DIR/taskopen" \
        https://raw.githubusercontent.com/jschlatow/taskopen/v1.2-devel/taskopen

    curl -Lo "$MAN_DIR/man1/taskopen.1" \
        https://raw.githubusercontent.com/jschlatow/taskopen/v1.2-devel/doc/man/taskopen.1

    curl -Lo "$MAN_DIR/man5/taskopenrc.5" \
        https://raw.githubusercontent.com/jschlatow/taskopen/v1.2-devel/doc/man/taskopenrc.5

    sudo chmod +x "$BIN_DIR/taskopen"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## fasd       - https://github.com/clvv/fasd                   {{{

INSTALL_SCRIPT_FASD_DOC="Install script for navigating to files/directories based on frecency"
install_script_fasd() {
    _has fasd && return

    curl -Lo "$BIN_DIR/fasd" \
        https://raw.githubusercontent.com/clvv/fasd/master/fasd

    curl -Lo "$MAN_DIR/man1/fasd.1" \
        https://raw.githubusercontent.com/clvv/fasd/master/fasd.1

    sudo chmod +x "$BIN_DIR/fasd"

    if [ -d "$COMPLETIONS_DIR" ]; then
        sudo cp "$DOTFILES/shell/completions/0_fasd.completion.sh" \
            "$COMPLETIONS_DIR/fasd"
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## fff        - https://github.com/dylanaraps/fff              {{{

INSTALL_SCRIPT_FFF_DOC="Install script for a minimal CLI file browser"
install_script_fff() {
    _has fff && return

    curl -Lo "$BIN_DIR/fff" \
        https://raw.githubusercontent.com/dylanaraps/fff/master/fff

    curl -Lo "$MAN_DIR/man1/fff.1" \
        https://raw.githubusercontent.com/clvv/fff/master/fff.1

    sudo chmod +x "$BIN_DIR/fff"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## i3-volume  - https://github.com/hastinbe/i3-volume          {{{

INSTALL_SCRIPT_I3_VOLUME_DOC="Install script for controlling system volume"
install_script_i3-volume() {
    pushd "$BIN_DIR" >/dev/null
    curl -LO https://raw.githubusercontent.com/hastinbe/i3-volume/master/volume
    sudo chmod +x "$BIN_DIR/volume"
    # sed -ri "s|(# ){0,1}(audio-volume-(muted\|high\|low\|medium\|overamplified))(-symbolic){0,1}|/usr/share/icons/Adwaita/scalable/status/\2-symbolic.svg|g" "$BIN_DIR/volume"
    popd >/dev/null
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## i3-battery - https://github.com/rjekker/i3-battery-popup    {{{

INSTALL_SCRIPT_I3_BATTERY_DOC="Install script for sending low battery notifications"
install_script_i3-battery() {
    pushd "$BIN_DIR" >/dev/null
    curl -LO https://raw.githubusercontent.com/rjekker/i3-battery-popup/master/i3-battery-popup
    sudo chmod +x "$BIN_DIR/i3-battery-popup"
    popd >/dev/null
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## git-open   - https://github.com/paulirish/git-open          {{{

INSTALL_SCRIPT_GIT_OPEN_DOC="Install script for opening links to git objects in the browser"
install_script_git-open() {
    pushd "$BIN_DIR" >/dev/null
    curl -LO https://raw.githubusercontent.com/paulirish/git-open/master/git-open
    sudo chmod +x "$BIN_DIR/git-open"
    popd >/dev/null
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## git-jump   - https://github.com/git/git/tree/master/contrib {{{

INSTALL_SCRIPT_GIT_JUMP_DOC="Install script for jumping to interesting places in an editor"
install_script_git-jump() {
    # it may already be on in the filesystem
    loc1="/usr/local/share/git-core/contrib/git-jump/git-jump"

    # sometimes it gets put in doc for some reason
    loc2="/usr/share/doc/git/contrib/git-jump/git-jump"

    if [ -r "$loc1" ]; then
        cp -p "$loc1" "$BIN_DIR"
    elif [ -r "$loc2" ]; then
        cp -p "$loc2" "$BIN_DIR"
    else
        # otherwise download it
        curl -Lo "$BIN_DIR/git-jump" \
            https://raw.githubusercontent.com/git/git/master/contrib/git-jump/git-jump
    fi

    sudo chmod +x "$BIN_DIR/git-jump"
    unset loc1 loc2
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## git-forgit - https://github.com/wfxr/forgit                 {{{

INSTALL_SCRIPT_GIT_FORGIT_DOC="Install script that is an an fzf wrapper around git commands"
install_script_git-forgit() {
    curl -Lo "$BIN_DIR/git-forgit" \
        https://raw.githubusercontent.com/wfxr/forgit/master/bin/git-forgit

    if [ -d "$COMPLETIONS_DIR" ]; then
        curl -Lo "$COMPLETIONS_DIR/git-forgit" \
            https://raw.githubusercontent.com/wfxr/forgit/master/completions/git-forgit.bash
    fi

    sudo chmod +x "$BIN_DIR/git-forgit"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## git-extras - https://github.com/tj/git-extras               {{{

## Install helpful bash scripts for git workflows
INSTALL_SCRIPT_GIT_EXTRAS_DOC="Install scripts for common git workflows"
install_script_git-extras() {
    if _has git-extras; then
        sudo git extras update
    else
        dir=$(mktemp -t -d git-extras-install.XXXXXXXXXX) &&
            cd "$dir" &&
            git clone https://github.com/tj/git-extras.git &>/dev/null &&
            cd git-extras &&
            git checkout $(
                git for-each-ref refs/tags \
                    --count=1 \
                    --sort=-taggerdate \
                    --format='%(refname:short)'
            ) &>/dev/null &&
            sudo make install &&
            rm -rf "$dir"
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Ubuntu dependency install functions                                   {{{
# --------------------------------------------------------------------- {|}

## Install CLI apt packages                                    {{{

## https://manpages.ubuntu.com/manpages/jammy/man8/apt.8
INSTALL_UBUNTU_APT_CORE_DOC="Install essential apt packages"
install_ubuntu_apt-core() {
    ! _has apt-get || ! [ -r "$DEPS_DIR/apt-core" ] && return

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        sudo apt-get install -qq "$pkg" || true
    done <"$DEPS_DIR/apt-core"

    unset pkg

    # link batcat to bat due to package name conflict
    ! _has bat && _has batcat &&
        ln -s "$(command -v batcat)" "$BIN_DIR/bat"

    # link fdfind to fd
    ! _has fd && _has fdfind &&
        ln -s "$(command -v fdfind)" "$BIN_DIR/fd"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install networking apt packages                             {{{

INSTALL_UBUNTU_APT_NETWORK_DOC="Install networking apt packages"
install_ubuntu_apt-network() {
    ! _has apt-get || ! [ -r "$DEPS_DIR/apt-network" ] && return

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        sudo apt-get install -qq "$pkg" || true
    done <"$DEPS_DIR/apt-network"

    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install media apt packages                                  {{{

INSTALL_UBUNTU_APT_MEDIA_DOC="Install media apt packages"
install_ubuntu_apt-media() {
    ! _has apt-get || ! [ -r "$DEPS_DIR/apt-media" ] && return

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        sudo apt-get install -qq "$pkg" || true
    done <"$DEPS_DIR/apt-media"

    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install build apt packages                                  {{{

INSTALL_UBUNTU_APT_BUILD_DOC="Install apt packages required for building"
install_ubuntu_apt-build() {
    ! _has apt-get || ! [ -r "$DEPS_DIR/apt-build" ] && return

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        sudo apt-get install -qq "$pkg" || true
    done <"$DEPS_DIR/apt-build"

    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install i3wm apt packages                                   {{{

## https://i3wm.org/
INSTALL_UBUNTU_APT_I3_DOC="Install apt packages used in the i3 window manager"
install_ubuntu_apt-i3() {
    ! _has apt-get || ! [ -r "$DEPS_DIR/apt-i3" ] && return

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        sudo apt-get install -qq "$pkg" || true
    done <"$DEPS_DIR/apt-i3"

    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install swaywm apt packages                                 {{{

## https://swaywm.org/
INSTALL_UBUNTU_APT_SWAY_DOC="Install apt packages used in the sway window manager"
install_ubuntu_apt-sway() {
    ! _has apt-get || ! [ -r "$DEPS_DIR/apt-sway" ] && return

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        sudo apt-get install -qq "$pkg" || true
    done <"$DEPS_DIR/apt-sway"

    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install and configure lightdm                               {{{

## https://github.com/canonical/lightdm
INSTALL_UBUNTU_LIGHTDM_DOC="Install and configure the lightdm desktop manager"
install_ubuntu_lightdm() {
    if _has apt-get && ! _has lightdm || ! _has slick-greeter; then
        sudo apt-get install -qq lightdm slick-greeter || true
    fi

    if ! [ -f "/etc/lightdm/lightdm.conf" ]; then
        sudo tee /etc/lightdm/lightdm.conf >/dev/null <<EOF
[Seat:*]
greeter-session=slick-greeter
#user-session=sway
EOF
    fi

    if ! [ -f "/etc/lightdm/slick-greeter.conf" ]; then
        sudo tee /etc/lightdm/slick-greeter.conf >/dev/null <<EOF
[Greeter]
background=/usr/share/backgrounds/gruvbox_coffee.png
background-color=#3c3836
show-power=true
show-clock=true
show-quit=true
show-a11y=false
show-keyboard=false
EOF
    fi

    sudo dpkg-reconfigure lightdm
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install GUI apt packages                                    {{{

INSTALL_UBUNTU_APT_GUI_DOC="Install GUI apt packages that for desktop machines"
install_ubuntu_apt-gui() {
    ! _has apt-get || ! [ -r "$DEPS_DIR/apt-gui" ] && return

    while IFS="" read -r pkg || [ -n "$pkg" ]; do
        sudo apt-get install -qq "$pkg" || true
    done <"$DEPS_DIR/apt-gui"

    unset pkg
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install VS Code                                             {{{

## https://code.visualstudio.com/docs/setup/linux
INSTALL_UBUNTU_VSCODE_DOC="Install Visual Studio Code text editor"
install_ubuntu_vscode() {
    _has code && return
    deb="$CACHE_DIR/vscode.deb"

    curl -ssLo "$deb" \
        "https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"

    sudo apt-get install -qq "$deb" || true
    unset deb
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Proton VPN CLI                                      {{{

## https://protonvpn.com/support/linux-vpn-tool/#debian
INSTALL_UBUNTU_PROTONVPN_DOC="Install the Proton VPN CLI"
install_ubuntu_protonvpn() {
    _has protonvpn-cli && return
    deb="protonvpn-stable-release_1.0.3-3_all.deb"

    curl -Lo "$CACHE_DIR/$deb" \
        "https://repo.protonvpn.com/debian/dists/stable/main/binary-all/$deb"

    checksum="de7ef83a663049b5244736d3eabaacec003eb294a4d6024a8fbe0394f22cc4e5"
    echo "$checksum $CACHE_DIR/$deb" | sha256sum --check -

    if sudo apt-get install -qq "$CACHE_DIR/$deb"; then
        sudo apt update
        sudo apt-get install -y proton-vpn-gnome-desktop
    fi

    sudo wget -O "/etc/openvpn/update-resolv-conf" \
        "https://raw.githubusercontent.com/ProtonVPN/scripts/master/update-resolv-conf.sh"
    sudo chmod +x "/etc/openvpn/update-resolv-conf"

    unset deb checksum
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Proton Mail/Calendar app                            {{{

## https://proton.me/support/mail-desktop-app
INSTALL_UBUNTU_PROTONMAIL_DOC="Install the Proton Mail/Calendar desktop application"
install_ubuntu_protonmail() {
    _has proton-mail && return
    deb="ProtonMail-desktop-beta.deb"
    curl -Lo "$CACHE_DIR/$deb" "https://proton.me/download/mail/linux/$deb"
    sudo apt-get install -qq "$CACHE_DIR/$deb" || true
    unset deb
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Discord                                             {{{

## https://discord.com/download
INSTALL_UBUNTU_DISCORD_DOC="Install Discord desktop messaging application"
install_ubuntu_discord() {
    _has discord && return
    deb="$CACHE_DIR/discord.deb"

    curl -Lo "$deb" \
        https://discord.com/api/download?platform=linux\&format=deb

    sudo apt-get install -qq "$deb"
    unset deb
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Signal                                              {{{

## https://www.signal.org/download/linux/
INSTALL_UBUNTU_SIGNAL_DOC="Install Signal desktop messaging application"
install_ubuntu_signal() {
    _has signal-desktop && return
    sudo mkdir -p /etc/apt/keyrings

    curl -fsSL https://updates.signal.org/desktop/apt/keys.asc | sudo gpg --dearmor -o /etc/apt/keyrings/signal-desktop.gpg

    echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/signal-desktop.gpg] https://updates.signal.org/desktop/apt xenial main' |
        sudo tee /etc/apt/sources.list.d/signal-xenial.list

    sudo apt-get update -qq && sudo apt-get install -qq signal-desktop
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install WezTerm                                             {{{

## https://wezfurlong.org/wezterm/install/linux.html
INSTALL_UBUNTU_WEZTERM_DOC="Install WezTerm terminal emulator"
install_ubuntu_wezterm() {
    deb="wezterm-nightly.Ubuntu22.04.deb"
    curl -Lo "$CACHE_DIR/$deb" \
        "https://github.com/wez/wezterm/releases/download/nightly/$deb"

    sudo apt-get install -qq "${CACHE_DIR:?}/${deb}" || true
    rm -f "${CACHE_DIR:?}/${deb}"
    unset deb

    # https://wezfurlong.org/wezterm/config/lua/config/term.html
    tempfile=$(mktemp) &&
        curl -o "$tempfile" \
            https://raw.githubusercontent.com/wez/wezterm/main/termwiz/data/wezterm.terminfo &&
        tic -x -o ~/.terminfo "$tempfile" &&
        rm "$tempfile"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install rg/fd/bat/delta                                     {{{

_install_rust_cli_deb_package() {
    [ -z "$2" ] && echo "Missing args: <binary> <repo>" >&2 && return
    binary="$1"
    repo="$2"

    version=$(basename "$(
        curl -sw "%{redirect_url}" "https://github.com/${repo}/releases/latest"
    )")

    # remove leading 'v'
    version="${version#v}"

    if _has "$binary" && [ "$(${binary} -V | awk '{print $2}')" = "$version" ]; then
        echo "The latest version of $binary ($version) is already installed" >&2
        return
    fi

    deb="${binary}_${version}_$(dpkg --print-architecture).deb"
    curl -Lo "${CACHE_DIR:?}/${deb}" \
        "https://github.com/${repo}/releases/latest/download/${deb}"

    sudo apt-get install -qq "${CACHE_DIR:?}/${deb}"
    exit_code="$?"

    rm -f "${CACHE_DIR:?}/${deb}"
    unset deb
    return "$exit_code"
}

## https://github.com/BurntSushi/ripgrep#installation
INSTALL_UBUNTU_RG_DOC="Install blazingly fast grep replacement"
install_ubuntu_rg() {
    if [ $(dpkg --print-architecture) != "amd64" ]; then
        echo "ripgrep only provides a deb package for amd64" >&2
    else
        _install_rust_cli_deb_package rg BurntSushi/ripgrep
    fi
}

INSTALL_UBUNTU_FD_DOC="Install blazingly fast find replacement"
install_ubuntu_fd() { _install_rust_cli_deb_package fd sharkdp/fd; }

INSTALL_UBUNTU_BAT_DOC="Install cat replacement with syntax highlighting"
install_ubuntu_bat() { _install_rust_cli_deb_package bat sharkdp/bat; }

INSTALL_UBUNTU_DELTA_DOC="Install git diff pager with syntax highlighting"
install_ubuntu_delta() { _install_rust_cli_deb_package delta dandavison/delta; }

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Taskwarrior TUI                                     {{{

## https://github.com/kdheepak/taskwarrior-tui
INSTALL_UBUNTU_TASKWARRIOR_TUI_DOC="Install Taskwarrior UI for the terminal"
install_ubuntu_taskwarrior-tui() {
    _has taskwarrior-tui && return
    deb="taskwarrior-tui.deb"

    curl -Lo "$CACHE_DIR/$deb" \
        "https://github.com/kdheepak/taskwarrior-tui/releases/latest/download/$deb"

    sudo apt-get install -qq "$CACHE_DIR/$deb" || true
    unset deb
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Docker Desktop                                      {{{

## https://docs.docker.com/desktop/install/ubuntu/
INSTALL_UBUNTU_DOCKER_DESKTOP_DOC="Install the Docker Desktop GUI application"
install_ubuntu_docker-desktop() {
    _has docker-desktop && return
    deb="docker-desktop-4.16.2-amd64.deb"

    rm -r ~/.docker/desktop || true
    sudo rm /usr/local/bin/com.docker.cli || true
    sudo apt-get purge docker-desktop || true

    curl -Lo "$CACHE_DIR/$deb" \
        "https://desktop.docker.com/linux/main/amd64/$deb"

    sudo apt-get install -qq "$CACHE_DIR/$deb" || true
    unset deb

    sudo groupadd docker
    sudo usermod -aG docker "$USER"
    _has systemctl && sudo systemctl restart docker
    # sudo chown $USER /var/run/docker.sock
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Docker Engine                                       {{{

## https://docs.docker.com/engine/install/ubuntu/
INSTALL_UBUNTU_DOCKER_DOC="Install the Docker Engine package (suitable for servers)"
install_ubuntu_docker() {
    _has docker && return

    sudo install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg |
        sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo chmod a+r /etc/apt/keyrings/docker.gpg

    # shellcheck disable=2027
    echo "deb [arch="$(
        dpkg --print-architecture
    )" signed-by=/etc/apt/keyrings/docker.gpg] \
       https://download.docker.com/linux/ubuntu "$(
        . /etc/os-release && echo "$VERSION_CODENAME"
    )" stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null

    sudo apt-get update -qq && sudo apt-get install -qq \
        docker-ce \
        docker-ce-cli \
        containerd.io \
        docker-buildx-plugin \
        docker-compose-plugin
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Git (latest stable version)                         {{{

## https://git-scm.com/download/linux
INSTALL_UBUNTU_GIT_DOC="Install the latest stable version of git"
install_ubuntu_git() {
    grep -q "git-core/ppa" \
        /etc/apt/sources.list /etc/apt/sources.list.d/* ||
        sudo add-apt-repository -y ppa:git-core/ppa

    sudo apt-get update -qq && sudo apt-get install -qq git
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install GitHub CLI                                          {{{

## https://github.com/cli/cli/blob/trunk/docs/install_linux.md
INSTALL_UBUNTU_GH_DOC="Install the GitHub CLI"
install_ubuntu_gh() {
    _has gh && return

    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg |
        sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg &&
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg &&
        echo "deb [arch=$(dpkg --print-architecture) \
          signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] \
          https://cli.github.com/packages stable main" |
        sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null

    sudo apt-get update -qq && sudo apt-get install -qq gh

    # install bash completion
    if [ -d "$COMPLETIONS_DIR" ]; then
        gh completion -s bash | sudo tee "$COMPLETIONS_DIR/gh" >/dev/null
    fi

    # install gh extensions
    if [ -d "$PERSONAL/gh-fzf" ]; then
        cd "$PERSONAL/gh-fzf"
        gh extension install .
    else
        gh extension install benelan/gh-fzf
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Glow CLI (Markdown rendering)                       {{{

## https://github.com/charmbracelet/glow
INSTALL_UBUNTU_GLOW_DOC="Install Glow for rendering markdown in the terminal"
install_ubuntu_glow() {
    _has glow && return
    sudo mkdir -p /etc/apt/keyrings

    curl -fsSL https://repo.charm.sh/apt/gpg.key |
        sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg

    echo "deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *" |
        sudo tee /etc/apt/sources.list.d/charm.list

    sudo apt-get update -qq && sudo apt-get install -qq glow
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Brave Browser                                       {{{

## https://brave.com/linux/#debian-ubuntu-mint
INSTALL_UBUNTU_BRAVE_DOC="Install Brave Browser"
install_ubuntu_brave() {
    _has brave-browser && return

    sudo curl -fLo /usr/share/keyrings/brave-browser-archive-keyring.gpg \
        https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg

    echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] \
         https://brave-browser-apt-release.s3.brave.com/ stable main" |
        sudo tee /etc/apt/sources.list.d/brave-browser-release.list

    sudo apt-get update -qq && sudo apt-get install -qq brave-browser
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install Vivaldi Browser                                     {{{

INSTALL_UBUNTU_VIVALDI_DOC="Install Vivaldi Browser"
install_ubuntu_vivaldi() {
    _has vivaldi && return
    deb="vivaldi-stable_amd64.deb"

    curl -Lo "$CACHE_DIR/$deb" "https://downloads.vivaldi.com/stable//$deb"

    sudo apt-get install -qq "$CACHE_DIR/$deb" || true
    unset deb
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Operating system theme install functions                              {{{
# --------------------------------------------------------------------- {|}

## Install the four common font weights of Iosevka             {{{

## https://github.com/ryanoasis/nerd-fonts
INSTALL_THEME_FONT_DOC="Install the four most common weights of Iosevka Nerd Font"
install_theme_font() {
    FONTS_DIR="$XDG_DATA_HOME/fonts"
    mkdir -p "$FONTS_DIR"
    pushd "$FONTS_DIR" >/dev/null
    VERSION="$(basename "$(curl -s -w "%{redirect_url}" \
        https://github.com/ryanoasis/nerd-fonts/releases/latest)")"

    curl -LO "https://github.com/ryanoasis/nerd-fonts/raw/$VERSION/patched-fonts/Iosevka/IosevkaNerdFont-Bold.ttf"
    curl -LO "https://github.com/ryanoasis/nerd-fonts/raw/$VERSION/patched-fonts/Iosevka/IosevkaNerdFont-BoldItalic.ttf"
    curl -LO "https://github.com/ryanoasis/nerd-fonts/raw/$VERSION/patched-fonts/Iosevka/IosevkaNerdFont-Regular.ttf"
    curl -LO "https://github.com/ryanoasis/nerd-fonts/raw/$VERSION/patched-fonts/Iosevka/IosevkaNerdFont-Italic.ttf"

    # reload the font cache
    fc-cache -rf
    popd >/dev/null
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install all weights of Iosevka                              {{{

## https://github.com/ryanoasis/nerd-fonts
INSTALL_THEME_FONT_COMPLETE_DOC="Install all weights of Iosevka Nerd Font"
install_theme_font-complete() {
    FONTS_DIR="$XDG_DATA_HOME/fonts"
    VERSION="$(basename "$(curl -s -w "%{redirect_url}" \
        https://github.com/ryanoasis/nerd-fonts/releases/latest)")"

    mkdir -p "$FONTS_DIR"
    curl -LO "https://github.com/ryanoasis/nerd-fonts/releases/download/$VERSION/Iosevka.zip"

    unzip -oqd "$FONTS_DIR" Iosevka -x "*.md"
    rm Iosevka.zip
    fc-cache -rf
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install gruvbox coffee wallpaper                            {{{

INSTALL_THEME_WALLPAPER_DOC="Install gruvbox coffee wallpaper"
install_theme_wallpaper() {
    current_wallpaper="$(xdg-user-dir PICTURES)/Wallpapers/current"
    wallpaper="$(xdg-user-dir PICTURES)/Wallpapers/gruvbox_coffee.png"
    profile="$(xdg-user-dir PICTURES)/Profiles/fry.png"

    # shellcheck disable=2015
    ! [ -r "$wallpaper" ] && curl -Lo "$wallpaper" \
        https://benelan.dev/img/wallpaper.png >/dev/null 2>&1 || true

    ln -fs "$wallpaper" "$current_wallpaper"
    sudo mkdir -p /usr/share/backgrounds
    sudo cp "$wallpaper" /usr/share/backgrounds/

    # shellcheck disable=2015
    ! [ -r "$profile" ] && curl -Lo "$profile" \
        https://benelan.dev/img/profile.png >/dev/null 2>&1 || true

    ln -fs "$profile" "$(xdg-user-dir PICTURES)/Profiles/current"
    [ -d /usr/share/pixmaps/faces ] &&
        sudo cp "$profile" /usr/share/pixmaps/faces/

    case "$XDG_CURRENT_DESKTOP" in
        *gnome* | *GNOME*)
            if _has gsettings; then
                gsettings set org.gnome.desktop.background picture-uri \
                    "file://$current_wallpaper"
                gsettings set org.gnome.desktop.background picture-uri-dark \
                    "file://$current_wallpaper"
            fi
            ;;
        *)
            if [ -n "$WAYLAND_DISPLAY" ] && _has swaybg; then
                swaybg --output "*" --mode fill --image "$current_wallpaper"
            elif _has feh; then
                feh --no-fehbg --bg-center --image-bg "#3c3836" "$current_wallpaper"
            fi
            ;;
    esac
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install gruvbox icons                                       {{{

INSTALL_THEME_ICONS_DOC="Install gruvbox icons pack"
install_theme_icons() {
    if [ "$(uname)" != "Linux" ]; then
        echo "Unsupported operating system for icons: $(uname)" >&2
        return
    fi

    ICONS_DIR=~/.icons
    mkdir -p "$ICONS_DIR"

    # download gruvbox icons
    git -C "$CACHE_DIR" clone --depth=1 \
        https://github.com/SylEleuth/gruvbox-plus-icon-pack.git

    # checkout the latest release (need to remove --depth=1 from clone)
    # git -C "$CACHE_DIR" checkout "$(
    #     git for-each-ref refs/tags \
    #         --count=1 --sort=-taggerdate --format='%(refname:short)'
    # )"

    # remove the old icons to prevent symlink errors
    rm -rf "$ICONS_DIR/Gruvbox-Plus-Dark"

    # move icons to the proper location
    mv "$CACHE_DIR/gruvbox-plus-icon-pack/Gruvbox-Plus-Dark" "$ICONS_DIR"
    rm -rf "$CACHE_DIR/gruvbox-plus-icon-pack"

    # download and install flatbed cursor if it doesn't exist
    if ! [ -d "$ICONS_DIR/FlatbedCursors-Orange" ]; then
        cursors="FlatbedCursors-latest.tar.bz2"

        curl -LO "https://limitland.gitlab.io/flatbedcursors/$cursors"
        extract $cursors

        mv ./FlatbedCursors-Orange ./FlatbedCursors-White "$ICONS_DIR"
        rm -rf ./FlatbedCursors*

        unset cursors
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install conky config                                        {{{

# https://github.com/jxai/lean-conky-config
INSTALL_THEME_CONKY_CONFIG_DOC="Install pe-made conky widgets"
install_theme_conky-config() {
    mkdir -p ~/.config/conky

    curl -Lo "$(
        curl -s "https://api.github.com/repos/jxai/lean-conky-config/releases/latest" |
            jq -r ".tarball_url"
    )" | tar -C "$HOME/.config/conky" --overwrite --strip-components=1 -xzf -

    rm -rf ~/.config/conky/{LICENSE,VERSION,.gitignore,*.example,.*.cfg,*.jpg}

    cat >"$HOME/.config/conky/local.conf" <<EOF
conky.config = {
    alignment = "bottom_right",
    own_window_transparent = true,
    own_window_type = "override",
    gap_x = T_.sr(20), -- horizontal gap from screen edge (default: 0)
    gap_y = T_.sr(20), -- vertical gap from screen edge (default: 0)
    default_color = "ebdbb2", -- text color
    color0 = "b16286", -- clock color
    color1 = "d65d0e", -- heading 1 color
    color2 = "458588", -- heading 2 color
    color3 = "b57614", -- chart color
}

lcc.config = { scale = 1.2 }
lcc.panel = { "cpu", "memory" }

-- vim: ft=lua
EOF
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install rofi config                                         {{{

INSTALL_THEME_ROFI_CONFIG_DOC="Install pre-made rofi applets"
install_theme_rofi-config() {
    if [ -d "$LIB/rofi-scripts" ]; then
        git -C "$LIB/rofi-scripts" pull
    else
        git clone https://github.com/benelan/rofi-scripts.git "$LIB/rofi-scripts"
    fi

    pushd "$LIB/rofi-scripts/" >/dev/null
    "$LIB/rofi-scripts/setup.sh"
    popd >/dev/null

    if [ -d "$HOME/.config/rofi.$USER" ]; then
        cp -r --no-clobber "$HOME/.config/rofi.$USER/"* "$HOME/.config/rofi/"
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Miscellaneous install functions                                       {{{
# --------------------------------------------------------------------- {|}
# Who wants some random binaries downloadeded from the internet? 🙋

## Utility function for downloading binaries compiled by rust  {{{

_download_rust_cli_binary() {
    [ -z "$2" ] && echo "Missing args: <binary> <repo>" >&2 && return
    binary="$1"
    repo="$2"

    version=$(basename "$(
        curl -sw "%{redirect_url}" "https://github.com/${repo}/releases/latest"
    )")

    if _has "$binary" && [ "$(${binary} -V | awk '{print $2}')" = "$version" ]; then
        echo "The latest version of $binary ($version) is already installed" >&2
        return
    fi

    cpu="$(uname -m)"
    kernel="$(uname -s)"

    if [ "$kernel" = "Linux" ]; then
        if [ "$cpu" = "x86_64" ]; then
            machine="$cpu-unknown-linux-musl"
        else
            machine="$cpu-unknown-linux-gnu"
        fi
    elif [ "$kernel" = "Darwin" ]; then
        machine="$cpu-apple-darwin"
    else
        echo "Unsupported kernel: ${kernel:-unknown}" >&2
        return
    fi

    mkdir -p "${CACHE_DIR:?}/$binary"
    curl -L "https://github.com/${repo}/releases/latest/download/$(basename "$repo")-${version}-${machine}.tar.gz" |
        tar -C "${CACHE_DIR:?}/$binary" --overwrite --strip-components=1 -xzf -

    unset machine cpu kernel version binary repo
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install ripgrep                                             {{{

INSTALL_MISC_RG_DOC="Install blazingly fast grep replacement"
install_misc_rg() {
    _has dpkg && install_ubuntu_rg && return
    _download_rust_cli_binary rg BurntSushi/ripgrep

    mv "${CACHE_DIR:?}/rg/rg" "${BIN_DIR:?}/rg"
    mv "${CACHE_DIR:?}/rg/doc/rg.1" "${MAN_DIR:?}/man1/rg.1"
    mv "${CACHE_DIR:?}/rg/complete/rg.bash" "${COMPLETIONS_DIR:?}/rg"

    chmod +x "${BIN_DIR:?}/rg"
    rm -rf "${CACHE_DIR:?}/rg"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install fd                                                  {{{

INSTALL_MISC_FD_DOC="Install blazingly fast find replacement"
install_misc_fd() {
    if _has dpkg && install_ubuntu_fd; then
        return
    fi
    _download_rust_cli_binary fd sharkdp/fd

    mv "${CACHE_DIR:?}/fd/fd" "${BIN_DIR:?}/fd"
    mv "${CACHE_DIR:?}/fd/fd.1" "${MAN_DIR:?}/man1/fd.1"
    mv "${CACHE_DIR:?}/fd/autocomplete/fd.bash" "${COMPLETIONS_DIR:?}/fd"

    chmod +x "${BIN_DIR:?}/fd"
    rm -rf "${CACHE_DIR:?}/fd"
    unset machine cpu kernel version
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install bat                                                 {{{

INSTALL_MISC_BAT_DOC="Install cat replacement with syntax highlighting"
install_misc_bat() {
    _has dpkg && install_ubuntu_bat && return
    _download_rust_cli_binary bat sharkdp/bat

    mv "${CACHE_DIR:?}/bat/bat" "${BIN_DIR:?}/bat"
    mv "${CACHE_DIR:?}/bat/bat.1" "${MAN_DIR:?}/man1/bat.1"
    mv "${CACHE_DIR:?}/bat/autocomplete/bat.bash" "${COMPLETIONS_DIR:?}/bat"

    chmod +x "${BIN_DIR:?}/bat"
    rm -rf "${CACHE_DIR:?}/bat"
    unset machine cpu kernel version
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install delta                                               {{{

INSTALL_MISC_DELTA_DOC="Install git diff pager with syntax highlighting"
install_misc_delta() {
    _has dpkg && install_ubuntu_delta && return
    _download_rust_cli_binary delta dandavison/delta

    mv "${CACHE_DIR:?}/delta/delta" "${BIN_DIR:?}/delta"
    chmod +x "${BIN_DIR:?}/delta"
    rm -rf "${CACHE_DIR:?}/delta"
    unset machine cpu kernel version
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install clipcat                                             {{{

INSTALL_MISC_CLIPCAT_DOC="Install clipboard manager with rofi/fzf integration"
install_misc_clipcat() {
    version=$(basename "$(
        curl -sw "%{redirect_url}" \
            https://github.com/xrelkd/clipcat/releases/latest
    )")

    cpu="$(uname -m)"
    kernel="$(uname -s)"

    # shellcheck disable=2235
    if [ "$kernel" != "Linux" ] || (
        [ "$cpu" != "x86_64" ] && [ "$cpu" != "aarch64" ]
    ); then
        echo "Only supports Linux with x86_64 or aarch64" >&2
        return
    fi

    curl -L "https://github.com/xrelkd/clipcat/releases/download/${version}/clipcat-${version}-$cpu-unknown-linux-musl.tar.gz" |
        tar -C "$BIN_DIR" --overwrite -xzf -

    rm -f ./README.md ./LICENSE
    chmod +x "$BIN_DIR/clipcat*"
    unset cpu kernel version

    clipcatctl completions bash >"$COMPLETIONS_DIR/clipcatctl"
    clipcat-menu completions bash >"$COMPLETIONS_DIR/clipcat-menu"
    clipcatd completions bash >"$COMPLETIONS_DIR/clipcatd"

    if ! [ -r "$XDG_CONFIG_HOME/systemd/user/clipcat.service" ]; then
        mkdir -p "$XDG_CONFIG_HOME/systemd/user"
        cat >"$XDG_CONFIG_HOME/systemd/user/clipcat.service" <<EOF
[Unit]
Description=Clipcat Daemon
PartOf=graphical-session.target
ConditionArchitecture = x86-64
ConditionFileIsExecutable=$BIN_DIR/clipcatd

[Install]
WantedBy=graphical-session.target
[Service]

ExecStart=$BIN_DIR/clipcatd --no-daemon --replace
Restart=on-failure
Type=simple
EOF
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install jq                                                  {{{

INSTALL_MISC_JQ_DOC="Install command line json processor"
install_misc_jq() {
    curl -Lo "$BIN_DIR/jq" \
        https://github.com/jqlang/jq/releases/latest/download/jq-linux-amd64
    chmod +x "$BIN_DIR/jq"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install yq                                                  {{{

INSTALL_MISC_YQ_DOC="Install jq-like yaml/json/xml processor"
install_misc_yq() {
    curl -Lo "$BIN_DIR/yq" \
        https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
    chmod +x "$BIN_DIR/yq"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install broot                                               {{{

INSTALL_MISC_BROOT_DOC="Install file manager with fuzzy search and tree listing"
install_misc_broot() {
    curl -Lo "$BIN_DIR/broot" \
        https://dystroy.org/broot/download/x86_64-linux/broot
    chmod +x "$BIN_DIR/broot"

    if [ -d "$COMPLETIONS_DIR" ]; then
        rm -f "$COMPLETIONS_DIR/br{,oot}"
        curl -Lo "$COMPLETIONS_DIR/broot" \
            https://dystroy.org/broot/download/completion/broot.bash
        curl -Lo "$COMPLETIONS_DIR/br" \
            https://dystroy.org/broot/download/completion/br.bash
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install vifm                                                {{{

INSTALL_MISC_VIFM_DOC="Install vim-like CLI file manager"
install_misc_vifm() {
    if [ $(uname -m) != "x86_64" ]; then
        echo "vifm only provides an AppImage package for x86_64" >&2
        return
    fi

    version=$(basename $(curl -sw "%{redirect_url}" \
        https://github.com/vifm/vifm/releases/latest))

    curl -Lo "$BIN_DIR/vifm" \
        "https://github.com/vifm/vifm/releases/latest/download/vifm-$version-x86_64.AppImage"

    chmod +x "$BIN_DIR/vifm"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install neovim                                              {{{

## https://github.com/neovim/neovim/releases
## https://github.com/stevearc/dotfiles/blob/master/scripts/install_neovim.sh
INSTALL_MISC_NEOVIM_DOC="Install a specific version of neovim (AppImage)"
install_misc_neovim() {
    set -e

    PROGRAM=${PROGRAM:-nvim}

    if _has fzf && _has jq && [ -z "$1" ]; then
        version="$(
            curl -s https://api.github.com/repos/neovim/neovim/releases |
                jq -r ".[].tag_name" |
                fzf --no-multi
        )"
    else
        version="${1:-stable}"
    fi

    echo "Installing NVIM $version" >&2
    curl -LO "https://github.com/neovim/neovim/releases/download/$version/nvim.appimage"
    chmod +x nvim.appimage

    if ./nvim.appimage -h >/dev/null 2>&1; then
        mv nvim.appimage "$BIN_DIR/nvim"
    else
        mkdir -p ~/.appimages
        mv nvim.appimage "$HOME/.appimages/nvim.appimage"
        pushd ~/.appimages >/dev/null
        ./nvim.appimage --appimage-extract >/dev/null
        rm -rf "nvim-appimage"
        mv squashfs-root "nvim-appimage"
        ln -s -f "$HOME/.appimages/nvim-appimage/AppRun" "$BIN_DIR/nvim"
        rm "nvim.appimage"
        popd >/dev/null
    fi

    curl -Lo "$MAN_DIR/man1/nvim.1" \
        "https://raw.githubusercontent.com/neovim/neovim/$version/src/man/nvim.1"

    printf "\nInstalled %s" "$("$BIN_DIR/nvim" --version | head -n 1)"
    unset version
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install conky                                               {{{

## https://github.com/brndnmtthws/conky/releases
INSTALL_MISC_CONKY_DOC="Install latest version of Conky for desktop widgets (AppImage)"
install_misc_conky() {
    set -e
    file="conky-x86_64.AppImage"
    curl -Lo "$file" "https://github.com/brndnmtthws/conky/releases/latest/download/$file"
    chmod +x "$file"

    if "./$file" -h >/dev/null 2>&1; then
        mv "$file" "$BIN_DIR/conky"
    else
        mkdir -p ~/.appimages
        mv "$file" "$HOME/.appimages/$file"
        pushd ~/.appimages >/dev/null
        "./$file" --appimage-extract >/dev/null
        rm -rf "conky-appimage"
        mv squashfs-root "conky-appimage"
        ln -s -f "$HOME/.appimages/conky-appimage/AppRun" "$BIN_DIR/conky"
        rm "$file"
        popd >/dev/null
    fi
    unset version file
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install yt-dlp                                              {{{
# Used via mpv from a newsboat macro for the youtube feeds I follow

# https://github.com/yt-dlp/yt-dlp
INSTALL_MISC_YT_DLP_DOC="Install latest version of youtube video downloader used by mpv"
install_misc_yt-dlp() {
    curl -Lo "$BIN_DIR/yt-dlp" \
        https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp
    chmod +x "$BIN_DIR/yt-dlp"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Git submodule install/build functions                                 {{{
# --------------------------------------------------------------------- {|}

## Install fzf                                                 {{{

INSTALL_BUILD_FZF_DOC="Build and install fuzzy finder from source"
install_build_fzf() {
    ! [ -d "$LIB/fzf" ] && return
    cd "$LIB/fzf" || return

    git fetch --all --tags --force --prune
    git reset --hard origin/master
    git checkout "$(
        git for-each-ref refs/tags \
            --count=1 \
            --sort=-taggerdate \
            --format='%(refname:short)'
    )"

    # GOFLAGS="$GOFLAGS -buildvcs=false"
    make && make install && chmod +x "$LIB/fzf/bin/fzf"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install neovim                                              {{{

INSTALL_BUILD_NEOVIM_DOC="Build and install neovim editor from source"
install_build_neovim() {
    ! [ -d "$LIB/neovim" ] && return
    cd "$LIB/neovim" || return
    neovim_head="$(git rev-parse HEAD)"

    git fetch --all --tags --force
    git reset --hard origin/master
    git checkout stable

    if [ "$(git rev-parse HEAD)" != "$neovim_head" ]; then
        sudo make CMAKE_BUILD_TYPE=Release
        sudo make install
    fi

    unset neovim_head
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install clipmenu                                            {{{

INSTALL_BUILD_CLIPMENU_DOC="Install simple X11 clipboard manager with rofi/fzf integration"
install_build_clipmenu() {
    if [ -d "$LIB/clipnotify" ]; then
        git -C "$LIB/clipnotify" fetch --all
        if git -C "$LIB/clipnotify" diff --quiet HEAD...origin/HEAD; then
            git -C "$LIB/clipnotify" pull
        else
            skip_clipnotify=1
        fi
    else
        git clone https://github.com/cdown/clipnotify.git "$LIB/clipnotify"
    fi

    if [ -d "$LIB/clipmenu" ]; then
        git -C "$LIB/clipmenu" fetch --all
        if git -C "$LIB/clipmenu" diff --quiet HEAD...origin/HEAD; then
            git -C "$LIB/clipmenu" pull
        else
            skip_clipmenu=1
        fi
    else
        git clone -b master https://github.com/cdown/clipmenu.git "$LIB/clipmenu"
    fi

    if [ -z "$skip_clipnotify" ]; then
        make -C "$LIB/clipnotify" install PREFIX=~/.local &&
            rm "$LIB/clipnotify/clipnotify"
    fi

    [ -n "$skip_clipmenu" ] && return

    make -C "$LIB/clipmenu" install PREFIX=~/.local

    # replace the bin path in the service since we changed PREFIX
    sed -i "s|/usr/bin/clipmenud|/home/$USER/.local/bin/clipmenud|g" \
        ~/.local/lib/systemd/user/clipmenud.service

    # move the service to the correct directory
    mkdir -p "${XDG_CONFIG_HOME:-$HOME/.config}/systemd/user"
    mv ~/.local/lib/systemd/user/clipmenud.service \
        "${XDG_CONFIG_HOME:-$HOME/.config}/systemd/user/"
    rm -rf ~/.local/lib/systemd/

    systemctl --user daemon-reload
    systemctl --user enable --now clipmenud

    unset skip_clipnotify skip_clipmenu
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install tuigreet for greetd login manager                   {{{
# https://github.com/apognu/tuigreet

INSTALL_BUILD_TUIGREET_DOC="Install a simple greeter for the greetd login manager"
install_build_tuigreet() {
    # trying installing greetd with apt if it's not already installed
    if ! _has greetd; then
        sudo apt-get install -qqy greetd || return
        sudo useradd -M -G video greeter
        sudo chmod -R go+r /etc/greetd/
    fi

    if [ -d "$LIB/tuigreet" ]; then
        git -C "$LIB/tuigreet/" fetch --all
        if git -C "$LIB/tuigreet" diff --quiet HEAD...origin/HEAD; then
            git -C "$LIB/tuigreet" pull
        else
            return
        fi
    else
        git clone https://github.com/apognu/tuigreet.git "$LIB/tuigreet"
    fi

    cd "$LIB/tuigreet" || return

    install_language_rust
    cargo build --release

    sudo mv target/release/tuigreet /usr/local/bin/tuigreet
    sudo mkdir -p /var/cache/tuigreet
    sudo chown greeter:greeter /var/cache/tuigreet
    sudo chmod 0755 /var/cache/tuigreet

    sudo systemctl daemon-reload
    sudo systemctl enable --now greetd

    mkdir -p /etc/greetd
    sudo tee /etc/greetd/config.toml >/dev/null <<EOF
[terminal]
vt = 1
[default_session]
command = "tuigreet --asterisks --theme 'input=green;button=green' --remember-user-session -itrc sway-run"
user = "greeter"
EOF
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Dependency group install functions                                    {{{
# --------------------------------------------------------------------- {|}

## Ubuntu-specific packages                                    {{{

ubuntu_installs() {
    ! _has apt-get && echo "Not on an Debian-based system" >&2 && return

    ## CLI install scripts (suitable for servers)
    install_ubuntu_apt-core
    install_ubuntu_apt-network
    install_ubuntu_docker
    install_ubuntu_rg
    install_ubuntu_fd
    install_ubuntu_bat
    install_ubuntu_delta
    install_ubuntu_gh
    install_ubuntu_git
    install_ubuntu_glow
    install_ubuntu_taskwarrior-tui

    ## GUI install scripts
    if [ "$DESKTOP_MACHINE" = "1" ]; then
        install_ubuntu_apt-gui
        install_ubuntu_apt-media
        install_ubuntu_brave
        install_ubuntu_vscode
        install_ubuntu_wezterm
        install_ubuntu_vivaldi

        if [ -z "$WORK_MACHINE" ]; then
            # install_ubuntu_docker-desktop
            install_ubuntu_protonvpn
            install_ubuntu_protonmail
            install_ubuntu_discord
            install_ubuntu_signal
        fi
    fi

    sudo apt-get update -qq && sudo apt-get upgrade -qq && sudo apt-get autoremove -qq
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install i3 and related tools                                {{{
i3_installs() {
    install_ubuntu_apt-i3
    install_theme_rofi-config
    install_script_i3-volume
    install_script_i3-battery
    install_build_clipmenu

    if ! _has xidlehook; then
        install_language_rust
        cargo install xidlehook --bins
    fi

    sudo mkdir -p /etc/X11/xorg.conf.d
    sudo tee /etc/X11/xorg.conf.d/30-touchpad.conf >/dev/null <<EOF
Section "InputClass"
    Identifier "touchpad"
    Driver "libinput"
    MatchIsTouchpad "true"
    Option "Tapping" "false"
    Option "TappingDrag" "false"
    Option "ClickMethod" "clickfinger"
    Option "ScrollMethod" "twofinger"
    Option "NaturalScrolling" "true"
    Option "DisableWhileTyping" "true"
    Option "AccelSpeed" "0.25"
EndSection
EOF
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install sway and related tools                              {{{
sway_installs() {
    install_ubuntu_apt-sway
    install_theme_rofi-config
    install_theme_wallpaper
    install_script_i3-volume
    install_script_i3-battery
    # install_build_tuigreet

    _has go && go install go.senan.xyz/cliphist@latest
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Operating system theming                                    {{{

theme_installs() {
    install_theme_font
    install_theme_wallpaper
    install_theme_icons
    install_theme_rofi-config
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Shell scripts                                               {{{

script_installs() {
    install_script_completion
    install_script_fasd
    install_script_fff
    install_script_taskopen
    install_script_git-forgit
    install_script_git-jump
    install_script_git-open
    # install_script_dircolors
    # install_script_git-extras
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Programming languages                                       {{{

language_installs() {
    install_language_go
    install_language_rust
    install_language_node
    install_language_bun
    # install_language_lua
    # install_language_nim
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Package manager dependencies                                {{{

packages_installs() {
    install_packages_cargo
    install_packages_go
    install_packages_npm
    install_packages_pip
    install_packages_vim
    # install_packages_neovim
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Git submodules and local builds                             {{{

build_installs() {
    _update_modules
    install_ubuntu_apt-build
    install_build_neovim || true
    install_build_fzf || true
    install_packages_vim
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## All install groups                                          {{{

all_installs() {
    ubuntu_installs
    packages_installs
    script_installs
    build_installs
    theme_installs
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
# Dependency help messages, argument parsing, and function execution    {{{
# --------------------------------------------------------------------- {|}

## Dependency installation help message                        {{{

deps_help() {
    if [ -n "$*" ]; then
        printf "Error: %s\n" "$*" >&2
    fi
    cat <<EOF

Install dependencies by category or name. The names of supported dependencies
are printed when no argument is provided to a lowercase flag.

Usage:
  dot deps [-ABLPSTUWXh] [-b <build>] [-l <language>] [-m <misc>] [-p <package>]
           [-s <script>] [-t <theme>] [-u <ubuntu>] [-n [<neovim-version>]]

Flags:
  -A    Install all dependency groups
  -B    Install all locally built dependencies
  -L    Install all programming languages
  -P    Install all package manager dependencies
  -S    Install all shell script dependencies
  -T    Install all operating system theme dependencies
  -U    Install all Ubuntu-specific dependencies
  -W    Install sway window manager (Wayland) and related tools
  -X    Install i3 window manager (X11) and related tools

  -b    Install a locally built dependency
  -l    Install a programming language
  -m    Install a miscellaneous dependency
  -n    Install a specific version of neovim
  -p    Install a package manager's dependencies
  -s    Install a shell script dependency
  -t    Install an operating system theme dependency
  -u    Install an Ubuntu-specific dependency
  -h    Show this message
EOF
    exit 1
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Dependency installation help message for a specific flag    {{{

deps_command_help() {
    [ -z "$1" ] && deps_help
    printf "option -%s requires one of the following arguments:\n\n" "${1}" >&2
    case $1 in
        b) list_dependency_options install_build_ ;;
        u) list_dependency_options install_ubuntu_ ;;
        l) list_dependency_options install_language_ ;;
        m) list_dependency_options install_misc_ ;;
        s) list_dependency_options install_script_ ;;
        t) list_dependency_options install_theme_ ;;
        p) list_dependency_options install_packages_ ;;
    esac
    exit 1
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## List the dependencies in the given category's flag          {{{

list_dependency_options() {
    commands="$(declare -F | grep "\\b$1" | awk '{print $3}')"
    (for cmd in $commands; do
        docvar="$(echo "$cmd" | tr '-' '_' | tr '[:lower:]' '[:upper:]')_DOC"
        doc=$(eval 'echo $'"$docvar")
        echo "  ${cmd#"$1"}{  $doc"
    done) | column -s '{' -t
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Install a dep if supported, otherwise print help message    {{{

install_dependency() {
    [ -z "$2" ] && deps_help
    cmd="install_${1}_${2}"

    if _has "$cmd"; then
        "$cmd"
    else
        printf "Error: invalid $1 dependency \"%s\"\n" "$2" >&2
        deps_command_help "${1:0:1}"
    fi
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}
## Parse dependency flags and run install functions            {{{

deps_parse_flags() {
    if [ -z "$LIB" ] || [ -z "$DOTFILES" ]; then
        printf "\$LIB and/or \$DOTFILES environment variable(s) not set, exiting.\n" >&2
        exit 1
    fi

    if [ -z "$*" ]; then
        deps_help "at least one flag is required"
    fi

    BIN_DIR="$HOME/.local/bin"
    MAN_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/man"
    COMPLETIONS_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/bash-completion/completions"
    DEPS_DIR="$DOTFILES/deps"
    CACHE_DIR="$DOTFILES/cache"

    mkdir -p "$BIN_DIR" "$MAN_DIR/man1" "$MAN_DIR/man5" "$CACHE_DIR" "$COMPLETIONS_DIR"

    while getopts :Bb:Uu:Ll:Ss:Tt:Pp:m:nAWXh opt; do
        case $opt in
            B) build_installs ;;
            b) install_dependency "build" "$OPTARG" ;;

            L) language_installs ;;
            l) install_dependency "language" "$OPTARG" ;;

            P) packages_installs ;;
            p) install_dependency "packages" "$OPTARG" ;;

            S) script_installs ;;
            s) install_dependency "script" "$OPTARG" ;;

            T) theme_installs ;;
            t) install_dependency "theme" "$OPTARG" ;;

            U) ubuntu_installs ;;
            u) install_dependency "ubuntu" "$OPTARG" ;;

            m) install_dependency "misc" "$OPTARG" ;;
            n) install_misc_neovim "${OPTARG}" ;;
            A) all_installs ;;
            X) i3_installs ;;
            W) sway_installs ;;
            h) deps_help ;;
            :) deps_command_help "${OPTARG}" ;;
            *) deps_help "invalid option \"-${OPTARG}\"" ;;
        esac
    done

    shift "$((OPTIND - 1))"
}

## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - }}}

# --------------------------------------------------------------------- }}}
## Entry function for the dot command                                   {{{
# --------------------------------------------------------------------- {|}

main() {
    case $1 in
        # clone and setup the dotfiles repo
        init) setup_dotfiles ;;

        # install and/or update dependencies
        deps) shift && deps_parse_flags "$@" ;;

        # support for sudo
        sudo) shift && sudo "$@" ;;

        # clone a repo to the directory I keep 3rd part libraries
        get) shift && git clone "$1" "${LIB:?}/$(basename "$1" .git)" ;;

        # creates env vars in (n)vim so git plugins work with the bare dotfiles repo
        edit)
            shift
            # shellcheck disable=2016
            $([ "$EDITOR" = "nvim" ] && echo "nvim" || echo "vim") "$@" \
                --cmd 'let $GIT_WORK_TREE = expand("~")' \
                --cmd 'let $GIT_DIR = expand("~/.git")'
            ;;

        # prevent usage of `git clean` and 'git clear' (from git-extras)
        clea*) echo "Don't delete your home directory, dumbass" >&2 && exit 1 ;;

        # override my git aliases
        all) _dot add --update ;;
        rh) _dot stash push -m "RESET" ;;

        # all other commands are passed directly to git
        *) _dot "$@" ;;
    esac
}

main "$@"

# --------------------------------------------------------------------- }}}
