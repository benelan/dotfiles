#!/usr/bin/env sh
#vim:filetype=sh foldmethod=marker:
set -o errexit

# Prints, copies, or opens text matching a specified pattern.
#
# The MATPAT_COPY_CMD and MATPAT_OPEN_CMD environment variables are used to
# execute the open/copy actions. The defaults should work for most unix systems.
#
# The selected item is piped to MATPAT_COPY_CMD:
#     echo '<SELECTED>' | $MATPAT_COPY_CMD
# The selected item is passed as an argument to MATPAT_OPEN_CMD:
#     $MATPAT_OPEN_CMD '<SELECTED>'
#
# The MIT License
# Copyright (c) 2023-present Ben Elan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Usage info {{{1
help() {
    if [ -n "$*" ]; then
        printf "Error: %s\n\n" "$*" >&2
        logger "ERROR" "$*"
    else
        cat <<EOF
Find text that matches a pattern and copy, open, or print it to stdout.

Usage:           matpat [-t] [-s] [-p pattern]

Flags:
  -t . . . . . . Match text from tmux panes instead of stdin.
  -s . . . . . . Select a match with fzf to copy, open, or print.
                 Omit the flag to print all matches to stdout.
  -p . . . . . . The pattern used to match text (options below).
                 Omit the flag to select a pattern with fzf.
  -h . . . . . . Show this message.

Patterns:
  u, uri, url    URIs (e.g., https://cht.sh or file://foo/bar.baz)
  i, ip          IP addresses (e.g., 192.168.1.1)
  s, sha         Short or long Git SHAs (e.g., 64945dd)
  r, range       Git SHA ranges (e.g., 123456..654321)

Examples:
  # print all IP addresses from a log file.
  cat logs/access.log | matpat -p ip
  # find URIs in all open tmux panes and select one using fzf.
  matpat -stp u

EOF
    fi
    exit 1
}

# Configuration {{{1
if [ "$MATPAT_LOGS" = "1" ] || [ -z "$MATPAT_LOGS" ] && [ -n "$DEBUG" ]; then
    MATPAT_LOGS="$HOME/.dotfiles/cache/matpat.log"
fi

logger() {
    if [ -n "$DEBUG" ] || [ -n "$MATPAT_LOGS" ] && [ "$MATPAT_LOGS" != "0" ]; then
        printf "%s | %s | %s" \
            "$1" \
            "$(date +%Y-%m-%dT%H:%M:%S 2>/dev/null)" \
            "$2" \
            >>"$MATPAT_LOGS"
    fi
}

has() { command -v "$1" >/dev/null 2>&1; }

if [ -z "$MATPAT_COPY_CMD" ]; then
    if has /mnt/c/Windows/System32/clip.exe; then
        MATPAT_COPY_CMD="/mnt/c/Windows/System32/clip.exe" # Windows (WSL)
    elif has xsel; then
        MATPAT_COPY_CMD="xsel -bi" # Linux (X11)
    elif has xclip; then
        MATPAT_COPY_CMD="xclip -selection clipboard" # Linux (X11)
    elif has wl-copy; then
        MATPAT_COPY_CMD="wl-copy" # Linux (Wayland)
    elif has pbcopy; then
        MATPAT_COPY_CMD="pbcopy" # OSX
    fi
    logger "INFO " "MATPAT_COPY_CMD environment variable is not set, defaulting to \"$MATPAT_COPY_CMD\""
fi

if [ -z "$MATPAT_OPEN_CMD" ]; then
    if has wslview; then
        MATPAT_OPEN_CMD="wslview" # Windows (WSL)
    elif has xdg-open; then
        MATPAT_OPEN_CMD="xdg-open" # Linux
    elif has open; then
        MATPAT_OPEN_CMD="open" # OSX
    else
        MATPAT_OPEN_CMD="$BROWSER" # Fallback
    fi
    logger "INFO " "MATPAT_OPEN_CMD environment variable is not set, defaulting to \"$MATPAT_OPEN_CMD\""
fi

# Patterns {{{1
uri() {
    # https://en.wikipedia.org/wiki/List_of_URI_schemes
    _uri_network_schemes='(?:https?://|\bwww\.|s?ftp://|wss?:|ssh://|udp://|vnc://|ldaps?://|dns://'
    _uri_app_schemes='payto://|mailto:|callto:|tel:|magnet:|maps:|geo:|slack://|msteams://|news://|steam://|obsidian://'
    _uri_misc_schemes='s3://|rediss?://|git://|svn://|cvs://|nfs://|file://|data:)'
    _uri_schemes="(?:$_uri_network_schemes|$_uri_app_schemes|$_uri_misc_schemes)"
    grep -oP "${_uri_schemes}[a-zA-Z0-9\-\@;\/?:&=%\$_.+!*\x27,~#]*(\([a-zA-Z0-9\-\@;\/?:&=%\$_.+!*\x27,~#]*\)|[a-zA-Z0-9\-\@;\/?:&=%\$_+*~])+"
}

ip_address() {
    grep -oP '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'
}

git_sha() {
    grep -oE '\b[0-9a-fA-F]{5,40}\b'
}

git_sha_range() {
    grep -oE '[0-9a-fA-F]+\.\.\.?[0-9a-fA-F]+'
}

# Find/select or print matches {{{1
o_err="echo 'Error: open command not found, set the MATPAT_OPEN_CMD environment variable' && exit 1"
y_err="echo 'Error: copy command not found, set the MATPAT_COPY_CMD environment variable' && exit 1"

select_match() {
    echo "$*" |
        fzf --no-multi --no-exit-0 --no-select-1 \
            --header='(ctrl-y:copy) (ctrl-o:open) (enter:stdout) (ctrl-c:close)' \
            --bind "ctrl-y:execute(if [ -z \"$MATPAT_COPY_CMD\" ]; then $o_err; else echo {} | $MATPAT_COPY_CMD >/dev/null; fi)+abort" \
            --bind "ctrl-o:execute(if [ -z \"$MATPAT_OPEN_CMD\" ]; then $y_err; else $MATPAT_OPEN_CMD {}; fi)+abort"
}

select_pattern() {
    logger "INFO " "no pattern specified, interactively selecting one"
    printf "%s\\n%s\\n%s\\n%s\\n%s" \
        'all' \
        'uri' \
        'ip_address' \
        'git_sha_range' \
        'git_sha' |
        fzf --multi --header "select the pattern(s) to match"
}

match_pattern() {
    if [ -z "$*" ]; then
        help "no pattern specified or selected"
    fi

    if [ -n "$tmux_mode" ]; then
        logger "DEBUG" "gathering the content of all open tmux panes"
        pane_content=$(
            for pane in $(tmux list-pane -a -F "#S:#I.#P"); do
                tmux capture-pane -t "$pane" -p
            done
        )
    fi

    for pattern in "$@"; do
        if [ -n "$tmux_mode" ]; then
            logger "DEBUG" "finding matches to \"$pattern\" pattern from tmux panes"
            pattern_matches=$(echo "$pane_content" | $pattern | awk '!x[$0]++' || true)
        else
            logger "DEBUG" "finding matches to \"$pattern\" from stdin"
            # shellcheck disable=2086
            pattern_matches=$(eval $pattern | awk '!x[$0]++' || true)
        fi

        if [ -z "$matches" ]; then
            matches="$pattern_matches"
        elif [ -n "$pattern_matches" ]; then
            matches="$(printf "%s\n%s" "$matches" "$pattern_matches")"
            unset pattern_matches
        fi
    done

    logger "DEBUG" "found $(echo "$matches" | wc -l) matches to pattern(s) \"$*\""

    if [ -n "$select_mode" ]; then
        logger "DEBUG" "interactively selecting a match"
        select_match "$matches"
    else
        logger "DEBUG" "printing matches to stdout"
        echo "$matches"
    fi

    unset select_mode tmux_mode matches
}

# Parse args and execute {{{1
# if stdin is piped or not tty
stdin_is_pipe_like() { [ -p /dev/stdin ] || ! [ -t 0 ]; }

main() {
    # Print usage info if `matpat` is called with no args, unless stdin
    # is piped, in which case prompt the user to select a pattern.
    if ! stdin_is_pipe_like; then
        [ -z "$1" ] && help
        # Automatically turn on tmux mode if attached and stdin is
        # not piped, otherwise it hangs waiting for stdin.
        if [ -n "$TMUX" ]; then
            logger "WARN " "auto-enabling tmux mode to prevent hanging"
            tmux_mode=1
        fi
    fi

    pattern="select"

    while getopts p:tsh opt; do
        case $opt in
            p)
                logger "INFO " "pattern specified: $pattern"
                pattern="$OPTARG"
                ;;
            t)
                logger "INFO " "tmux mode enabled via flag"
                tmux_mode=1
                ;;
            s)
                logger "INFO " "select mode enabled via flag"
                select_mode=1
                ;;
            h) help ;;
            *) help "invalid flag: \$opt\"" ;;
        esac
    done

    shift "$((OPTIND - 1))"

    case $pattern in
        a | all) match_pattern uri ip_address git_sha_range git_sha ;;
        i | ip | ip_address) match_pattern ip_address ;;
        r | range | git_sha_range) match_pattern git_sha_range ;;
        s | sha | git_sha) match_pattern git_sha ;;
        u | uri | url) match_pattern uri ;;
        select)
            # shellcheck disable=2046
            match_pattern $(select_pattern)
            ;;
        *) help "unknown pattern: \"$pattern\"" ;;
    esac
}

logger "\nINFO " "START > args: $*"
main "$@"
