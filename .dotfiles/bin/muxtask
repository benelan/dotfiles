#!/bin/sh
set -e

################################################################################
# Attaches/switches to a new "scratch" window when no arguments are provided.
# When a path argument is provided, a window is created at that location and
# attached/switched to, unless additional arguments are provided, in which case
# they are sent to the window instead.
#
# Usage: muxtask [path] [command]
#     [path] - start directory, the basename is used for the new window's name
#     [command] - shell command(s) to send the new window instead of attaching
# Example:
#     $ muxtask ~/dev/myproject "npm install && npm run build && npm start"
################################################################################

# Start tmux if it isn't running
# [ -z "$(pgrep tmux)" ] &&
#     tmux new-session -s "$(basename ~)" -n "scratch" &&
#     exit 0

session_name="$(tmux display-message -p "#S")"

# Check if the provided argument is a valid path
if [ -n "$1" ] && [ -d "$1" ]; then
    task_name="$(basename "$1" | tr "./" "__")"
    task_dir="$(cd "$1" && pwd)"
# Use a scratch window if the path isn't provided or resolved
else
    task_name="scratch"
    task_dir="$(pwd)"
    # if there is an active process, try sending to background or closing
    tmux send-keys -t "$session_name:$task_name" ^Z ^C >/dev/null 2>&1 || true
fi

tmux new-window -Sdn "$task_name" -c "$task_dir"

# Attach, switch, or send keys to the new window
if [ -n "$2" ]; then
    shift
    tmux send-keys -t "$session_name:$task_name" "$*" Enter
elif [ -n "$TMUX" ]; then
    tmux switch-client -t "$session_name:$task_name"
else
    tmux attach -t "$session_name:$task_name"
fi

unset session_name task_name task_dir
