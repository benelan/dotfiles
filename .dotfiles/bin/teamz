#!/usr/bin/env sh
set -o errexit

CMD="$(basename "$0")"
TEAMS_USER_LIST="${TEAMS_USER_LIST:-"$HOME/.$CMD-users"}"

# Usage info                                                            {{{
# --------------------------------------------------------------------- {|}

help() {
    if [ -n "$*" ]; then
        printf "Error: %s\nTry -h for more info.\n" "$*" >&2
        exit 1
    else
        cat <<EOF
Open Microsoft Teams with a prefilled message to a user or group chat.

Usage:      $CMD [-eh] [-m MESSAGE]... [-u USER]...

Flags:
  -u        The user to message. Repeat the flag to create a group chat.
  -m        The message to send user(s). Repeatable. If omitted, stdin is used.
  -e        Open your text editor to write the message.
  -h        Show this message.

Examples:
  # Use build errors as the prefilled message to your engineering lead.
  npm --no-color run build 2>&1 >/dev/null | $CMD -m "Error:" -u "lead@acme.com"

  # Write to a group chat. Message flag arguments are separated by newlines.
  $CMD -m "Hey!" -m "How's the meeting?" -u "janitor@acme.com" -u "ceo@acme.com"

  # Open your text editor to write the message and select user(s) with fzf.
  $CMD -e

Environment Variables:
  TEAMS_USER_LIST
      Path to a list for selecting user(s) with fzf, defaults to ~/.$CMD-users
      One user per line and the user's email must be first. Additional info can
      optionally be added after the email for fuzzy finding. Fuzzy selecting
      does not occur when users are specified via the -u flag.

  TEAMS_EDITOR
      The text editor to open for writing the message when using the -e flag.
      Defaults to "\$EDITOR".

  TEAMS_BROWSER
      The browser to use for opening the Teams web application. Only used when
      the desktop app is not installed. Defaults to "\$BROWSER".

Troubleshooting:
  If you are using the Teams desktop application, try adding the following line
  under [Default Applications] in ~/.config/mimeapps.list
      x-scheme-handler/msteams=teams.desktop

EOF
    fi
    exit 0
}

# --------------------------------------------------------------------- }}}
# Utilities                                                             {{{
# --------------------------------------------------------------------- {|}

# if stdin is piped or not tty
stdin_is_pipe_like() { [ -p /dev/stdin ] || ! [ -t 0 ]; }

has() { command -v "$1" >/dev/null 2>&1; }

select_users() {
    ! has fzf && help "fzf is required to select users"
    ! [ -r "$TEAMS_USER_LIST" ] && help "user list not found at \"$TEAMS_USER_LIST\"."

    fzf --multi --prompt="Select user(s): " <"$TEAMS_USER_LIST" |
        cut -d' ' -f1 |
        tr '\n' ','
}

append_user() {
    [ -z "$TEAMS_USERS" ] && TEAMS_USERS="$1" || TEAMS_USERS="$TEAMS_USERS,$1"
}

append_msg() {
    [ -z "$TEAMS_MESSAGE" ] && TEAMS_MESSAGE="$1" || TEAMS_MESSAGE="$TEAMS_MESSAGE
$1"
}

uri_encode_msg() {
    ! has jq && help "jq is required to URI encode the message"
    TEAMS_MESSAGE="$(printf "%s" "$TEAMS_MESSAGE" | jq -sRr @uri)"
}

editor_msg() {
    [ -n "$TEAMS_EDITOR" ] && EDITOR="$TEAMS_EDITOR"

    ! has "$EDITOR" &&
        help "set 'TEAMS_EDITOR' or 'EDITOR' environment variables to specify the text editor to use for writing the message"

    tmp_file="$(mktemp --suffix='.md')"

    # shellcheck disable=2064
    trap "rm -f $tmp_file" INT TERM EXIT

    $EDITOR "$tmp_file"
    tmp_msg="$(cat "$tmp_file")"

    if [ -n "$tmp_msg" ]; then
        append_msg "$tmp_msg"
    else
        help "the editor returned an empty message"
    fi
}

create_msg() {
    if has xdg-open; then
        OPEN_CMD="xdg-open"
    elif has open; then
        OPEN_CMD="open"
    elif has wslview; then
        OPEN_CMD="wslview"
    fi

    # Use the desktop app if installed, otherwise open in browser
    if has teams; then
        TEAMS_URI="msteams:"

        if [ -z "$OPEN_CMD" ]; then
            help "One of 'xdg-open', 'open', or 'wslview' executables is required to open the desktop Microsoft Teams app"
        fi
    else
        TEAMS_URI="https://teams.microsoft.com"

        # Use a browser if set via environment variables
        if has "$TEAMS_BROWSER"; then
            OPEN_CMD="$TEAMS_BROWSER"
        elif has "$BROWSER"; then
            OPEN_CMD="$BROWSER"
        fi

        if [ -z "$OPEN_CMD" ]; then
            help "One of 'xdg-open', 'open', 'wslview' executables or 'TEAMS_BROWSER', 'BROWSER' environment variables is required to open the Microsoft Teams web app"
        fi
    fi

    if has nohup; then
        OPEN_CMD="nohup $OPEN_CMD"
        trap "rm -f ./nohup.out ~/nohup.out" INT TERM EXIT
    fi

    $OPEN_CMD "$(
        printf "%s/l/chat/0/0?users=%s&message=%s" \
            "$TEAMS_URI" \
            "$TEAMS_USERS" \
            "$TEAMS_MESSAGE"
    )" 2>/dev/null
}

# --------------------------------------------------------------------- }}}
# Parse args                                                            {{{
# --------------------------------------------------------------------- {|}

main() {
    # If stdin is piped, use it as the message
    if stdin_is_pipe_like; then
        stdin_msg="$(cat)"
    else
        # Print help message if stdin is not piped and there are no args
        [ -z "$*" ] && help
    fi

    while getopts m:u:eh opt; do
        case $opt in
            m) append_msg "$OPTARG" ;;
            u) append_user "$OPTARG" ;;
            e) editor_msg ;;
            h) help ;;
            *) help "invalid option" ;;
        esac
    done

    shift "$((OPTIND - 1))"

    [ -n "$stdin_msg" ] && append_msg "$stdin_msg"
    [ -n "$TEAMS_MESSAGE" ] && uri_encode_msg

    [ -z "$TEAMS_USERS" ] && TEAMS_USERS="$(select_users)"
    [ -z "$TEAMS_USERS" ] && help "no users specified"

    create_msg
}

# --------------------------------------------------------------------- }}}

main "$@"
