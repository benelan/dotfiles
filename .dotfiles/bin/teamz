#!/usr/bin/env sh
set -o errexit

CMD="$(basename "$0")"
USER_LIST="${TEAMS_USER_LIST:-$HOME/.teamsbook}"

TEAMS_URI="msteams:/l/chat/0/0?users="
TEAMS_MESSAGE=""
TEAMS_USERS=""

# Usage info                                                            {{{
# --------------------------------------------------------------------- {|}

help() {
    if [ -n "$*" ]; then
        printf "Error: %s\nTry -h for more info.\n" "$*" >&2
    else
        cat <<EOF
Open Miscrosoft Teams with a prefilled message to a user or group chat.

Usage:           $CMD [-m <message>] [-u <user>...]

Flags:
  -m             Message to send user(s). If omitted, stdin is used.
  -u             User to message. Repeat the flag to create a group chat.
  -h             Show this message.

Examples:
  # Use build errors as the prefilled message, and select user(s) with fzf.
  npm --no-color run build 2>&1 >/dev/null | $CMD

  # Say good morning to a group chat.
  $CMD -m "Good morning!" -u "boss@acme.com" -u "colleague@acme.com"

Environment Variables:
  TEAMS_USER_LIST
      Path to a list for selecting user(s) with fzf, defaults to ~/.teamsbook
      One user per line and the user's email must be the first word.
      Additional info can be added after the email for fuzzy finding.
      Fuzzy selecting does not occur when users are specified via the -u flag.

Troubleshooting:
  Add the following line under [Default Applications] in ~/.config/mimeapps.list
    x-scheme-handler/msteams=teams.desktop

EOF
    fi
    exit 1
}

# --------------------------------------------------------------------- }}}
# Utilities                                                             {{{
# --------------------------------------------------------------------- {|}

# if stdin is piped or not tty
stdin_is_pipe_like() { [ -p /dev/stdin ] || ! [ -t 0 ]; }

has() { command -v "$1" >/dev/null 2>&1; }

select_users() {
    ! has fzf && help "fzf is required to select users"
    [ ! -f "$USER_LIST" ] && help "user list not found at \"$USER_LIST\"."

    fzf --multi \
        --prompt="Select user(s): " \
        --preview="echo {}" \
        <"$USER_LIST" |
        cut -d' ' -f1 |
        tr '\n' ','
}

create_msg() {
    if has xdg-open; then
        OPEN_CMD="xdg-open"
    elif has open; then
        OPEN_CMD="open"
    else
        help "xdg-open or open is required to open Microsoft Teams"
    fi
    if has nohup; then
        OPEN_CMD="nohup $OPEN_CMD"
    fi

    # shellcheck disable=2086
    printf "%s%s&message=%s" \
        "$TEAMS_URI" \
        "$TEAMS_USERS" \
        "$TEAMS_MESSAGE" |
        xargs $OPEN_CMD 2>/dev/null
}

uri_encode_msg() {
    ! has jq && help "jq is required to encode the message"
    TEAMS_MESSAGE="$(printf "%s" "$TEAMS_MESSAGE" | jq -sRr @uri)"
}

# --------------------------------------------------------------------- }}}
# Parse args                                                            {{{
# --------------------------------------------------------------------- {|}

# If stdin is piped, use it as the message
if stdin_is_pipe_like; then
    TEAMS_MESSAGE="$(cat)"
else
    # Print help message if stdin is not piped and there are no args
    [ -z "$*" ] && help
fi

while getopts m:u:h opt; do
    case $opt in
        m) [ -n "$OPTARG" ] && TEAMS_MESSAGE="$OPTARG" ;;
        u)
            [ -z "$TEAMS_USERS" ] &&
                TEAMS_USERS="$OPTARG" ||
                TEAMS_USERS="$TEAMS_USERS,$OPTARG"
            ;;
        h) help ;;
        *) help "invalid flag: \"$opt\"" ;;
    esac
done

shift "$((OPTIND - 1))"

uri_encode_msg

[ -z "$TEAMS_USERS" ] && TEAMS_USERS="$(select_users)"
[ -z "$TEAMS_USERS" ] && help "no users specified"

create_msg

# --------------------------------------------------------------------- }}}
