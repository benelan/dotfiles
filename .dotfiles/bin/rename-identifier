#!/bin/sh

# This originally came from Gary Bernhardt's dotfiles:
#
#   https://github.com/garybernhardt/dotfiles

# This script efficiently bulk-renames identifiers, with confirmation of each
# change. For example, to rename the User class to Person in all files in app
# and lib, do:
#
#   rename-identifier User Person {app,lib}/**/*.rb
#
# The arguments are:
#
#   1) The old (current) identifier
#   2) The new identifier (to rename the old one to)
#   3) The files to look in (in the example above, a standard shell glob is
#   used).
#
# The script will collect all of the given files that contain the old
# identifier, then open them all in a vim instance. Vim will have two new keys
# mapped:
#
#   <leader>rr to do a global search and replace from the old to the new
#   identifier. This uses :s///c, so it will individually confirm each change.
#
#   <leader>rn to write the current file and delete the buffer (going to the
#   next file). This is for when you're doing renaming in the current file.
#
# For both file searching and vim replacing, word boundaries are used. So, if
# you're replacing "User", and you have a file with the string "Users" but not
# "User", that file won't be matched. If a file containing "Users" also matches
# "User", the vim search/replace still won't hit the "Users" token.
#
# A typical session will look like this:
#
#       # Run script
#   <space>rr  # Trigger rename process in first file
#   y   # Replace first identifier found
#   n   # Don't replace second identifier
#       # No more matches are found, so Vim drops us back in normal mode
#   <space>rn  # Write file and go to the next one
#   <space>rr  # Trigger rename process in second file
#       # Etc.
#
# This is much more efficient than clumsily typing the ag, then the ":%s",
# then repeatedly saying ":w" to write, ":bd" to close the buffer, ":<up>" to
# recall the search and replace command, etc.
#
# Notes:
#
#   Sometimes you need to manually adjust something (e.g., things don't line up
#   after an identifier change). That's easy, though: just cancel the
#   search/replace with <esc>, make your change, and hit <leader>j to start the
#   search/replace over again. This is why there are two maps instead of one.
#
#   Despite its name, this isn't limited to single-identifier renames. It will
#   happily rename "Day::Range" to "DayRange", behaving as you'd expect, since
#   it's simply adding word boundaries to both sides of the string.

set -e

if [ $# -lt 3 ]; then
    echo "Usage:   rename-identifier old_identifier new_identifier paths..." >&2
    echo "Example: rename-identifier web-component ReactWrapper src/{components,utils}/**/*.ts?x" >&2
    exit 1
fi

orig=$1
new=$2
shift
shift
search_files=$*

supports rg && search_cmd='rg' ||
    {
        supports ag && search_cmd='ag'
    } ||
    {
        supports grep && search_cmd='grep'
    } ||
    {
        echo "Error: missing required dependency - install rg, ag, or grep" && exit 1
    }

supports nvim && edit_cmd='nvim' ||
    {
        supports vim && edit_cmd='vim'
    } ||
    {
        supports vi && edit_cmd='vi'
    } ||
    {
        echo "Error: missing required dependency - install nvim, vim, or vi" && exit 1
    }

# shellcheck disable=2086
match_files=$($search_cmd -l '\b'$orig'\b' $search_files)
start_rename='nnoremap <leader><CR> :%s/\<'$orig'\>/'$new'/gc<cr>'
next_file='nnoremap <leader><Tab> :update\|:bd<cr>'
rename_all='nnoremap <leader>wa :bufdo %s/\<'$orig'\>/'$new'/ge\|:update<cr>'
# shellcheck disable=2086
$edit_cmd -c "$start_rename" -c "$next_file" -c "$rename_all" $match_files
