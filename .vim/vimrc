" Settings                                                              {{{
" --------------------------------------------------------------------- {|}

set nocompatible
if has("autocmd")
    filetype plugin indent on
endif
if has("syntax") && !exists("syntax_on")
    syntax enable
endif

set number relativenumber linebreak backspace=indent,eol,start
set mouse=a ttymouse=sgr mousehide clipboard^=unnamed
set showmatch mat=1 ttyfast lazyredraw autoread confirm hidden
set ignorecase smartcase autoindent smartindent formatoptions+=l
set nomodeline nostartofline t_vb= nrformats-=octal cryptmethod=blowfish2
set tabstop=4 softtabstop=-1 shiftwidth=0 shiftround smarttab expandtab
set complete-=i wildmenu wildmode=list:longest,full completeopt=noselect,menuone,menuone
set laststatus=2 showtabline=2 display+=lastline
set splitbelow splitright scrolloff=8 sidescrolloff=8
set backupdir=$HOME/.vim/backups noswapfile
set sessionoptions-=options viewoptions-=options
set path-=/usr/include path+=src/** define= include=
set foldmethod=indent foldlevel=99 foldclose=all
set wildignore=*~,#*#,*.7z,.DS_Store,.git,.hg,.svn,
    \*.a,*.adf,*.asc,*.au,*.aup,*.avi,*.bin,*.bmp,*.bz2,
    \*.class,*.db,*.dbm,*.djvu,*.docx,*.exe,*.filepart,*.flac,*.gd2,
    \*.gif,*.gifv,*.gmo,*.gpg,*.gz,*.hdf,*.ico,*.iso,*.jar,*.jpeg,*.jpg,
    \*.m4a,*.mid,*.mp3,*.mp4,*.o,*.odp,*.ods,*.odt,*.ogg,*.ogv,*.opus,
    \*.pbm,*.pdf,*.png,*.ppt,*.psd,*.pyc,*.rar,*.rm
    \,*.s3m,*.sdbm,*.sqlite,*.swf,*.swp,*.tar,*.tga,*.ttf,*.wav,*.webm,
    \*.xbm,*.xcf,*.xls,*.xlsx,*.xpm,*.xz,*.zip,
    \*/node_modules/*,*/dist/*,*/build/*

" don't backup some system files for security
if v:version > 801 || v:version == 801 && has("patch1519")
    set backupskip&
endif
set backupskip+=/dev/shm/*,/usr/tmp/*,/var/tmp/*,*/systemd/user/*

if &ttimeoutlen == -1
    set ttimeout ttimeoutlen=100
endif

if has("extra_search")
    set hlsearch incsearch
endif

if has("multi_byte_encoding")
    set listchars+=extends:»,precedes:«,trail:·,eol:⮠
    set listchars+=multispace:┊\ ,nbsp:␣
    let &showbreak= "…  "
    set fillchars+=diff:╱
else
    let &showbreak= "... "
    set listchars+=extends:>,precedes:<
endif

if exists("+breakindent")
    set breakindent
endif

if has("syntax")
    set cursorline
    set colorcolumn=+2
endif

if exists("+wildignorecase")
    set wildignorecase
endif

if exists("+spelloptions")
    set spelloptions+=camel
endif

if has("cmdline_hist") && &history < 1000
    set history=1000
endif
if &tabpagemax < 50
    set tabpagemax=50
endif
if !empty(&viminfo)
    set viminfo^=!
endif

if has("virtualedit")
    set virtualedit+=block
endif

if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j
endif

if has("persistent_undo")
    set undodir=$HOME/.vim/undos
    set undofile
endif

" --------------------------------------------------------------------- }}}
" Keymaps                                                               {{{
" --------------------------------------------------------------------- {|}

let mapleader = " "

"" general keymaps                                            {{{
if isdirectory(expand("$HOME/dev/lib/fzf"))
    set runtimepath+=~/dev/lib/fzf
    nnoremap <leader>ff :FZF<CR>
    nnoremap <leader>fg :GFiles<CR>
    nnoremap <leader>fb :Buffers<CR>
endif

nnoremap <leader>u <cmd>packadd undotree<cr><cmd>UndotreeToggle<cr>

nnoremap - <cmd>packadd vifm.vim<cr><cmd>Vifm<cr>

nnoremap <leader>gg <cmd>packadd vim-fugitive<cr><cmd>G<cr>
nnoremap <leader>gc <cmd>packadd vim-fugitive<cr><cmd>G commit<cr>
nnoremap <leader>gb <cmd>packadd vim-fugitive<cr><cmd>G blame<cr>
nnoremap <leader>gd <cmd>packadd vim-fugitive<cr><cmd>Gdiffsplit<cr>
nnoremap <leader>gl <cmd>packadd vim-fugitive<cr><cmd>0Gclog --follow<cr>
xnoremap <leader>gl :Gclog --follow<cr>

nnoremap <leader>gD <cmd>packadd vim-fugitive<cr><cmd>G difftool -y<cr>
nnoremap <leader>gM <cmd>packadd vim-fugitive<cr><cmd>G mergetool -y<cr>

nnoremap <leader>gW <cmd>packadd vim-fugitive<cr><cmd>Gwrite<cr>
" nnoremap <leader>gW <cmd>packadd vim-fugitive<cr><cmd>Gwrite <bar> if &diff && tabpagenr('$') > 1 <bar> tabclose <bar> endif<cr>",
nnoremap <leader>gR <cmd>packadd vim-fugitive<cr><cmd>Gread<cr>
" nnoremap <leader>gR <cmd>packadd vim-fugitive<cr><cmd>Gread <bar> write <bar> if &diff && tabpagenr('$') > 1 <bar> tabclose <bar> endif<cr>

nnoremap Y y$
vnoremap Y y

nnoremap n nzzzv
nnoremap N Nzzzv

nnoremap <C-u> <C-u>zz
nnoremap <C-d> <C-d>zz

xnoremap g/ <esc>/\\%V
nnoremap go <cmd>call append(line('.'), repeat([''], v:count1))<cr>
nnoremap gO <cmd>call append(line('.') - 1, repeat([''], v:count1))<cr>
nnoremap <expr> <silent> gV "`[" . strpart(getregtype(), 0, 1) . "`]"

if empty(mapcheck("<C-U>", "i"))
  inoremap <C-U> <C-G>u<C-U>
endif
if empty(mapcheck("<C-W>", "i"))
  inoremap <C-W> <C-G>u<C-W>
endif

"" https://vi.stackexchange.com/a/213
" move down jumping over blank lines and indents
nnoremap <silent> gJ :let _=&lazyredraw<CR>
            \ :set lazyredraw<CR>/\%<C-R>=virtcol(".")
            \ <CR>v\S<CR>:nohl<CR>:let &lazyredraw=_<CR>
" move up jumping over blank lines and indents
nnoremap <silent> gK :let _=&lazyredraw<CR>
            \ :set lazyredraw<CR>?\%<C-R>=virtcol(".")
            \ <CR>v\S<CR>:nohl<CR>:let &lazyredraw=_<CR>

"" :W sudo saves the file
command! W execute "w !sudo tee % > /dev/null" <bar> edit!

nnoremap cd :<C-U>cd %:h <Bar> pwd<CR>

"" - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  }}}
"" misc input and terminal mode keymaps                       {{{
inoremap , ,<C-g>u
inoremap ? ?<C-g>u
inoremap . .<C-g>u
inoremap ; ;<C-g>u

tnoremap <leader><Esc> <C-\><C-n>
tnoremap <Esc><Esc> <C-\><C-n>
tnoremap <S-Space> <Space>
tnoremap <C-Space> <Space>

"" - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  }}}
"" git difftool/mergetool keymaps for selecting hunks         {{{
nnoremap <leader>gw :diffget<bar>diffupdate<cr>
vnoremap <leader>gw :diffget<bar>diffupdate<cr>
nnoremap <leader>gr :diffget
vnoremap <leader>gr :diffget

nnoremap <leader>gmu :diffupdate<cr>
nnoremap <leader>gmr :diffget RE <bar> diffupdate<cr>
nnoremap <leader>gmR :%diffget RE <bar> diffupdate<cr
nnoremap <leader>gmb :diffget BA <bar> diffupdate<cr>
nnoremap <leader>gmB :%diffget BA <bar> diffupdate<cr
nnoremap <leader>gml :diffget LO <bar> diffupdate<cr>
nnoremap <leader>gmL :%diffget LO <bar> diffupdate<cr>

"" - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  }}}
"" lists - next/prev                                          {{{
"" Argument list
nnoremap [a :previous<CR>
nnoremap ]a :next<CR>
nnoremap [A :last<CR>
nnoremap ]A :first<CR>
"" Buffer list
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
nnoremap [B :blast<CR>
nnoremap ]B :bfirst<CR>
"" Quickfix list
nnoremap [q :cprevious<CR>
nnoremap ]q :cnext<CR>
nnoremap [Q :clast<CR>
nnoremap ]Q :cfirst<CR>
"" Location list
nnoremap [l :lprevious<CR>
nnoremap ]l :lnext<CR>
nnoremap [L :llast<CR>
nnoremap ]L :lfirst<CR>
"" Tab list
nnoremap [t :tabprevious<CR>
nnoremap ]t :tabnext<CR>
nnoremap [T :tlast<CR>
nnoremap ]T :tfirst<CR>

"" - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  }}}
"" buffers, tabs, and windows                                 {{{

"" close all the buffers
nnoremap <leader>bda :bufdo bd<cr>
"" picks buffer
nnoremap <leader>bj :<C-U>buffers<CR>:buffer<Space>

"" Managing tabs
nnoremap <leader>tn :tabnew<cr>
nnoremap <leader>to :tabonly<cr>
nnoremap <leader>tc :tabclose<cr>

"" toggles between this and the last accessed tab
let s:last_tab = 1
nnoremap <leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let s:last_tab = tabpagenr()

" Navigate splits
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l

" Resize splits
nnoremap <Left> :vertical resize -5<CR>
nnoremap <Down> :resize -5<CR>
nnoremap <Up> :resize +5<CR>
nnoremap <Right> :vertical resize +5<CR>

"" - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  }}}
"" toggle options                                             {{{
"" toggles automatic indentation based on the previous line
nnoremap <leader>s<Tab> :<C-U>set autoindent! autoindent?<CR>
"" toggles highlighted cursor row; doesn't work in visual mode
nnoremap <leader>sx :<C-U>set cursorline! cursorline?<CR>
"" toggles highlighted cursor column; works in visual mode
noremap <leader>sy :<C-U>set cursorcolumn! cursorcolumn?<CR>
"" toggles highlighting search results
nnoremap <leader>sh :<C-U>set hlsearch! hlsearch?<CR>
"" toggles showing matches as I enter my pattern
nnoremap <leader>si :<C-U>set incsearch! incsearch?<CR>
"" toggles spell checking
nnoremap <leader>ss :<C-U>set spell! spell?<CR>
"" toggles paste
nnoremap <leader>sp :<C-U>set paste! paste?<CR>
"" toggles showing tab, end-of-line, and trailing white space
noremap <leader>sl :<C-U>set list! list?<CR>
"" toggles line number display
noremap <leader>sn :<C-U>set relativenumber! relativenumber?<CR>
"" toggles position display in bottom right
noremap <leader>sr :<C-U>set ruler! ruler?<CR>
"" toggles soft wrapping
noremap <leader>sw :<C-U>set wrap! wrap?<CR>
"" toggle modifiable
nnoremap <leader>sM :<C-U>set modifiable! modifiable?<CR>
"" toggle colorcolumn
nnoremap <silent> <leader>s\| :execute "set colorcolumn="
                  \ . (&colorcolumn == "" ? "80" : "")<CR>
"" toggle foldcolumn
nnoremap <silent> <leader>sf :execute "set foldcolumn="
                  \ . (&foldcolumn == "0" ? "1" : "0")<CR>
"" toggle system clipboard
nnoremap <silent> <leader>sc :execute "set clipboard="
                  \ . (&clipboardn == "umnamed" ? "unnamed,unnamedplus" : "unnamed")<CR>

"" - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  }}}

" --------------------------------------------------------------------- }}}
" Autocommands                                                          {{{
" --------------------------------------------------------------------- {|}

if has("autocmd")
    augroup jamin_vimrc
        autocmd!
        "" setup syntax complete for filetypes that don't have their own
        if exists("+omnifunc")
            autocmd Filetype *
              \	if &omnifunc == "" |
              \		setlocal omnifunc=syntaxcomplete#Complete |
              \	endif
        endif

        autocmd BufNew,BufEnter * let g:git_branch = g:GitBranch()

        "" automatically strip whitespaces when files are saved
        let excludedFileTypes = []
        autocmd BufWritePre * if index(excludedFileTypes, &ft) < 0 | :call StripTrailingWhitespace() | endif
    augroup END
endif

" --------------------------------------------------------------------- }}}
" Functions and user commands                                           {{{
" --------------------------------------------------------------------- {|}

command! Src :source $MYVIMRC

"" get the git branch for the current buffer                  {{{
function! GitBranch()
  let branch = systemlist("git -C " . shellescape(expand("%:p:h"),) . " branch --show-current")[0]
  return v:shell_error ? "" : branch
endfunction

"" - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  }}}
"" toggle the display of a terminal buffer                    {{{
let s:term_buf_nr = -1
function! s:TerminalToggle() abort
    if s:term_buf_nr == -1
        execute "botright terminal"
        let s:term_buf_nr = bufnr("$")
    else
        try
            execute "bdelete! " . s:term_buf_nr
        catch
            let s:term_buf_nr = -1
            call <SID>TerminalToggle()
            return
        endtry
        let s:term_buf_nr = -1
    endif
endfunction

command! TerminalToggle call <sid>TerminalToggle()
nnoremap <silent> <leader>T <cmd>TerminalToggle<cr>
tnoremap <silent> <leader>T <C-w>N:TerminalToggle<cr>

"" - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  }}}
"" strip trailing white space from the end of lines           {{{
function! StripTrailingWhitespace()
    let save_cursor = getpos(".")
    let old_query = getreg("/")
    silent! %s/\s\+$//e
    call setpos(".", save_cursor)
    call setreg("/", old_query)
endfunction

"" - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  }}}

" --------------------------------------------------------------------- }}}
" Statusline                                                            {{{
" --------------------------------------------------------------------- {|}

let g:git_branch="" " gets set in an autocmd above
function! DisplayGitBranch()
    return g:git_branch != "" ? "   " .. g:git_branch .. "  " : ""
endfunction

set statusline=%#TabLineSel#                    " TabLineSel highlight
set statusline+=\ \                             " Whitespace
set statusline+=[%n]                            " Buffer number
set statusline+=%m                              " Modified flag
set statusline+=%r                              " Readonly flag
set statusline+=%h                              " Help file flag
set statusline+=%w                              " Preview window flag
set statusline+=%q                              " Quickfix/location list flag
set statusline+=%y                              " File type
set statusline+=\ \                             " Whitespace
set statusline+=%#TabLine#                      " TabLine highlight
set statusline+=%{g:DisplayGitBranch()}         " Git branch name
set statusline+=%#TabLineFill#                  " TabLineFill highlight
set statusline+=%=                              " Left/Right separator
set statusline+=\ \                             " Whitespace
set statusline+=%#TabLine#                      " TabLine highlight
set statusline+=\ \                             " Whitespace
set statusline+=%f                              " File name
set statusline+=\ \                             " Whitespace
set statusline+=%#TabLineSel#                   " TabLineSel highlight
set statusline+=\ \                             " Whitespace
set statusline+=%c:[%l/%L]                      " cursor:line/total_lines
set statusline+=\ \                             " Whitespace

"----------------------------------------------------------------------}}}
"  Terminal options                                                    {{{
"----------------------------------------------------------------------{|}

" :help terminal-output-codes

" Fix modern terminal features
" https://sw.kovidgoyal.net/kitty/faq/#using-a-color-theme-with-a-background-color-does-not-work-well-in-vim
if !has('gui_running') && &term =~ '^\%(screen\|tmux\|xterm\)'
    " Styled and colored underline support
    let &t_AU = "\e[58:5:%dm"
    let &t_8u = "\e[58:2:%lu:%lu:%lum"
    let &t_Us = "\e[4:2m"
    let &t_Cs = "\e[4:3m"
    let &t_ds = "\e[4:4m"
    let &t_Ds = "\e[4:5m"
    let &t_Ce = "\e[4:0m"

    " Strikethrough
    let &t_Ts = "\e[9m"
    let &t_Te = "\e[29m"

    " Enable true colors, see  :help xterm-true-color
    let &t_8f = "\e[38:2:%lu:%lu:%lum"
    let &t_8b = "\e[48:2:%lu:%lu:%lum"
    let &t_RF = "\e]10;?\e\\"
    let &t_RB = "\e]11;?\e\\"

    " Enable bracketed paste mode, see  :help xterm-bracketed-paste
    let &t_BE = "\e[?2004h"
    let &t_BD = "\e[?2004l"
    let &t_PS = "\e[200~"
    let &t_PE = "\e[201~"

    " Cursor control
    let &t_RC = "\e[?12$p"
    let &t_SH = "\e[%d q"
    let &t_RS = "\eP$q q\e\\"
    let &t_SI = "\e[5 q"
    let &t_SR = "\e[3 q"
    " let &t_EI = "\e[1 q"
    let &t_VS = "\e[?12l"

    " Enable focus event tracking, see  :help xterm-focus-event
    let &t_fe = "\e[?1004h"
    let &t_fd = "\e[?1004l"
    execute "set <FocusGained>=\e[I"
    execute "set <FocusLost>=\e[O"

    " Window title
    let &t_ST = "\e[22;2t"
    let &t_RT = "\e[23;2t"
    " change insert mode cursor from block to blinking line
    let &t_SI = "\e[6 q"
    let &t_SR = "\e[4 q"
    let &t_EI = "\e[2 q"

    " Enable modified arrow keys, see  :help arrow_modifiers
    execute "silent! set <xUp>=\e[@;*A"
    execute "silent! set <xDown>=\e[@;*B"
    execute "silent! set <xRight>=\e[@;*C"
    execute "silent! set <xLeft>=\e[@;*D"

    " vim hardcodes background color erase even if the terminfo file does
    " not contain bce. This causes incorrect background rendering when
    " using a color theme with a background color in terminals such as
    " kitty that do not support background color erase.
    let &t_ut=""

endif

" --------------------------------------------------------------------- }}}
" Colorscheme                                                           {{{
" --------------------------------------------------------------------- {|}

set background=dark
set t_Co=256
if exists("+termguicolors")
    set termguicolors
endif

function! s:gruvbox_material_custom() abort
    let s:palette = gruvbox_material#get_palette("soft", "material", {
                \"bg_orange": ["#5A3B0A", "130"],
                \ "bg_visual_yellow": ["#7a380b", "208"]
                \ })

    call gruvbox_material#highlight("DiffDelete", s:palette.bg5, s:palette.bg_diff_red)
    call gruvbox_material#highlight("DiffChange", s:palette.none, s:palette.bg_orange)
    call gruvbox_material#highlight("DiffText", s:palette.fg0, s:palette.bg_visual_yellow)
    highlight! link CursorLineNr Purple
endfunction

augroup GruvboxMaterialCustom
    autocmd!
    autocmd ColorScheme gruvbox-material call s:gruvbox_material_custom()
augroup END

let g:gruvbox_material_background = "soft"
let g:gruvbox_material_foreground = "original"
let g:gruvbox_material_ui_contrast = "high"
let g:gruvbox_material_statusline_style = "material"
let g:gruvbox_material_diagnostic_virtual_text = "colored"
" let g:gruvbox_material_spell_foreground = "colored"
" let g:gruvbox_material_sign_column_background = "grey"
" let g:gruvbox_material_menu_selection_background = "orange"
" let g:gruvbox_material_current_word = "bold"
" let g:gruvbox_material_visual = "reverse"

let g:gruvbox_material_better_performance = 1
let g:gruvbox_material_diagnostic_text_highlight = 0
let g:gruvbox_material_transparent_background = 1
let g:gruvbox_material_disable_italic_comment = 1
" let g:gruvbox_material_enable_italic = 1
" let g:gruvbox_material_enable_bold = 1
" let g:gruvbox_material_disable_terminal_colors = 1
" let g:gruvbox_material_dim_inactive_windows = 1

packadd! gruvbox-material
colorscheme gruvbox-material

"----------------------------------------------------------------------}}}
