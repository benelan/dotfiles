" Ben Elan's VIMRC
" ----------------------------------------------------------------------
" | General Settings                                                   |
" ----------------------------------------------------------------------

set nocompatible
if has("autocmd")
    filetype plugin indent on
endif
if has("syntax") && !exists("syntax_on")
    syntax enable
endif

set omnifunc=syntaxcomplete#Complete completefunc=syntaxcomplete#Complete
set number relativenumber linebreak backspace=indent,eol,start
set mouse=a ttymouse=sgr mousehide clipboard^=unnamed,unnamedplus
set showmatch mat=1 ttyfast lazyredraw autoread confirm hidden
set ignorecase smartcase autoindent smartindent formatoptions+=l
set nomodeline nostartofline t_vb= nrformats-=octal
set tabstop=4 softtabstop=-1 shiftwidth=4 shiftround smarttab expandtab
set complete-=i wildmenu wildmode=list:longest,full
set laststatus=2 showtabline=2 display+=lastline
set splitbelow splitright scrolloff=8 sidescrolloff=8
set backupdir=$HOME/.vim/backups noswapfile
set sessionoptions-=options viewoptions-=options
set path-=/usr/include define= include=
set foldmethod=indent foldlevel=99 foldclose=all
set wildignore=*~,#*#,*.7z,.DS_Store,.git,.hg,.svn,
    \*.a,*.adf,*.asc,*.au,*.aup,*.avi,*.bin,*.bmp,*.bz2,
    \*.class,*.db,*.dbm,*.djvu,*.docx,*.exe,*.filepart,*.flac,*.gd2,
    \*.gif,*.gifv,*.gmo,*.gpg,*.gz,*.hdf,*.ico,*.iso,*.jar,*.jpeg,*.jpg,
    \*.m4a,*.mid,*.mp3,*.mp4,*.o,*.odp,*.ods,*.odt,*.ogg,*.ogv,*.opus,
    \*.pbm,*.pdf,*.png,*.ppt,*.psd,*.pyc,*.rar,*.rm
    \,*.s3m,*.sdbm,*.sqlite,*.swf,*.swp,*.tar,*.tga,*.ttf,*.wav,*.webm,
    \*.xbm,*.xcf,*.xls,*.xlsx,*.xpm,*.xz,*.zip,
    \*/node_modules/*,*/dist/*,*/build/*,*/public/*

" don't backup some system files for security
if v:version > 801 || v:version == 801 && has("patch1519")
    set backupskip&
endif
set backupskip+=/dev/shm/*,/usr/tmp/*,/var/tmp/*,*/systemd/user/*

if &ttimeoutlen == -1
    set ttimeout ttimeoutlen=100
endif

if has("extra_search")
    set hlsearch incsearch
endif

if has("multi_byte_encoding")
    set listchars+=extends:»,precedes:«
    let &showbreak= "…  "
else
    let &showbreak= "... "
    set listchars+=extends:>,precedes:<
endif

if exists("+breakindent")
    set breakindent
endif

if has("syntax")
    set cursorline
    set colorcolumn=+2
endif

if exists("+wildignorecase")
    set wildignorecase
endif

if exists("+spelloptions")
    set spelloptions+=camel
endif

if has("cmdline_hist") && &history < 1000
    set history=1000
endif
if &tabpagemax < 50
    set tabpagemax=50
endif
if !empty(&viminfo)
    set viminfo^=!
endif

if has("virtualedit")
    set virtualedit+=block
endif

if !exists("loaded_matchit")
  if findfile("plugin/matchit.vim", &rtp) ==# ""
    runtime! macros/matchit.vim
  elseif finddir("pack/dist/opt/matchit", &rtp) != ""
    packadd matchit
  endif
endif

if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j
endif

if has("persistent_undo")
    set undodir=$HOME/.vim/undos
    set undofile
endif

" ----------------------------------------------------------------------
" | Key Mappings                                                       |
" ----------------------------------------------------------------------

let mapleader = " "

if isdirectory(expand("$HOME/dev/lib/fzf"))
    set runtimepath+=~/dev/lib/fzf
    nnoremap <leader>ff :FZF<CR>
    vnoremap <leader>ff :FZF<CR>
    nnoremap <leader>fg :GFiles<CR>
    vnoremap <leader>fg :GFiles<CR>
    nnoremap <leader>fb :Buffers<CR>
    vnoremap <leader>fb :Buffers<CR>
endif

inoremap jk <esc>
nnoremap Y y$

nnoremap n nzzzv
nnoremap N Nzzzv

inoremap , ,<C-g>u
inoremap ? ?<C-g>u
inoremap . .<C-g>u
inoremap ; ;<C-g>u

nnoremap <leader>d "_d
vnoremap <leader>d "_d
nnoremap <leader>c "_c
vnoremap <leader>c "_c
nnoremap <leader>y "+y
vnoremap <leader>y "+y

if empty(mapcheck("<C-U>", "i"))
  inoremap <C-U> <C-G>u<C-U>
endif
if empty(mapcheck("<C-W>", "i"))
  inoremap <C-W> <C-G>u<C-W>
endif

"" :W sudo saves the file
command! W execute "w !sudo tee % > /dev/null" <bar> edit!

"" Argument list
nnoremap [a :previous<CR>
nnoremap ]a :next<CR>
"" Buffer list
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
"" Quickfix list
nnoremap [q :cprevious<CR>
nnoremap ]q :cnext<CR>
"" Location list
nnoremap [l :lprevious<CR>
nnoremap ]l :lnext<CR>
"" Tab list
nnoremap [t :tabprevious<CR>
nnoremap ]t :tabnext<CR>
"" Jump list
nnoremap [j <C-i>
nnoremap ]j <C-o>

"" Selecting hunks when using vimdiff as mergetool
nnoremap <leader>gmU :diffupdate<cr>
nnoremap <leader>gmr :diffget RE<cr>
nnoremap <leader>gmR :%diffget RE<cr
nnoremap <leader>gmb :diffget BA<cr>
nnoremap <leader>gmB :%diffget BA<cr
nnoremap <leader>gml :diffget LO<cr>
nnoremap <leader>gmL :diffget LO<cr>

"" close all the buffers
nnoremap <leader>bda :bufdo bd<cr>
"" picks buffer
nnoremap <leader>bj :<C-U>buffers<CR>:buffer<Space>

"" Quickly open scratch buffers
nnoremap <leader>bb :e ~/scratch.md<cr>
nnoremap <leader>bv <C-w>v:e %:h/scratch.%:e<CR>
nnoremap <leader>bs <C-w>s:e %:h/scratch.%:e<CR>

"" Managing tabs
nnoremap <leader>tn :tabnew<cr>
nnoremap <leader>to :tabonly<cr>
nnoremap <leader>tc :tabclose<cr>

"" Opens a new tab with the current buffer's path
nnoremap <leader>te :tabedit <C-r>=expand("%:p:h")<cr>/

"" toggles between this and the last accessed tab
let s:last_tab = 1
nnoremap <leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let s:last_tab = tabpagenr()

" Save buffers
nnoremap <leader>w :w<cr>
inoremap <C-S> :write<cr><esc>

" Create splits
nnoremap <leader>- :split<cr>
nnoremap <leader>\ :vsplit<cr>

" Navigate splits
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l
nnoremap <leader>o <C-w>o

" Move splits
nnoremap <leader><Left> <C-W>H
nnoremap <leader><Down> <C-W>J
nnoremap <leader><Up> <C-W>K
nnoremap <leader><Right> <C-W>L

" Resize splits
nnoremap <leader><leader>k :resize +5<CR>
nnoremap <leader><leader>j :resize -5<CR>
nnoremap <leader><leader>l :vertical resize +5<CR>
nnoremap <leader><leader>h :vertical resize -5<CR>

"" toggles automatic indentation based on the previous line
nnoremap <leader>s<Tab> :<C-U>set autoindent! autoindent?<CR>
"" toggles highlighted cursor row; doesn't work in visual mode
nnoremap <leader>sx :<C-U>set cursorline! cursorline?<CR>
"" toggles highlighting search results
nnoremap <leader>sh :<C-U>set hlsearch! hlsearch?<CR>
"" toggles showing matches as I enter my pattern
nnoremap <leader>si :<C-U>set incsearch! incsearch?<CR>
"" toggles spell checking
nnoremap <leader>ss :<C-U>set spell! spell?<CR>
"" toggles paste
nnoremap <leader>sp :<C-U>set paste! paste?<CR>
"" toggle colorcolumn
nnoremap <silent> <leader>sc :execute "set colorcolumn="
                  \ . (&colorcolumn == "" ? "80" : "")<CR>

"" toggles highlighted cursor column; works in visual mode
noremap <leader>sy :<C-U>set cursorcolumn! cursorcolumn?<CR>
ounmap <leader>sy
sunmap <leader>sy
"" toggles showing tab, end-of-line, and trailing white space
noremap <leader>sl :<C-U>set list! list?<CR>
ounmap <leader>sl
sunmap <leader>sl
"" toggles line number display
noremap <leader>sn :<C-U>set relativenumber! relativenumber?<CR>
ounmap <leader>sn
sunmap <leader>sn
"" toggles position display in bottom right
noremap <leader>sr :<C-U>set ruler! ruler?<CR>
ounmap <leader>sr
sunmap <leader>sr
"" toggles soft wrapping
noremap <leader>sw :<C-U>set wrap! wrap?<CR>
ounmap <leader>sw
sunmap <leader>sw

nnoremap cd :<C-U>cd %:h <Bar> pwd<CR>

" start ex command for vimgrep
nnoremap <leader>eg :<C-U>vimgrep /\c/j **<S-Left><S-Left><Right>
"" start ex command for lhelpgrep
nnoremap <leader>eh :<C-U>lhelpgrep \c<S-Left>
"" replace word under cursor in whole buffer
nnoremap <leader>es :%s/\<<C-r><C-w>\>//gI<Left><Left><Left>
"" Search and replace the word under the cursor
nnoremap <leader>en :g//#<Left><Left>


tnoremap <leader><Esc> <C-\><C-n>
tnoremap <Esc><Esc> <C-\><C-n>
tnoremap <S-Space> <Space>
tnoremap <C-Space> <Space>

" ----------------------------------------------------------------------
" | Autocommands                                                       |
" ----------------------------------------------------------------------

if has("autocmd")
    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    " Misc autocmds
    augroup vimrc
        autocmd!
        " Automatically reload .vimrc
        autocmd BufWritePost $MYVIMRC Src
        if exists("##SourceCmd")
          autocmd  SourceCmd $MYVIMRC Src
        endif

    augroup END
    command! Src :source $MYVIMRC

    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    " Set up linting
    augroup linting
        autocmd!
        autocmd FileType python compiler pylint
        " autocmd BufWritePost *.py silent make! <afile> | silent redraw!
        autocmd FileType bash,sh compiler shellcheck
        " autocmd BufWritePost *.bash,*.sh silent make! <afile> | silent redraw!
        autocmd FileType javascript,typescript,javascriptreact,typescriptreact
              \ compiler eslint | set formatprg=npx\ prettier\ --\ --stdin-filepath\ %
        " autocmd BufWritePost *.js,*.ts,*.tsx,*.jsx silent make! <afile> | silent redraw!

        autocmd QuickFixCmdPost [^l]* cwindow
    augroup END

    command! Lint silent make % | silent redraw!

    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    " Automatically strip whitespaces when files are saved.
    augroup strip_whitespaces
        let excludedFileTypes = []
        autocmd!
        autocmd BufWritePre * if index(excludedFileTypes, &ft) < 0 | :call StripTrailingWhitespace() | endif
    augroup END

    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
endif

" ----------------------------------------------------------------------
" | Helper Functions                                                   |
" ----------------------------------------------------------------------

let s:term_buf_nr = -1
function! s:ToggleTerminal() abort
    if s:term_buf_nr == -1
        execute "botright terminal"
        let s:term_buf_nr = bufnr("$")
    else
        try
            execute "bdelete! " . s:term_buf_nr
        catch
            let s:term_buf_nr = -1
            call <SID>ToggleTerminal()
            return
        endtry
        let s:term_buf_nr = -1
    endif
endfunction

nnoremap <silent> <leader>T :call <SID>ToggleTerminal()<CR>
tnoremap <silent> <leader>T <C-w>N:call <SID>ToggleTerminal()<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function! StripTrailingWhitespace()
    let save_cursor = getpos(".")
    let old_query = getreg("/")
    silent! %s/\s\+$//e
    call setpos(".", save_cursor)
    call setreg("/", old_query)
endfunction

" ----------------------------------------------------------------------
" | Statusline                                                         |
" ----------------------------------------------------------------------

function! FugitiveGitBranch()
  if exists("g:loaded_fugitive") && FugitiveGitDir() != expand("~") .. "/.git"
    let head = fugitive#Head()
    return head != "" ? "   " .. head .. "  " : ""
  endif
  return ""
endfunction

set statusline=%#TabLineSel#                    " TabLineSel highlight
set statusline+=\ \                             " Whitespace
set statusline+=[%n]                            " Buffer number
set statusline+=%m                              " Modified flag
set statusline+=%r                              " Readonly flag
set statusline+=%h                              " Help file flag
set statusline+=%w                              " Preview window flag
set statusline+=%q                              " Quickfix/location list flag
set statusline+=%y                              " File type
set statusline+=\ \                             " Whitespace
set statusline+=%#TabLine#                      " TabLine highlight
set statusline+=%{g:FugitiveGitBranch()}        " Git branch name
set statusline+=%#TabLineFill#                  " TabLineFill highlight
set statusline+=%=                              " Left/Right separator
set statusline+=\ \                             " Whitespace
set statusline+=%#TabLine#                      " TabLine highlight
set statusline+=\ \                             " Whitespace
set statusline+=%f                              " File name
set statusline+=\ \                             " Whitespace
set statusline+=%#TabLineSel#                   " TabLineSel highlight
set statusline+=\ \                             " Whitespace
set statusline+=%c:[%l/%L]                      " cursor:line/total_lines
set statusline+=\ \                             " Whitespace
