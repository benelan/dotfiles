" Settings {{{1
set nocompatible
if has("autocmd")
    filetype plugin indent on
endif

if has("syntax") && !exists("syntax_on")
    syntax enable
endif

set number relativenumber linebreak backspace=indent,eol,start
set mouse= clipboard=unnamed ttyfast lazyredraw autoread confirm hidden
set ignorecase smartcase autoindent smartindent formatoptions+=l
set nomodeline nostartofline t_vb= nrformats-=octal nrformats+=unsigned
set softtabstop=4 shiftwidth=4 shiftround smarttab expandtab
set wildmenu wildmode=list:longest,full
set complete-=i completeopt=noselect,menuone,menuone
set laststatus=2 showtabline=2 display+=lastline
set splitbelow splitright scrolloff=8 sidescrolloff=8
set sessionoptions-=options viewoptions-=options
set path-=/usr/include path+=** define= include=
set wildignore=*~,#*#,*.7z,.DS_Store,.git,.hg,.svn,
    \*.a,*.adf,*.asc,*.au,*.aup,*.avi,*.bin,*.bmp,*.bz2,*.class,*.db,*.dbm,
    \*.djvu,*.docx,*.exe,*.filepart,*.flac,*.gd2,*.gif,*.gifv,*.gmo,*.gpg,*.gz,
    \*.hdf,*.ico,*.iso,*.jar,*.jpeg,*.jpg,*.m4a,*.mid,*.mp3,*.mp4,*.o,*.odp,
    \*.ods,*.odt,*.ogg,*.ogv,*.opus,*.pbm,*.pdf,*.png,*.ppt,*.psd,*.pyc,*.rar,
    \*.rm,*.s3m,*.sdbm,*.sqlite,*.swf,*.swp,*.tar,*.tga,*.ttf,*.wav,*.webm,
    \*.xbm,*.xcf,*.xls,*.xlsx,*.xpm,*.xz,*.zip,*/node_modules/*,*/dist/*,*/build/*

if filereadable("/usr/share/dict/words")
    set dictionary=/usr/share/dict/words
else
    set dictionary=spell
endif

if has("persistent_undo") && exists("+undofile")
    set undofile
    set undodir=$HOME/.vim/undos
    if ! isdirectory(&undodir)
        :silent !mkdir -p $HOME/.vim/undos > /dev/null 2>&1
    endif
endif

if &swapfile
    set directory=$HOME/.vim/swaps
    if ! isdirectory(&directory)
        :silent !mkdir -p $HOME/.vim/swaps > /dev/null 2>&1
    endif
endif

if &backup || has("writebackup") && &writebackup
    set backupdir=$HOME/.vim/backups
    if ! isdirectory(&backupdir)
        :silent !mkdir -p $HOME/.vim/backups > /dev/null 2>&1
    endif
endif

" don't backup some system files for security
if v:version > 801 || v:version == 801 && has("patch1519")
    set backupskip&
    set backupskip+=/dev/shm/*,/usr/tmp/*,/var/tmp/*,*/systemd/user/*
endif

if has("folding")
    set foldmethod=indent foldlevel=99 foldclose=all
endif

if &ttimeoutlen == -1
    set ttimeout ttimeoutlen=100
endif

if has("extra_search")
    set hlsearch incsearch
endif

if has("multi_byte_encoding")
    set listchars+=extends:»,precedes:«
    set listchars+=multispace:·\ ,trail:·
    " set listchars+=nbsp:␣,eol:⮠
    let &showbreak= "…  "
    set fillchars+=diff:╱
else
    set listchars+=extends:>,precedes:<
    let &showbreak= "... "
endif

if exists("+breakindent")
    set breakindent
endif

if has("syntax")
    set cursorline
    set colorcolumn=+2
endif

if exists("+wildignorecase")
    set wildignorecase
endif

if has("spell")
    set spelllang=en_US
    set spellfile=~/.config/nvim/spell/en.utf-8.add
    let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'
    if exists("+spelloptions")
        set spelloptions+=camel
    endif
endif

if has("cmdline_hist") && &history < 1000
    set history=1000
endif

if &tabpagemax < 50
    set tabpagemax=50
endif

if !empty(&viminfo)
    set viminfo^=!
endif

if has("virtualedit")
    set virtualedit+=block
endif

if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j
endif

" Better indention/ hierarchy
set formatlistpat=^\\s*                    " Optional leading whitespace
set formatlistpat+=[                       " Start class
set formatlistpat+=\\[({]\\?               " |  Optionally match opening punctuation
set formatlistpat+=\\(                     " |  Start group
set formatlistpat+=[0-9]\\+                " |  |  A number
set formatlistpat+=\\\|[iIvVxXlLcCdDmM]\\+ " |  |  Roman numerals
set formatlistpat+=\\\|[a-zA-Z]            " |  |  A single letter
set formatlistpat+=\\)                     " |  End group
set formatlistpat+=[\\]:.)}                " |  Closing punctuation
set formatlistpat+=]                       " End class
set formatlistpat+=\\s\\+                  " One or more spaces
set formatlistpat+=\\\|^\\s*[-–+o*•]\\s\\+ " Or bullet points

" Keymaps {{{1
if has("keymap")
    let mapleader = " "
    let maplocalleader = "\\"

    "" general keymaps {{{2
    nnoremap Y y$
    vnoremap Y y

    nnoremap n nzzzv
    nnoremap N Nzzzv

    nnoremap <C-u> <C-u>zz
    nnoremap <C-d> <C-d>zz

    "" move line(s) up and down
    nnoremap <Down> <CMD>m .+1<CR>==
    nnoremap <Up> <CMD>m .-2<CR>==
    inoremap <Down> <esc><CMD>m .+1<CR>==gi
    inoremap <Up> <esc><CMD>m .-2<CR>==gi
    vnoremap <Down> :m '>+1<CR>gv=gv
    vnoremap <Up> :m '<-2<CR>gv=gv

    nnoremap ]<space> <CMD>call append(line('.'), repeat([''], v:count1))<CR>
    nnoremap [<space> <CMD>call append(line('.') - 1, repeat([''], v:count1))<CR>

    nnoremap <expr> <silent> gV "`[" . strpart(getregtype(), 0, 1) . "`]"

    "" https://vi.stackexchange.com/a/213
    "" move down jumping over blank lines and indents
    nnoremap <silent> gJ :let _=&lazyredraw<CR>
        \ :set lazyredraw<CR>/\%<C-R>=virtcol(".")
        \ <CR>v\S<CR>:nohl<CR>:let &lazyredraw=_<CR>

    "" move up jumping over blank lines and indents
    nnoremap <silent> gK :let _=&lazyredraw<CR>
        \ :set lazyredraw<CR>?\%<C-R>=virtcol(".")
        \ <CR>v\S<CR>:nohl<CR>:let &lazyredraw=_<CR>

    nnoremap cd :<C-U>cd %:h <Bar> pwd<CR>

    "" misc insert/terminal/command mode keymaps {{{2
    inoremap <C-U> <C-G>u<C-U>
    inoremap <C-W> <C-G>u<C-W>

    inoremap , ,<C-g>u
    inoremap ? ?<C-g>u
    inoremap . .<C-g>u
    inoremap ; ;<C-g>u

    tnoremap <leader><Esc> <C-\><C-n>
    tnoremap <Esc><Esc> <C-\><C-n>
    tnoremap <S-Space> <Space>
    tnoremap <C-Space> <Space>

    "" git difftool/mergetool keymaps for selecting hunks {{{2
    nnoremap <leader>gr :diffget<BAR>diffupdate<CR>
    vnoremap <leader>gr :diffget<BAR>diffupdate<CR>
    nnoremap <leader>gw :diffput<CR>
    vnoremap <leader>gw :diffput<CR>

    nnoremap <localleader>x :diffget BA<BAR>diffupdate<CR>
    nnoremap <localleader>X :%diffget BA<BAR>diffupdate<CR>

    "" LOCAL is the left buffer when using vimdiff
    nnoremap [x :diffget LO<BAR>diffupdate<CR>
    nnoremap [X :%diffget LO<BAR>diffupdate<CR>

    "" REMOTE is the rightmost buffer
    nnoremap ]x :diffget RE<BAR>diffupdate<CR>
    nnoremap ]X :%diffget RE<BAR>diffupdate<CR>

    "" lists - next/prev {{{2
    "" Argument list
    nnoremap [a :previous<CR>
    nnoremap ]a :next<CR>
    nnoremap [A :last<CR>
    nnoremap ]A :first<CR>

    "" Buffer list
    nnoremap [b :bprevious<CR>
    nnoremap ]b :bnext<CR>
    nnoremap [B :blast<CR>
    nnoremap ]B :bfirst<CR>

    "" Quickfix list
    nnoremap [q :cprevious<CR>
    nnoremap ]q :cnext<CR>
    nnoremap [Q :clast<CR>
    nnoremap ]Q :cfirst<CR>

    "" Location list
    nnoremap [l :lprevious<CR>
    nnoremap ]l :lnext<CR>
    nnoremap [L :llast<CR>
    nnoremap ]L :lfirst<CR>

    "" Tab list
    nnoremap [t :tabprevious<CR>
    nnoremap ]t :tabnext<CR>
    nnoremap [T :tlast<CR>
    nnoremap ]T :tfirst<CR>

    "" buffers, tabs, and windows {{{2
    "" close buffer
    nnoremap <leader><Delete> :bdelete<CR>

    "" picks buffer
    nnoremap <leader>bj :<C-U>buffers<CR>:buffer<Space>

    "" Managing tabs
    nnoremap <leader>tn :tabnew<CR>
    nnoremap <leader>to :tabonly<CR>
    nnoremap <leader>tc :tabclose<CR>

    "" Navigate splits
    nnoremap <C-h> <C-W>h
    nnoremap <C-j> <C-W>j
    nnoremap <C-k> <C-W>k
    nnoremap <C-l> <C-W>l

    "" Resize splits
    nnoremap <C-Left> :vertical resize -5<CR>
    nnoremap <C-Down> :resize -5<CR>
    nnoremap <C-Up> :resize +5<CR>
    nnoremap <C-Right> :vertical resize +5<CR>

    "" toggle options {{{2
    nnoremap <leader>sl <CMD>set list!<CR><CMD>set list?<CR>
    nnoremap <leader>sn <CMD>set relativenumber!<CR><CMD>set relativenumber?<CR>
    nnoremap <leader>ss <CMD>set spell!<CR><CMD>set spell?<CR>
    nnoremap <leader>sw <CMD>set wrap!<CR><CMD>set wrap?<CR>
    nnoremap <leader>sx <CMD>set cursorline!<CR><CMD>set cursorline?<CR>
    nnoremap <leader>sy <CMD>set cursorcolumn!<CR><CMD>set cursorcolumn?<CR>

    nnoremap <silent> <leader>s\| <CMD>execute "set colorcolumn="
            \ . (&colorcolumn == "" ? "79" : "")<CR>

    nnoremap <silent> <leader>sc <CMD>execute "set conceallevel="
                \ . (&conceallevel == "0" ? "2" : "0")<CR>

    nnoremap <silent> <leader>sY <CMD>execute "set clipboard="
            \ . (&clipboard == "unnamed"
                \ ? "unnamed,unnamedplus"
                \ : "unnamed")<CR><CMD>set clipboard?<CR>

    "" plugins {{{2
    if isdirectory(expand("$HOME/dev/lib/fzf"))
        set runtimepath+=~/dev/lib/fzf
        nnoremap <C-p> :Files<CR>
        nnoremap <C-g> :GFiles<CR>
        nnoremap <leader>ff :Files<CR>
        nnoremap <leader>fg :GFiles<CR>
        nnoremap <leader>fb :Buffers<CR>
        nnoremap <leader>fd :LS<CR>
    endif

    nnoremap <leader>u <CMD>packadd undotree<CR><CMD>UndotreeToggle<CR>

    nnoremap - <CMD>packadd vifm.vim<CR><CMD>Vifm<CR>

    nnoremap <leader>gs <CMD>packadd vim-fugitive<CR><CMD>tab G<CR>
    nnoremap <leader>gc <CMD>packadd vim-fugitive<CR><CMD>tab G commit<CR>
    nnoremap <leader>gb <CMD>packadd vim-fugitive<CR><CMD>G blame<CR>
    nnoremap <leader>gd <CMD>packadd vim-fugitive<CR><CMD>Gvdiffsplit<CR>
    nnoremap <leader>gl <CMD>packadd vim-fugitive<CR><CMD>0Gclog --follow<CR>
    xnoremap <leader>gl :Gclog<CR>

    nnoremap <leader>gD <CMD>packadd vim-fugitive<CR><CMD>G difftool -y<CR>
    nnoremap <leader>gM <CMD>packadd vim-fugitive<CR><CMD>G mergetool -y<CR>
    nnoremap <leader>gW <CMD>packadd vim-fugitive<CR><CMD>Gwrite<CR>
    nnoremap <leader>gR <CMD>packadd vim-fugitive<CR><CMD>Gread<CR>

    nnoremap <leader>go <CMD>packadd vim-fugitive<BAR>packadd vim-rhubarb<CR><CMD>GBrowse<CR>
    vnoremap <leader>go <CMD>packadd vim-fugitive<BAR>packadd vim-rhubarb<CR><CMD>GBrowse<CR>
    nnoremap <leader>gy <CMD>packadd vim-fugitive<BAR>packadd vim-rhubarb<CR><CMD>GBrowse!<CR>
    vnoremap <leader>gy <CMD>packadd vim-fugitive<BAR>packadd vim-rhubarb<CR><CMD>GBrowse!<CR>
endif

" Autocommands {{{1
if has("autocmd")
    augroup jamin_vimrc
        autocmd!
        autocmd BufNew,BufEnter * let g:git_branch = g:GitBranch()
        autocmd InsertEnter,WinLeave * setlocal nocursorline

        autocmd FileType {java,type}script{,react},vue,svelte,astro
            \ setlocal keywordprg=sh\ -c\ 'o\ https://devdocs.io/\\#q=\$1\ '\ --

        if executable("dict")
            autocmd FileType markdown,text,gitcommit setlocal keywordprg=dict
        endif

        autocmd InsertLeave,WinEnter *
                \ if !exists("b:no_cursorline") || !b:no_cursorline
                \ |   setlocal cursorline
                \ | endif
    augroup END
endif


" Functions and user commands {{{1
if has("eval")
    "" :W sudo saves the file
    command! W execute "w !sudo tee % > /dev/null" <bar> edit!

    "" get the git branch for the current buffer {{{2
    function! GitBranch()
        try
            if exists("*fugitive#Head") && FugitiveGitDir() != expand("~")."/.git"
                return fugitive#Head()
            else
                let branch = systemlist("git -C " .
                    \ shellescape(expand("%:p:h")) . " branch --show-current"
                \)[0]

                return v:shell_error ? "" : branch
            endif
        catch
            return ""
        endtry
    endfunction

    "" toggle quickfix/location lists open/close {{{2
    com! QfToggle exe "if empty(filter(getwininfo(), 'v:val.quickfix'))|cope|else|ccl|lcl|endif|norm <C-W><C-W>"
    nnoremap <leader>q <CMD>QfToggle<CR>

    com! LlToggle exe "if empty(filter(getwininfo(), 'v:val.quickfix'))|lope|else|lcl|ccl|endif|norm <C-W><C-W>"
    nnoremap <leader>l <CMD>LlToggle<CR>

    "" fzf user commands {{{2
    if isdirectory(expand("$LIB/fzf")) && executable("fzf")
        " Enable per-command history
        " - When set, CTRL-N and CTRL-P will be bound to "next-history" and
        "   "previous-history" instead of "down" and "up".
        let g:fzf_history_dir = "~/.dotfiles/cache/fzf-history"

        " An action can be a reference to a function that processes selected lines
        function! s:build_quickfix_list(lines)
            call setqflist(map(copy(a:lines), '{ "filename": v:val, "lnum": 1 }'))
            copen
            cc
        endfunction

        let g:fzf_action = {
        \    "ctrl-q": function("s:build_quickfix_list"),
        \    "ctrl-t": "tab split",
        \    "ctrl-x": "split",
        \    "ctrl-v": "vsplit"
        \ }

        " See `man fzf-tmux` for available options
        if exists("$TMUX")
            let g:fzf_layout = { "tmux": "-p90%,60%" }
        else
            let g:fzf_layout = { "window": { "width": 0.9, "height": 0.6 } }
        endif

        "" get git root directory
        function! g:GitRootDirectory()
            let root = systemlist("git -C "
                \ . shellescape(expand("%:p:h"),)
                \ . " rev-parse --show-toplevel")[0]
            return v:shell_error ? "" : root
        endfunction

        command! -bang GFiles
            \ call fzf#run(fzf#wrap("gfiles", {
            \    "source": "git ls-files",
            \    "sink": "e",
            \    "dir": g:GitRootDirectory(),
            \    "options": [
            \        "--preview", "~/.vim/bin/fzf-preview.sh {}"
            \    ]
            \ },<bang>0))

        command! -bang Files
            \ call fzf#run(fzf#wrap("files", {
            \    "options": [
            \        "--preview", "~/.vim/bin/fzf-preview.sh {}"
            \    ]
            \ },<bang>0))

        " The query history for this command will be stored as "ls" inside g:fzf_history_dir.
        " The name is ignored if g:fzf_history_dir is not defined.
        command! -bang -complete=dir -nargs=? LS
            \ call fzf#run(fzf#wrap("ls", {
            \     "source": "ls",
            \     "dir": <q-args>,
            \     "options": [
            \         "--preview", "~/.vim/bin/fzf-preview.sh {}"
            \     ]
            \ }, <bang>0))

        command! -bar -bang -nargs=? -complete=buffer Buffers
            \ call fzf#run(fzf#wrap("buffers", {
            \     "source": map(
            \         filter(
            \             range(1, bufnr("$")),
            \             "buflisted(v:val) && getbufvar(v:val, '&filetype') != 'qf'"
            \         ),
            \         "bufname(v:val)"
            \     ),
            \     "options": [
            \         "+m",
            \         "-x",
            \         "--ansi",
            \         "--prompt", "Buffer > ",
            \         "--query", <q-args>
            \     ],
            \     "sink": "e"
            \ }, <bang>0))
    endif
endif


" Statusline {{{1
let g:use_devicons = expand("$USE_DEVICONS") != 0
        \ && expand("$USE_DEVICONS") == 1
        \ || expand("$TERM") == "wezterm" ||
        \ system('tmux showenv | grep -c "TERM=wezterm"') > 0

if has("eval") && has("statusline")

    let g:git_branch="" " gets set in an autocmd above
    function! DisplayGitBranch()
        let icon = g:use_devicons ? "   " : "  "
        return g:git_branch != "" ? icon .. g:git_branch .. "  " : ""
    endfunction

    set statusline=%#TabLineSel#                    " TabLineSel highlight
    set statusline+=\ \                             " Whitespace
    set statusline+=[%n]                            " Buffer number
    set statusline+=%m                              " Modified flag
    set statusline+=%r                              " Readonly flag
    set statusline+=%h                              " Help file flag
    set statusline+=%w                              " Preview window flag
    set statusline+=%q                              " Quickfix/location list flag
    set statusline+=%y                              " File type
    set statusline+=\ \                             " Whitespace
    set statusline+=%#TabLine#                      " TabLine highlight
    set statusline+=%{g:DisplayGitBranch()}         " Git branch name
    set statusline+=%#TabLineFill#                  " TabLineFill highlight
    set statusline+=%=                              " Left/Right separator
    set statusline+=\ \                             " Whitespace
    set statusline+=%#TabLine#                      " TabLine highlight
    set statusline+=\ \                             " Whitespace
    set statusline+=%f                              " File name
    set statusline+=\ \                             " Whitespace
    set statusline+=%#TabLineSel#                   " TabLineSel highlight
    set statusline+=\ \                             " Whitespace
    set statusline+=%c:[%l/%L]                      " cursor:line/total_lines
    set statusline+=\ \                             " Whitespace
endif


" Terminal options {{{1
" :help terminal-output-codes

" Fix modern terminal features
" https://sw.kovidgoyal.net/kitty/faq/#using-a-color-theme-with-a-background-color-does-not-work-well-in-vim
if !has('gui_running') && &term =~ '^\%(screen\|tmux\|xterm\)'
    " Styled and colored underline support
    let &t_AU = "\e[58:5:%dm"
    let &t_8u = "\e[58:2:%lu:%lu:%lum"
    let &t_Us = "\e[4:2m"
    let &t_Cs = "\e[4:3m"
    let &t_ds = "\e[4:4m"
    let &t_Ds = "\e[4:5m"
    let &t_Ce = "\e[4:0m"

    " Strikethrough
    let &t_Ts = "\e[9m"
    let &t_Te = "\e[29m"

    " Enable true colors, see  :help xterm-true-color
    let &t_8f = "\e[38:2:%lu:%lu:%lum"
    let &t_8b = "\e[48:2:%lu:%lu:%lum"
    let &t_RF = "\e]10;?\e\\"
    let &t_RB = "\e]11;?\e\\"

    " Enable bracketed paste mode, see  :help xterm-bracketed-paste
    let &t_BE = "\e[?2004h"
    let &t_BD = "\e[?2004l"
    let &t_PS = "\e[200~"
    let &t_PE = "\e[201~"

    " Cursor control
    if has("cursorshape")
        " let &t_RS = "\eP$q q\e\\"
        " let &t_RC = "\e[?12$p"
        " let &t_VS = "\e[?12l"
        " let &t_SH = "\e[%d q"
        let &t_SI = "\e[6 q"
        let &t_SR = "\e[4 q"
        let &t_EI = "\e[2 q"
    endif

    " Enable focus event tracking, see  :help xterm-focus-event
    let &t_fe = "\e[?1004h"
    let &t_fd = "\e[?1004l"
    execute "set <FocusGained>=\e[I"
    execute "set <FocusLost>=\e[O"

    " Window title
    let &t_ST = "\e[22;2t"
    let &t_RT = "\e[23;2t"

    " Enable modified arrow keys, see  :help arrow_modifiers
    execute "silent! set <xUp>=\e[@;*A"
    execute "silent! set <xDown>=\e[@;*B"
    execute "silent! set <xRight>=\e[@;*C"
    execute "silent! set <xLeft>=\e[@;*D"

    " vim hardcodes background color erase even if the terminfo file does
    " not contain bce. This causes incorrect background rendering when
    " using a color theme with a background color in terminals such as
    " kitty that do not support background color erase.
    let &t_ut=""

endif


" Colorscheme {{{1
if has("eval") && has("syntax")

    set background=dark
    set t_Co=256

    if exists("+termguicolors")
        set termguicolors
    endif

    if v:version < 500
        finish
    endif

    packadd! gruvbox-material

    function! s:gruvbox_material_custom() abort
        let s:palette = gruvbox_material#get_palette("soft", "material", {
            \ "bg_orange": ["#5A3B0A", "130"],
            \ "bg_visual_yellow": ["#7a380b", "208"]
        \ })

        call gruvbox_material#highlight("DiffDelete", s:palette.bg5, s:palette.bg_diff_red)
        call gruvbox_material#highlight("DiffChange", s:palette.none, s:palette.bg_orange)
        call gruvbox_material#highlight("DiffText", s:palette.fg0, s:palette.bg_visual_yellow)
        highlight! link CursorLineNr Purple
    endfunction

    augroup GruvboxMaterialCustom
        autocmd!
        autocmd ColorScheme gruvbox-material call s:gruvbox_material_custom()
    augroup END

    let g:gruvbox_material_background = "soft"
    let g:gruvbox_material_foreground = "original"
    let g:gruvbox_material_ui_contrast = "high"
    let g:gruvbox_material_statusline_style = "material"
    let g:gruvbox_material_diagnostic_virtual_text = "colored"
    " let g:gruvbox_material_spell_foreground = "colored"
    " let g:gruvbox_material_sign_column_background = "grey"
    " let g:gruvbox_material_menu_selection_background = "orange"
    " let g:gruvbox_material_current_word = "bold"
    " let g:gruvbox_material_visual = "reverse"

    let g:gruvbox_material_better_performance = 1
    let g:gruvbox_material_diagnostic_text_highlight = 0
    let g:gruvbox_material_transparent_background = 1
    let g:gruvbox_material_disable_italic_comment = 1
    " let g:gruvbox_material_enable_italic = 1
    " let g:gruvbox_material_enable_bold = 1
    " let g:gruvbox_material_disable_terminal_colors = 1
    " let g:gruvbox_material_dim_inactive_windows = 1

    colorscheme gruvbox-material
endif
