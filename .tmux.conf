#vim:filetype=tmux foldmethod=marker:

# Options {{{1
# NOTE: TERM must start with 'screen' when using surfraw's multiplexer integration
# https://gitlab.com/surfraw/Surfraw/-/blob/master/surfraw.IN?ref_type=heads#L588
set -gs default-terminal 'screen-256color-bce'
if 'infocmp -x tmux-256color > /dev/null 2>&1' 'set -gs default-terminal "tmux-256color"'

# enable true color (RBG)
set -ga terminal-overrides ',*:Tc'


%if #{>=:#{version},3.2}
    set -ga terminal-features 'xterm*:usstyle'
%else
    # undercurl
    set -ga terminal-overrides ',*:Smulx=\E[4::%p1%dm'
    # under(score|curl) colors
    set -ga terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
%endif

# yank to system clipboard rather than primary selection
# http://invisible-island.net/xterm/terminfo-contents.html#tic-xterm_tmux
# set-option -as terminal-overrides ',xterm*:Ms=\E]52;c;%p2%s\007'

%if #{>=:#{version},3.3}
    set -gq allow-passthrough on
%endif

set -g update-environment 'SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION DISPLAY TERM WEZTERM_PANE'

set -gq escape-time 0
set -gq repeat-time 200
set -gq history-limit 10000
set -gq focus-events on
set -gq xterm-keys on
set -gq mouse on
set -gq mode-keys vi
set -gq status-keys emacs

set -gq base-index 1           # start window numbering at 1
set -gq pane-base-index 1      # start pane numbering at 1
set -gq automatic-rename on    # rename windows to reflect current program
set -gq allow-rename off       # don't allow programs to rename windows
set -gq renumber-windows on    # renumber windows when a window is closed
set -gq set-titles on          # set terminal title
set -gq status-interval 5      # redraw status line every 5 seconds
set -gq aggressive-resize on   # Size windows correctly when switching sessions

# show flags for activity, silence, and bell in the non-active windows
set -gq monitor-activity on
set -gq activity-action other
set -gq monitor-bell on
set -gq bell-action other
set -gq monitor-silence 10
set -gq silence-action other

# Keymaps {{{1
set -g prefix C-Space
bind C-Space send-prefix
unbind C-b

# send input to all panes in window (toggle)
bind C-a \
  set-option synchronize-panes \;\
  display-message 'synchronize-panes #{?synchronize-panes,on,off}'

# clear the screen in all panes in window
bind C-l \
    set-option synchronize-panes on \;\
    send-keys C-l \;\
    run 'sleep 0.2' \;\
    refresh-client -cl \;\
    set-option synchronize-panes off

bind C-r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

bind C-e new-window -n 'tmux.conf' sh -c 'dot edit ~/.tmux.conf && \
    tmux source ~/.tmux.conf && tmux display "~/.tmux.conf sourced"'

%if #{>=:#{version},3.2}
    bind C-p popup -d '#{pane_current_path}' -EE git mux project
    bind C-t popup -d '#{pane_current_path}' -EE git mux task
    bind C-g popup -d '#{pane_current_path}' -EE -w 92% -h 92% gh fzf
    bind C-d popup -d '#{pane_current_path}' -EE -w 85% -h 85% zk daily
    bind /   popup -d '#{pane_current_path}' -EE -w 85% -h 85% zk edit --interactive
    bind T   popup -d '#{pane_current_path}' -EE -w 85% -h 85% taskwarrior-tui
    bind y   popup -d '#{pane_current_path}' -E  -w 69% -h 69% matpat -tsp all
    bind g   popup -d '#{pane_current_path}' -EE -w 92% -h 92% '\
        if [ "$(git rev-parse --is-inside-work-tree)" = "false" ]; \
            then (cd && dot edit +G +only); \
        else \
            $EDITOR +G +only; \
        fi'
%else
    bind C-p new-window -c '#{pane_current_path}' git mux project
    bind C-t new-window -c '#{pane_current_path}' git mux task
    bind C-g new-window -c '#{pane_current_path}' gh fzf
    bind C-d new-window -c '#{pane_current_path}' zk daily
    bind /   new-window -c '#{pane_current_path}' zk edit --interactive
    bind T   new-window -c '#{pane_current_path}' taskwarrior-tui
    bind y split-window -c '#{pane_current_path}' -h matpat -tsp all
    bind g   new-window -c '#{pane_current_path}' -Sn fugitive '\
        if [ "$(git rev-parse --is-inside-work-tree)" = "false" ]; \
            then (cd && dot edit +G +only); \
        else \
            $EDITOR +G +only; \
        fi'
%endif

# jump to common projects, blazingly fast
bind C-h run 'git mux project $HOME'
bind C-n run 'git mux project $NOTES'
bind C-c run 'git mux project $CALCITE'

bind C-y run _tmux-select

# easymotion style movement to enter copy mode
bind C-j run -b 'tmp_file="$(mktemp)"; \
    tmux command-prompt -1 -p "char: " "run-shell \"echo %1 >> $tmp_file\""; \
    _tmux-jump "$tmp_file"'

# kill stuff
bind -r x kill-pane
bind -r q confirm-before kill-window
bind DC run 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux confirm-before kill-session'
bind C-DC confirm-before kill-server

# session navigation
bind Tab switch-client -l  # move to last session

# window navigation
bind BSpace last-window

# pane navigation that doesn't wrap around the edge of the screen
bind -r h if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind -r j if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind -r k if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind -r l if-shell -F '#{pane_at_right}'  {} { select-pane -R }

# pane resizing
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# pane splits
bind C-v split-window -h -c "#{pane_current_path}"
bind C-s split-window -v -c "#{pane_current_path}"

# Add pane from a different session
bind A choose-window 'join-pane -h -s "%%"'

# swap a pane (targeted by pane number) with the current pane
bind P display-panes\; command-prompt -p 'pane #: '  'swap-pane -t "%%"'

# Root table keymaps {{{1
# pane navigation
bind -n C-M-x kill-pane
bind -n C-M-o rotate-window
bind -n C-M-v split-window -h -c '#{pane_current_path}'
bind -n C-M-s split-window -c '#{pane_current_path}'

# pane resizing
bind -n C-M-Left resize-pane -L 5
bind -n C-M-Down resize-pane -D 5
bind -n C-M-Up resize-pane -U 5
bind -n C-M-Right resize-pane -R 5

# window navigation
bind -n C-M-c new-window
bind -n C-M-p previous-window
bind -n C-M-n next-window

%if #{>=:#{version},3.2}
    bind -n C-M-y popup -d '#{pane_current_path}' -E  -w 69% -h 69% matpat -ts
    bind -n C-M-d popup -d '#{pane_current_path}' -EE -w 85% -h 85% zk daily
    bind -n C-M-/ popup -d '#{pane_current_path}' -EE -w 85% -h 85% zk edit --interactive
    bind -n C-M-t popup -d '#{pane_current_path}' -EE -w 69% -h 90% taskwarrior-tui
    bind -n C-M-g popup -d '#{pane_current_path}' -EE -w 92% -h 92% $EDITOR +G +only \
            --cmd 'let $GIT_WORK_TREE = expand("~")' \
            --cmd 'let $GIT_DIR = expand("~/.git")'
%else
    bind -n C-M-y split-window -c '#{pane_current_path}' -h matpat -ts
    bind -n C-M-d new-window -c '#{pane_current_path}' zk daily
    bind -n C-M-/ new-window -c '#{pane_current_path}' zk edit --interactive
    bind -n C-M-t new-window -c '#{pane_current_path}' taskwarrior-tui
    bind -n C-M-g new-window -c '#{pane_current_path}' -Sn fugitive $EDITOR +G +only \
            --cmd 'let $GIT_WORK_TREE = expand("~")' \
            --cmd 'let $GIT_DIR = expand("~/.git")'
%endif

bind -n  C-M-[ copy-mode
bind -n  C-M-] choose-buffer
bind -n  C-M-w choose-tree

bind -n C-l send-keys C-l \; run 'sleep 0.2' \; refresh-client -cl

# Copy mode {{{1

%if #{>=:#{version},3.2}
    set -gq copy-command "cb"
%endif

set -gq set-clipboard off
# If we're in a ssh session, set clipboard on to forward OSC 52 sequences properly
if-shell '[ -n "$SSH_CLIENT" ]' 'set -s set-clipboard on'

# select text from copy mode
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi V send -X select-line
bind -T copy-mode-vi C-v send -X rectangle-toggle

# copy text to tmux buffer
bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi Y send -X copy-end-of-line

# copy text to clipboard
bind -T copy-mode-vi C-y send -X copy-pipe-and-cancel
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe

# save most recent buffer to clipboard
bind Y choose-buffer 'run-shell "tmux save-buffer -b \"%%%\" - | cb > #{pane_tty}"'

# copy the selection and open it in the browser (requires surfraw or w3m)
bind-key -T copy-mode-vi C-o send-keys -X copy-selection \;\
    new-window -n w3m \;\
    send-keys -t w3m 'w3m "$(tmux show-buffer)" &' 'Enter'

bind-key -T copy-mode-vi C-g send-keys -X copy-selection \;\
    new-window -n google \;\
    send-keys -t google 'sr google "$(tmux show-buffer)" &' 'Enter'

bind-key -T copy-mode-vi C-w send-keys -X copy-selection \;\
    new-window -n wikipedia \;\
    send-keys 'sr wikipedia "$(tmux show-buffer)" &' 'Enter'

# Statusline {{{1
# disable tmux statusline when zoomed into a pane
set-hook -g after-resize-pane {
    if "tmux list-panes -F '#D#F' | grep -q Z" {
        set -g status off
    } {
        set -g status on
    }
}

set-hook -g pane-focus-in {
    if "tmux list-panes -F '#D#F' | grep -q Z" {
        set -g status off
    } {
        set -g status on
    }
}

bind _ set status

set -g status-left-length 40
set -g status-right "[#H]"

set -g window-status-style dim
set -g window-status-current-style bright
set -g window-status-last-style bg=default,fg=default
set -g window-status-bell-style bg=default,fg=default
set -g window-status-activity-style bg=default,fg=default

set -g status-style bg=colour0,fg=colour7
set -g mode-style bg=colour8,fg=colour0
set -g message-style bg=colour8,fg=colour0
set -g message-command-style bg=colour8,fg=colour0
set -g pane-border-style fg=colour8
set -g pane-active-border-style fg=colour8

# TMUX/VIM navigation {{{1
# Intelligently navigate tmux panes and Vim splits using the same keys.
# See https://sunaku.github.io/tmux-select-pane.html for documentation.
#
#      +-------------+------------+-----------------------------+
#      | inside Vim? | is Zoomed? | Action taken by key binding |
#      +-------------+------------+-----------------------------+
#      | No          | No         | Focus directional tmux pane |
#      | No          | Yes        | Nothing: ignore key binding |
#      | Yes         | No         | Seamlessly focus Vim / tmux |
#      | Yes         | Yes        | Focus directional Vim split |
#      +-------------+------------+-----------------------------+
#
_tmux_nav_vim_timeout=0.05 # number of seconds we give Vim to navigate
_tmux_nav='                                                            \
  pane_title="#{q:pane_title}";                                        \
  pane_current_command="#{q:pane_current_command}";                    \
  pane_is_zoomed() {                                                   \
    test #{window_zoomed_flag} -eq 1;                                  \
  };                                                                   \
  pane_title_changed() {                                               \
    test "$pane_title" != "$(tmux display -p "##{q:pane_title}")";     \
  };                                                                   \
  command_is_vim() {                                                   \
    case "${1%% *}" in                                                 \
      (vi|?vi|vim*|?vim*|view|?view|vi??*) true ;;                     \
      (*) false ;;                                                     \
    esac;                                                              \
  };                                                                   \
  pane_contains_vim() {                                                \
    case "$pane_current_command" in                                    \
      (git|*sh) command_is_vim "$pane_title" ;;                        \
      (*) command_is_vim "$pane_current_command" ;;                    \
    esac;                                                              \
  };                                                                   \
  pane_contains_neovim_terminal() {                                    \
    case "$pane_title" in                                              \
      (nvim?term://*) true ;;                                          \
      (*) false ;;                                                     \
    esac;                                                              \
  };                                                                   \
  navigate() {                                                         \
    tmux_navigation_command=$1;                                        \
    vim_navigation_command=$2;                                         \
    vim_navigation_only_if=${3:-true};                                 \
    if pane_contains_vim && eval "$vim_navigation_only_if"; then       \
      if pane_contains_neovim_terminal; then                           \
        tmux send-keys C-\\ C-n;                                       \
      fi;                                                              \
      eval "$vim_navigation_command";                                  \
      if ! pane_is_zoomed; then                                        \
        sleep $_tmux_nav_vim_timeout; : wait for Vim to change title;  \
        if ! pane_title_changed; then                                  \
          eval "$tmux_navigation_command";                             \
        fi;                                                            \
      fi;                                                              \
    elif ! pane_is_zoomed; then                                        \
      eval "$tmux_navigation_command";                                 \
    fi;                                                                \
  };                                                                   \
navigate '

_tmux_nav_left=" $_tmux_nav 'tmux select-pane -L'  'tmux send-keys C-w h'"
_tmux_nav_down=" $_tmux_nav 'tmux select-pane -D'  'tmux send-keys C-w j'"
_tmux_nav_up="   $_tmux_nav 'tmux select-pane -U'  'tmux send-keys C-w k'"
_tmux_nav_right="$_tmux_nav 'tmux select-pane -R'  'tmux send-keys C-w l'"
_tmux_nav_back=" $_tmux_nav 'tmux select-pane -l || tmux select-pane -t1'\
                            'tmux send-keys C-w p'                       \
                            'pane_is_zoomed'                             "

bind-key -n C-M-h  run-shell -b "$_tmux_nav_left"
bind-key -n C-M-j  run-shell -b "$_tmux_nav_down"
bind-key -n C-M-k  run-shell -b "$_tmux_nav_up"
bind-key -n C-M-l  run-shell -b "$_tmux_nav_right"
bind-key -n C-M-\\ run-shell -b "$_tmux_nav_back"
