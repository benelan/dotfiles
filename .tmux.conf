# General                                                               {{{
# --------------------------------------------------------------------- {|}

# set $TERM and enable true color
set -ga terminal-overrides ',*:Tc'

# NOTE: TERM must start with 'screen' when using surfraw's multiplexer integration
# https://gitlab.com/surfraw/Surfraw/-/blob/master/surfraw.IN?ref_type=heads#L588
set -g default-terminal 'screen-256color'
if 'infocmp -x tmux-256color > /dev/null 2>&1' 'set -g default-terminal "tmux-256color"'

# underscore colors - needs tmux-3.0
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# undercurl support
set -ga terminal-overrides ',*:Smulx=\E[4::%p1%dm'

# yank to system clipboard rather than primary selection
# http://invisible-island.net/xterm/terminfo-contents.html#tic-xterm_tmux
# set-option -as terminal-overrides ',xterm*:Ms=\E]52;c;%p2%s\007'

set -g update-environment 'SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION DISPLAY TERM'

unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

set -g escape-time 1
set -g repeat-time 300
set -g history-limit 10000
set -g focus-events on
set -g xterm-keys on
set -g mouse on
set -g mode-keys vi
set -g status-keys vi

%if #{>=:#{version},3.3}
    set -g allow-passthrough on
%endif

# send input to all panes in window (toggle)
bind-key C-a \
  set-option synchronize-panes \;\
  display-message 'synchronize-panes #{?synchronize-panes,on,off}'

# clear the screen in all panes in window
bind-key C-l \
    set-option synchronize-panes on \;\
    send-keys C-l \;\
    run 'sleep 0.2' \;\
    refresh-client -cl \;\
    set-option synchronize-panes off

bind C-r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

bind C-e new-window -n 'tmux.conf' sh -c '${EDITOR:-vi} ~/.tmux.conf && \
    tmux source ~/.tmux.conf && tmux display "~/.tmux.conf sourced"'

# --------------------------------------------------------------------- }}}
# Display                                                               {{{
# --------------------------------------------------------------------- {|}

set -sg base-index 1          # start window numbering at 1
set -wg pane-base-index 1     # start pane numbering at 1
set -wg automatic-rename on   # rename windows to reflect current program
set -g allow-rename off       # don't allow programs to rename windows
set -g renumber-windows on    # renumber windows when a window is closed
set -g set-titles on          # set terminal title
set -g status-interval 5      # redraw status line every 5 seconds
set -g aggressive-resize on   # Size windows correctly when switching sessions

# show flags for activity, silence, and bell in the non-active windows
set -g monitor-activity on
set -g activity-action other
set -g monitor-bell on
set -g bell-action other
set -g monitor-silence 10
set -g silence-action other

# --------------------------------------------------------------------- }}}
# Navigation                                                            {{{
# --------------------------------------------------------------------- {|}

%if #{>=:#{version},3.2}
    bind C-p popup -d '#{pane_current_path}' -EE git mux project
    bind C-t popup -d '#{pane_current_path}' -EE git mux task
    bind C-g popup -d '#{pane_current_path}' -EE -w 92% -h 92% gh fzf
    bind C-d popup -d '#{pane_current_path}' -EE -w 85% -h 85% zk daily
    bind /   popup -d '#{pane_current_path}' -EE -w 85% -h 85% zk edit --interactive
    bind t   popup -d '#{pane_current_path}' -EE -w 85% -h 85% taskwarrior-tui
    bind y   popup -d '#{pane_current_path}' -E  -w 69% -h 69% matpat -ts
    bind g   popup -d '#{pane_current_path}' -EE -w 92% -h 92% $EDITOR +G +only \
            --cmd 'let $GIT_WORK_TREE = expand("~")' \
            --cmd 'let $GIT_DIR = expand("~/.git")'
%else
    bind C-p new-window -c '#{pane_current_path}' git mux project
    bind C-t new-window -c '#{pane_current_path}' git mux task
    bind C-g new-window -c '#{pane_current_path}' gh fzf
    bind C-d new-window -c '#{pane_current_path}' zk daily
    bind /   new-window -c '#{pane_current_path}' zk edit --interactive
    bind t   new-window -c '#{pane_current_path}' taskwarrior-tui
    bind y split-window -c '#{pane_current_path}' -h matpat -ts
    bind g   new-window -c '#{pane_current_path}' -Sn fugitive $EDITOR +G +only \
            --cmd 'let $GIT_WORK_TREE = expand("~")' \
            --cmd 'let $GIT_DIR = expand("~/.git")'
%endif

# jump to common projects, blazingly fast
bind C-h run 'git mux project $HOME'
bind C-n run 'git mux project $NOTES'
bind C-c run 'git mux project $CALCITE'

# kill stuff
bind -r x kill-pane
bind -r q confirm-before kill-window
bind DC run 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux confirm-before kill-session'
bind C-DC confirm-before kill-server

# session navigation
bind S new-session
bind Tab switch-client -l  # move to last session

# window navigation
bind BSpace last-window

# pane navigation that doesn't wrap around the edge of the screen
bind -r h if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind -r j if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind -r k if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind -r l if-shell -F '#{pane_at_right}'  {} { select-pane -R }

# pane resizing
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# pane splits
bind \\ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Add pane from a different session
bind A choose-window 'join-pane -h -s "%%"'

# swap a pane (targeted by pane number) with the current pane
bind P display-panes\; command-prompt -p 'pane #: '  'swap-pane -t "%%"'

# --------------------------------------------------------------------- }}}
# Root table keymaps                                                    {{{
# --------------------------------------------------------------------- {|}

# pane navigation
bind -n C-M-x kill-pane
bind -n C-M-o rotate-window

# pane resizing
bind -n C-M-Left resize-pane -L 5
bind -n C-M-Down resize-pane -D 5
bind -n C-M-Up resize-pane -U 5
bind -n C-M-Right resize-pane -R 5

# window navigation
bind -n C-M-c new-window
bind -n C-M-p previous-window
bind -n C-M-n next-window

%if #{>=:#{version},3.2}
    bind -n C-M-y popup -d '#{pane_current_path}' -E  -w 69% -h 69% matpat -ts
    bind -n C-M-d popup -d '#{pane_current_path}' -EE -w 85% -h 85% zk daily
    bind -n C-M-/ popup -d '#{pane_current_path}' -EE -w 85% -h 85% zk edit --interactive
    bind -n C-M-t popup -d '#{pane_current_path}' -EE -w 69% -h 90% taskwarrior-tui
    bind -n C-M-g popup -d '#{pane_current_path}' -EE -w 92% -h 92% $EDITOR +G +only \
            --cmd 'let $GIT_WORK_TREE = expand("~")' \
            --cmd 'let $GIT_DIR = expand("~/.git")'
%else
    bind -n C-M-y split-window -c '#{pane_current_path}' -h matpat -ts
    bind -n C-M-d new-window -c '#{pane_current_path}' zk daily
    bind -n C-M-/ new-window -c '#{pane_current_path}' zk edit --interactive
    bind -n C-M-t new-window -c '#{pane_current_path}' taskwarrior-tui
    bind -n C-M-g new-window -c '#{pane_current_path}' -Sn fugitive $EDITOR +G +only \
            --cmd 'let $GIT_WORK_TREE = expand("~")' \
            --cmd 'let $GIT_DIR = expand("~/.git")'
%endif

bind -n  C-M-[ copy-mode
bind -n  C-M-] choose-buffer
bind -n  C-M-w choose-tree

bind -n C-l send-keys C-l \; run 'sleep 0.2' \; refresh-client -cl

# --------------------------------------------------------------------- }}}
# Copy mode                                                             {{{
# --------------------------------------------------------------------- {|}

set -g set-clipboard off

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi V send -X select-line
bind -T copy-mode-vi C-v send -X rectangle-toggle

bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi Y send -X copy-end-of-line

# save selection to clipboard from copy mode
bind -T copy-mode-vi C-y send -X copy-pipe-and-cancel 'cb > #{pane_tty}'
# copy to clipboard by dragging with mouse
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe 'cb > #{pane_tty}'

# save most recent buffer to clipboard
bind Y choose-buffer 'run-shell "tmux save-buffer -b \"%%%\" - | cb > #{pane_tty}"'

# copy the selection and open it in the browser (requires surfraw and w3m)
bind-key -T copy-mode-vi C-o send-keys -X copy-selection \;\
    new-window -n w3m \;\
    send-keys -t w3m 'w3m "$(tmux show-buffer)" && tmux kill-window' 'Enter'

bind-key -T copy-mode-vi C-g send-keys -X copy-selection \;\
    new-window -n google \;\
    send-keys -t google 'sr google "$(tmux show-buffer)" && tmux kill-window' 'Enter'

bind-key -T copy-mode-vi C-w send-keys -X copy-selection \;\
    new-window -n wikipedia \;\
    send-keys -t wikipedia 'sr wikipedia "$(tmux show-buffer)" && tmux kill-window' 'Enter'

# --------------------------------------------------------------------- }}}
# Statusline                                                            {{{
# --------------------------------------------------------------------- {|}

# disable tmux statusline when zoomed into a pane
set-hook -g after-resize-pane {
    if "tmux list-panes -F '#D#F' | grep -q Z" {
        set -g status off
    } {
        set -g status on
    }
}

set-hook -g pane-focus-in {
    if "tmux list-panes -F '#D#F' | grep -q Z" {
        set -g status off
    } {
        set -g status on
    }
}

bind _ set status

set -g status-left-length 40

set -wg window-status-current-format \
    '#[fg=colour15,bold] #I:#W.#P#{?window_zoomed_flag,|Z,}'

set -wg window-status-format '#[fg=colour8] #I:#W.#P|#F'

set -ag status-style bg=colour0,fg=colour2
set -wg window-status-activity-style bg=default,fg=default
set -wg window-status-bell-style bg=default,fg=default
set -g message-style bg=colour8,fg=colour0
set -g message-command-style bg=colour8,fg=colour0
set -g mode-style bg=colour8,fg=colour0
set -g pane-active-border-style fg=colour8
set -g pane-border-style fg=colour8

# --------------------------------------------------------------------- }}}
# Menus                                                                 {{{
# --------------------------------------------------------------------- {|}

%if #{>=:#{version},3.0}
    bind-key M-/ display-menu -x W -y S -T '#[fg=colour4]Readline Bindings' \
        "#[fg=colour1]Moving" "" "" "" \
        "Move to start of current line"                                                C-a "send-keys C-a" \
        "Move to end of current line"                                                  C-e "send-keys C-e" \
        "Move forward a character"                                                     C-f "send-keys C-f" \
        "Move backward a character"                                                    C-b "send-keys C-b" \
        "Move forward to end of next word"                                             M-f "send-keys M-f" \
        "Move backward to start of previous word"                                      M-b "send-keys M-b" \
        "" "#[fg=colour1]Changing Text" "" "" "" \
        "Delete the character under the cursor"                                        C-d "send-keys C-d" \
        "Transpose words"                                                              M-t "send-keys M-t" \
        "" "#[fg=colour1]Cutting and Pasting" "" "" "" \
        "Kill (cut) forwards to the end of the line"                                   C-k  "send-keys C-k" \
        "Kill (cut) backwards to the start of the line"                                C-u  "send-keys C-u" \
        "^"                                                                            C-x  "send-keys C-x" \
        "Kill (cut) forwards to the end of the current word"                           M-d  "send-keys M-d" \
        "Kill (cut) backwards to the start of the current word"                        C-w  "send-keys C-w" \
        "Delete whitespace around the cursor"                                          M-\\ "send-keys M-\\" \
        "Yank (paste) the top of the kill ring"                                        C-y  "send-keys C-y" \
        "Rotate the kill ring, and yank (paste) the new top. Only works after a yank"  M-y  "send-keys M-y" \
        "" "#[fg=colour1]History" "" "" "" \
        "Fetch the previous command from the history list"                             C-p   "send-keys C-p" \
        "Fetch the next command from the history list"                                 C-n   "send-keys C-n" \
        "Move to the first line in the history"                                        M-<   "send-keys M-<" \
        "Move to the last line in the history"                                         M->   "send-keys M->" \
        "Search backward through history"                                              C-r   "send-keys C-r" \
        "Search forward through history"                                               C-s   "send-keys C-s" \
        "Search backward through history for a given string"                           M-p   "send-keys M-p" \
        "Search forward through history for a given string"                            M-n   "send-keys M-n" \
        "Insert the first argument to the previous command"                            C-M-y "send-keys C-M-y" \
        "Insert the last argument to the previous command"                             M-_   "send-keys M-_" \
        "^"                                                                            M-.   "send-keys M-."
%endif

# --------------------------------------------------------------------- }}}
# TMUX/VIM navigation                                                   {{{
# --------------------------------------------------------------------- {|}

# Intelligently navigate tmux panes and Vim splits using the same keys.
# See https://sunaku.github.io/tmux-select-pane.html for documentation.
#
#      +-------------+------------+-----------------------------+
#      | inside Vim? | is Zoomed? | Action taken by key binding |
#      +-------------+------------+-----------------------------+
#      | No          | No         | Focus directional tmux pane |
#      | No          | Yes        | Nothing: ignore key binding |
#      | Yes         | No         | Seamlessly focus Vim / tmux |
#      | Yes         | Yes        | Focus directional Vim split |
#      +-------------+------------+-----------------------------+
#
_tmux_nav_vim_timeout=0.05 # number of seconds we give Vim to navigate
_tmux_nav='                                                            \
  pane_title="#{q:pane_title}";                                        \
  pane_current_command="#{q:pane_current_command}";                    \
  pane_is_zoomed() {                                                   \
    test #{window_zoomed_flag} -eq 1;                                  \
  };                                                                   \
  pane_title_changed() {                                               \
    test "$pane_title" != "$(tmux display -p "##{q:pane_title}")";     \
  };                                                                   \
  command_is_vim() {                                                   \
    case "${1%% *}" in                                                 \
      (vi|?vi|vim*|?vim*|view|?view|vi??*) true ;;                     \
      (*) false ;;                                                     \
    esac;                                                              \
  };                                                                   \
  pane_contains_vim() {                                                \
    case "$pane_current_command" in                                    \
      (git|*sh) command_is_vim "$pane_title" ;;                        \
      (*) command_is_vim "$pane_current_command" ;;                    \
    esac;                                                              \
  };                                                                   \
  pane_contains_neovim_terminal() {                                    \
    case "$pane_title" in                                              \
      (nvim?term://*) true ;;                                          \
      (*) false ;;                                                     \
    esac;                                                              \
  };                                                                   \
  navigate() {                                                         \
    tmux_navigation_command=$1;                                        \
    vim_navigation_command=$2;                                         \
    vim_navigation_only_if=${3:-true};                                 \
    if pane_contains_vim && eval "$vim_navigation_only_if"; then       \
      if pane_contains_neovim_terminal; then                           \
        tmux send-keys C-\\ C-n;                                       \
      fi;                                                              \
      eval "$vim_navigation_command";                                  \
      if ! pane_is_zoomed; then                                        \
        sleep $_tmux_nav_vim_timeout; : wait for Vim to change title;  \
        if ! pane_title_changed; then                                  \
          eval "$tmux_navigation_command";                             \
        fi;                                                            \
      fi;                                                              \
    elif ! pane_is_zoomed; then                                        \
      eval "$tmux_navigation_command";                                 \
    fi;                                                                \
  };                                                                   \
navigate '

_tmux_nav_left=" $_tmux_nav 'tmux select-pane -L'  'tmux send-keys C-w h'"
_tmux_nav_down=" $_tmux_nav 'tmux select-pane -D'  'tmux send-keys C-w j'"
_tmux_nav_up="   $_tmux_nav 'tmux select-pane -U'  'tmux send-keys C-w k'"
_tmux_nav_right="$_tmux_nav 'tmux select-pane -R'  'tmux send-keys C-w l'"
_tmux_nav_back=" $_tmux_nav 'tmux select-pane -l || tmux select-pane -t1'\
                            'tmux send-keys C-w p'                       \
                            'pane_is_zoomed'                             "

bind-key -n C-M-h  run-shell -b "$_tmux_nav_left"
bind-key -n C-M-j  run-shell -b "$_tmux_nav_down"
bind-key -n C-M-k  run-shell -b "$_tmux_nav_up"
bind-key -n C-M-l  run-shell -b "$_tmux_nav_right"
bind-key -n C-M-\\ run-shell -b "$_tmux_nav_back"

# --------------------------------------------------------------------- }}}
