# General                                                               {{{
# --------------------------------------------------------------------- {|}

# set $TERM and enable true color
set -ga terminal-overrides ',*:Tc'
set -g default-terminal 'screen-256color'
# if 'infocmp -x tmux-256color > /dev/null 2>&1' 'set -g default-terminal "tmux-256color"'
# underscore colors - needs tmux-3.0
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
# undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'

set -g update-environment 'SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION DISPLAY OG_TERM TERM'

unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

set -g escape-time 0
set -g repeat-time 300
set -g history-limit 10000
set -s focus-events on
set -g mouse on
set -g mode-keys vi
set -g status-keys vi

bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

bind C-u run 'tmux-url-select'
bind C-y run 'tmux-yank'

bind C-e new-window -n 'tmux.conf' sh -c '${EDITOR:-vi} ~/.tmux.conf && \
  tmux source ~/.tmux.conf && tmux display "~/.tmux.conf sourced"'

# --------------------------------------------------------------------- }}}
# Display                                                               {{{
# --------------------------------------------------------------------- {|}

set -sg base-index 1          # start window numbering at 1
set -wg pane-base-index 1     # start pane numbering at 1
set -wg automatic-rename on   # rename windows to reflect current program
set -g allow-rename off       # don't allow programs to rename windows
set -g renumber-windows on    # renumber windows when a window is closed
set -g set-titles on          # set terminal title
set -g display-panes-time 800 # pane indicators display time
set -g display-time 1000      # status messages display time
set -g status-interval 5      # redraw status line every 5 seconds
set -g aggressive-resize on   # Size windows correctly when switching sessions

# activity
set -g monitor-activity on
set -g monitor-bell on
set -g bell-action none
set -g activity-action none

# --------------------------------------------------------------------- }}}
# Navigation                                                            {{{
# --------------------------------------------------------------------- {|}

%if #{>=:#{version},3.2}
  bind C-p popup -E -E git mux project
  bind C-t popup -E -E git mux task
  bind C-d popup -E -E -w 69% -h 90% zk daily
  bind t popup -E -E -w 69% -h 90% taskwarrior-tui
%else
  bind C-p new-window -c '#{pane_current_path}' git mux project
  bind C-t new-window -c '#{pane_current_path}' git mux task
  bind C-d new-window -c '#{pane_current_path}' zk daily
  bind t new-window -c '#{pane_current_path}' taskwarrior-tui
%endif

# jump to common projects, blazingly fast
bind C-c run 'git mux project ~/dev/work/calcite-design-system' # 'c' for 'calcite'
bind C-h run 'git mux project ~'                                # 'h' for 'home'
bind C-n run 'git mux project $NOTES'                           # 'n' for 'notes'

# kill stuff
bind -r x kill-pane
bind -r q confirm-before kill-window
bind DC run 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux confirm-before kill-session'
bind C-DC confirm-before kill-server

# session navigation
bind S new-session
bind Tab switch-client -l  # move to last session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# window navigation
bind BSpace last-window

# pane navigation that doesn't wrap around the edge of the screen
bind -r h if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind -r j if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind -r k if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind -r l if-shell -F '#{pane_at_right}'  {} { select-pane -R }

# swap panes
bind -r > swap-pane -D
bind -r < swap-pane -U

# pane resizing
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# pane splits
bind '\' split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# join and break panes
bind J choose-window 'join-pane -h -s "%%"'
bind B break-pane -d

# easily swap a pane (targeted by pane number) with the current pane
bind P display-panes\; command-prompt -p 'pane #: '  'swap-pane -t "%%"'

# --------------------------------------------------------------------- }}}
# Root table keymaps                                                    {{{
# --------------------------------------------------------------------- {|}

# pane navigation
bind -n C-M-x kill-pane
bind -n C-M-o rotate-window
bind -n C-M-h if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind -n C-M-j if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind -n C-M-k if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind -n C-M-l if-shell -F '#{pane_at_right}'  {} { select-pane -R }

# pane resizing
bind -n C-M-Left resize-pane -L 5
bind -n C-M-Down resize-pane -D 5
bind -n C-M-Up resize-pane -U 5
bind -n C-M-Right resize-pane -R 5

# window navigation
bind -n C-M-c new-window
bind -n C-M-p previous-window
bind -n C-M-n next-window

%if #{>=:#{version},3.2}
  bind -n C-M-d popup -E -E -w 69% -h 90% zk daily
  bind -n C-M-t popup -E -E -w 69% -h 90% taskwarrior-tui
%else
  bind C-M-d new-window -c '#{pane_current_path}' zk daily
  bind C-M-t new-window -c '#{pane_current_path}' taskwarrior-tui
%endif

bind -n  C-M-[ copy-mode
bind -n  C-M-] choose-buffer
bind -n  C-M-w choose-tree

bind -n C-l send-keys C-l \; run 'sleep 0.2' \; refresh-client -cl

# --------------------------------------------------------------------- }}}
# Copy mode                                                             {{{
# --------------------------------------------------------------------- {|}

set -g set-clipboard off

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi V send -X select-line
bind -T copy-mode-vi C-v send -X rectangle-toggle

bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi Y send -X copy-end-of-line

# save selection to clipboard from copy mode
bind -T copy-mode-vi C-y send -X copy-pipe-and-cancel 'cb >/dev/null 2>&1'
# copy to clipboard by dragging with mouse
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe "xclip -in -selection clipboard"

# copy the selection and open it in the browser (requires surfraw and w3m)
bind-key -T copy-mode-vi C-o send-keys -X copy-selection \; new-window -n w3m \; send-keys -t w3m 'w3m "$(tmux show-buffer)" && tmux kill-window' 'Enter'
bind-key -T copy-mode-vi C-g send-keys -X copy-selection \; new-window -n google \; send-keys -t google 'sr google "$(tmux show-buffer)" && tmux kill-window' 'Enter'
bind-key -T copy-mode-vi C-w send-keys -X copy-selection \; new-window -n wikipedia \; send-keys -t wikipedia 'sr wikipedia "$(tmux show-buffer)" && tmux kill-window' 'Enter'

# save most recent buffer to clipboard
bind y run -b 'tmux save-buffer - | cb >/dev/null 2>&1'

# --------------------------------------------------------------------- }}}
# Statusline                                                            {{{
# --------------------------------------------------------------------- {|}

# disable tmux statusline when zoomed into a pane
set-hook -g after-resize-pane {
  if 'tmux list-panes -F "#F" | grep -q Z' {
    set -g status off
  } {
    set -g status on
  }
}

bind _ set status

set -g status-justify left
set -g status-position bottom
set -g status-left-length 40
set -g status-right-length 40

set -g status-left ' #S '
set -g status-right ' %Y-%m-%d %H:%M [#H] '
set -wg window-status-current-format '#[fg=colour15,bold] #I:#W.#P'
set -wg window-status-format '#[fg=colour8] #I:#W.#P#F'

set -ag status-style bg=colour0,fg=colour2
set -wg window-status-activity-style bg=default,fg=default
set -wg window-status-bell-style bg=default,fg=default
set -g message-style bg=colour8,fg=colour0
set -g message-command-style bg=colour8,fg=colour0
set -g mode-style bg=colour8,fg=colour0
set -g pane-active-border-style fg=colour8
set -g pane-border-style fg=colour8

# --------------------------------------------------------------------- }}}
# Menus                                                                 {{{
# --------------------------------------------------------------------- {|}

bind-key -n M-/ display-menu -x W -y S -T '#[fg=colour4]Readline Bindings' \
    "#[fg=colour1]Moving" "" "" "" \
    "Move to start of current line"           C-a "send-keys C-a" \
    "Move to end of current line"             C-e "send-keys C-e" \
    "Move forward a character"                C-f "send-keys C-f" \
    "Move backward a character"               C-b "send-keys C-b" \
    "Move forward to end of next word"        M-f "send-keys M-f" \
    "Move backward to start of previous word" M-b "send-keys M-b" \
    "" "#[fg=colour1]Changing Text" "" "" "" \
    "Delete the character under the cursor"   C-d "send-keys C-d" \
    "Transpose words"                         M-t "send-keys M-t" \
    "" "#[fg=colour1]Cutting and Pasting" "" "" "" \
    "Kill (cut) forwards to the end of the line"                                   C-k  "send-keys C-k" \
    "Kill (cut) backwards to the start of the line"                                C-u  "send-keys C-u" \
    "^"                                                                            C-x  "send-keys C-x" \
    "Kill (cut) forwards to the end of the current word"                           M-d  "send-keys M-d" \
    "Kill (cut) backwards to the start of the current word"                        C-w  "send-keys C-w" \
    "Delete whitespace around the cursor"                                          M-\\ "send-keys M-\\" \
    "Yank (paste) the top of the kill ring"                                        C-y  "send-keys C-y" \
    "Rotate the kill ring, and yank (paste) the new top. Only works after a yank"  M-y  "send-keys M-y" \
    "" "#[fg=colour1]History" "" "" "" \
    "Fetch the previous command from the history list"    C-p   "send-keys C-p" \
    "Fetch the next command from the history list"        C-n   "send-keys C-n" \
    "Move to the first line in the history"               M-<   "send-keys M-<" \
    "Move to the last line in the history"                M->   "send-keys M->" \
    "Search backward through history"                     C-r   "send-keys C-r" \
    "Search forward through history"                      C-s   "send-keys C-s" \
    "Search backward through history for a given string"  M-p   "send-keys M-p" \
    "Search forward through history for a given string"   M-n   "send-keys M-n" \
    "Insert the first argument to the previous command"   C-M-y "send-keys C-M-y" \
    "Insert the last argument to the previous command"    M-_   "send-keys M-_" \
    "^"                                                   M-.   "send-keys M-."

# --------------------------------------------------------------------- }}}
