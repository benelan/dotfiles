" vim:filetype=vifm foldmethod=marker:
" Sample configuration file for vifm (last updated: 2 June, 2023)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" Main settings {{{1
" Command used to edit files in various contexts.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.
if executable('nvim')
    set vicmd=nvim
elseif executable('vim')
    set vicmd=vim
elseif executable('vi')
    set vicmd=vi
elseif $EDITOR != ''
    echo 'Note: using `'.$EDITOR.'` as an editor'
    let &vicmd = $EDITOR
endif

set number
set relativenumber

set title

set grepprg='rg --vimgrep --hidden'
set findprg='fd --hidden %A %s'

" ignore .git directory on :find
"set findprg='find %s %a -print ,
"            \ -type d \( ! -readable -o ! -executable -o -path "*/.git" \)
"            \ -prune'

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.
set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.
set trash
set trashdir=%r/.vifm_trash,$HOME/.local/share/Trash/files

" This is how many directories to store in the directory history.
set history=400

" Maximum number of changes that can be undone.
set undolevels=1000

" What should be saved automatically on restarting vifm.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=dhistory,chistory,state,tui,shistory,
            \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" Automatically resolve symbolic links on l or Enter.
set followlinks

" Natural sort of (version) numbers within text.
set sortnumbers

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

set fastrun

set dirsize=nitems

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
set timefmt=%Y-%m-%d\ %H:%M

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch

set tabstop=2

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Don't do too many requests to slow file systems
if !has('win')
    set slowfs=curlftpfs
endif

" show hidden files on startup
set dotfiles
set dotdirs=

" Set custom statusline
set statusline="  %f  %=  %20d %15A %10E (%a) "

set rulerformat='%2l-%S%[ +%x%]'
set tablabel=%[(%n)%]%[%[%T{tree}%]%[{%c}%]@%]%p:t
set tuioptions=psuv

" make filter cmd behave like vim's Cfilter and favor <c-i> over <tab> binding
set cpoptions=s

" List of color schemes to try (picks the first one supported by the terminal)
colorscheme gruvbox

" Bookmarks {{{1
" :mark mark /full/directory/path [filename]
mark h ~/
mark v ~/.config/nvim/
execute 'mark d' fnameescape($DOTFILES)
execute 'mark n' fnameescape($NOTES)
execute 'mark p' fnameescape($PERSONAL)
execute 'mark l' fnameescape($LIB)
execute 'mark w' fnameescape($WORK)
execute 'mark c' fnameescape($CALCITE)

" Commands {{{1
" These are some of the macros that can be used in the action part:
"  %a for user arguments
"  %c for current file under the cursor
"  %C for current file under the cursor of inactive pane
"  %f for selected file(s)
"  %F for selected file(s) of inactive pane
"  %b is the same as %f %F
"  %d for current directory name
"  %D for current directory name of inactive pane
"  %r{x} for list of files in register {x}
"  %m runs the command in a menu window
"  %u uses command's output to build a file list
"  see `:help vifm-macros` and `:help vifm-filename-modifiers` for more

" :com[mand][!] command_name action
command! df df -h %m 2> /dev/null
command! diff nvim -d %f %F
command! zip zip -r %c.zip %f
command! unzip unzip %f
command! run !! ./%f
command! make !!make %a
command! mcd :mkdir %a | cd %a
command! mcd! :mkdir! %a | cd %a
command! vgrep nvim "+grep %a"
command! reload :write | restart full
command! bak :clone %c.bak

" File types association {{{1
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
"
" The first entry is the default program to be used with a matching file.
" The other programs for the file type can be accessed via :file command.
" The command macros like %f, %F, %d, %D may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.
" Spaces in an app name must be escaped, for example: QuickTime\ Player.app

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of the following formats:
"
" :filetype patterns FUSE_MOUNT|mount_cmd %SOURCE_FILE %DESTINATION_DIR
"
" %SOURCE_FILE and %DESTINATION_DIR are filled in at runtime.
"
" Example:
"   :filetype *.zip,*.[jwe]ar FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype patterns FUSE_MOUNT2|mount_cmd %PARAM %DESTINATION_DIR
"
" %PARAM and %DESTINATION_DIR are filled in at runtime.
"
" Example:
"   :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
"
" %PARAM value is the first line of the matched file, example: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.  There is also %FOREGROUND, which is useful for entering passwords.

" Markdown/TypeScript
filetype {*.md,*.mdx,*.ts,*.tsx}
            \ {Open in neovim} nvim %f,
            \ {Open in vim} vim %f,
            \ {Open in vi} vi %f,

fileviewer {*.md,*.mdx,*.ts,*.tsx}
            \ {Open in neovim} nvim %f,
            \ {Open in vim} vim %f,
            \ {Open in vi} vi %f,

" Pdf
filetype {*.pdf},<application/pdf>
        \ {View in zathura} zathura %c %i &,
        \ {View in default app} o %c &

fileviewer {*.pdf},<application/pdf> pdftotext -nopgbrk %c -

" PostScript
filetype {*.ps,*.eps,*.ps.gz},<application/postscript>
            \ {View in zathura} zathura %f &,
            \ {View in default app} o %c &

" Djvu
filetype {*.djvu},<image/vnd.djvu>
            \ {View in zathura} zathura %f &,
            \ {View in default app} o %c &

" Midi
filetype {*.mid,*.kar} {Play using TiMidity++} timidity %f,

" Audio
filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
            \*.aac,*.mpga},<audio/*>
            \ {Play using mpv} mpv --no-video %f %s,
            \ {Play using vlc} vlc %f,
            \ {Play using ffplay} ffplay -nodisp -hide_banner -autoexit %c,

fileviewer {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
            \*.aac,*.mpga},<audio/*>
            \ ffprobe -hide_banner -pretty %c 2>&1,

" Video
filetype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
            \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
            \*.as[fx],*.unknown_video},<video/*>
            \ {Play using mpv} mpv %f,
            \ {Play using vlc} vlc %f,
            \ {Play using ffplay} ffplay -fs -hide_banner -autoexit %f,

fileviewer {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
            \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
            \*.as[fx],*.unknown_video},<video/*>
            \ ffprobe -hide_banner -pretty %c 2>&1,

" Web
filetype {*.xhtml,*.html,*.htm},<text/html>
            \ {Open in neovim} nvim %f,
            \ {Open in vim} vim %f,
            \ {Open in vi} vi %f,
            \ {View in default browser} o %f,
            \ {Open with firefox} firefox %f &,
            \ {Open with brave-browser} brave-browser %f &,
            \ {Open with chromium-browser} chromium-browser %f &,
            \ {Open with chrome} google-chrome %f &,

" Object
filetype {*.o},<application/x-object> nm %f | less

" Man page
filetype {*.[1-8]},<text/troff> man ./%c

fileviewer {*.[1-8]},<text/troff> man ./%c | col -b

" Image
filetype {*.svg,*.svgz},<image/svg+xml>
            \ {Edit in Inkscape} inkscape %f,
            \ {View in Inkview} inkview %f,
            \ {View in default image viewer} open %f,

filetype {*.cr2}
            \ {Open in Darktable} darktable %f,
            \ {Open in RawTherapee} rawtherapee %f,

filetype {*.xcf} {Open in GIMP} gimp %f,

filetype {*.kra} {Open in Krita} krita %f,

filetype {*.blend} {Open in Blender} blender %c,

filetype {*.sh3d} {Open in Sweet Home 3D} sweethome3d %c:p,

filetype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
            \ {View in feh} feh %f,
            \ {View in ImageMagick} display %f,
            \ {View in default image viewer} open %f,

fileviewer {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*> identify %f

" OpenRaster
filetype {*.ora} {Edit in MyPaint} mypaint %f,

" Mindmap
filetype {*.vym} {Open with VYM} vym %f &,

" MD5
filetype {*.md5} {Check MD5 hash sum} md5sum -c %f %S,

" SHA1
filetype {*.sha1} {Check SHA1 hash sum} sha1sum -c %f %S,

" SHA256
filetype {*.sha256} {Check SHA256 hash sum} sha256sum -c %f %S,

" SHA512
filetype {*.sha512} {Check SHA512 hash sum} sha512sum -c %f %S,

" GPG signature
filetype {*.asc},<application/pgp-signature>
            \ {Check signature} !!gpg --verify %c,

" Torrent
filetype {*.torrent},<application/x-bittorrent> transmission-gtk %f &

fileviewer {*.torrent},<application/x-bittorrent> transmission-show -v %c

" FuseZipMount
filetype {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},
            \<application/zip,application/java-archive>
            \ {Mount with fuse-zip}
            \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
            \ {View contents} unzip -l %f | less,
            \ {Extract here} unzip %c,

fileviewer {*.zip,*.jar,*.war,*.ear,*.oxt} unzip -l %f

" ArchiveMount
filetype {*.cpio,*.cpio.gz,*.rpm,*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,
            \*.txz,*.tar.zst,*.tzst},
            \<application/x-cpio,application/x-rpm,application/x-tar>
            \ {Mount with archivemount}
            \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,

fileviewer {*.tgz,*.tar.gz} tar -tzf %c

fileviewer {*.tar.bz2,*.tbz2} tar -tjf %c

fileviewer {*.tar.xz,*.txz} tar -tJf %c

fileviewer {*.tar.zst,*.tzst} tar -t --zstd -f %c

fileviewer {*.tar},<application/x-tar> tar -tf %c

fileviewer {*.cpio},<application/x-cpio> cpio -t < %c

fileviewer {*.rpm},<application/x-rpm> rpm -q --list %c%q 2> /dev/null

" Rar2FsMount and rar archives
filetype {*.rar},<application/x-rar>
            \ {Mount with rar2fs}
            \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,

fileviewer {*.rar},<application/x-rar> unrar v %c

" IsoMount
filetype {*.iso},<application/x-iso9660-image>
            \ {Mount with fuseiso}
            \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
filetype {*.ssh}
            \ {Mount with sshfs}
            \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" FtpMount
filetype {*.ftp}
            \ {Mount with curlftpfs}
            \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Fuse7z and 7z archives
filetype {*.7z},<application/x-7z-compressed>
            \ {Mount with fuse-7z}
            \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,

fileviewer {*.7z},<application/x-7z-compressed> 7z l %c

" Office files
filetype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt},
            \<application/vnd.openxmlformats-officedocument.*,
            \application/msword,application/vnd.ms-excel>
            \ libreoffice %f &

fileviewer {*.doc},<application/msword> catdoc %c

fileviewer {*.docx},<application/vnd.openxmlformats-officedocument.wordprocessingml.document>
            \ docx2txt.pl %f -

" TuDu files
filetype {*.tudu} tudu -f %c

" Directories
filextype {*/},{.*/}
            \ {View in nautilus} nautilus %f &,
            \ {View in default file explorer} open %f &,

fileviewer {*/},{.*/} tree -aCI .git/ -I node_modules/ -I dist/ --gitignore --nolinks %c

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
" https://github.com/vifm/vifm/issues/404
fileviewer *[^/] bat --color always --wrap never --pager never %c -p

" Displaying pictures in terminal
" fileviewer *.jpg,*.png shellpic %c

" " Open all other files with default system programs (you can also remove all
" " :file[x]type commands above to ensure they don't interfere with system-wide
" " settings).  By default all unknown files are opened with 'vi[x]cmd'
" " uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
filetype * o

" Panel configuration example {{{1
" Customize view columns a bit (enable ellipsis for truncated file names)
" set viewcolumns=-{name}..,6{}.

" Show vertical border
" set fillchars=vborder:│

" Filter-out build and temporary files
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}

" Sample keyboard mappings {{{1
" Start shell in current directory
nnoremap S :shell<cr>

" Display sorting dialog
nnoremap s :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Scroll preview window
nnoremap <C-f> <C-w>w15j<C-w>w
nnoremap <C-b> <C-w>w15k<C-w>w

" moving cursor in another pane
nnoremap <silent> <A-j> <space>j<space>
nnoremap <silent> <A-k> <space>k<space>
nnoremap <silent> <A-h> <space>h<space>
nnoremap <silent> <A-l> <space>l<space>

nnoremap > <C-w>>
nnoremap < <C-w><

noremap <silent> <C-w>h :if paneisat('left')     | execute '!tmux select-pane -L %i' | else | execute 'wincmd h' | endif<cr>
noremap <silent> <C-w>j :if paneisat('bottom')   | execute '!tmux select-pane -D %i' | else | execute 'wincmd j' | endif<cr>
noremap <silent> <C-w>k :if paneisat('top')      | execute '!tmux select-pane -U %i' | else | execute 'wincmd k' | endif<cr>
noremap <silent> <C-w>l :if paneisat('right')    | execute '!tmux select-pane -R %i' | else | execute 'wincmd l' | endif<cr>
qnoremap <silent> <C-w>h q:if paneisat('right')  | execute '!tmux select-pane -L %i' | else | execute 'wincmd h' | endif<cr>
qnoremap <silent> <C-w>j q:if paneisat('top')    | execute '!tmux select-pane -D %i' | else | execute 'wincmd j' | endif<cr>
qnoremap <silent> <C-w>k q:if paneisat('bottom') | execute '!tmux select-pane -U %i' | else | execute 'wincmd k' | endif<cr>
qnoremap <silent> <C-w>l q:if paneisat('left')   | execute '!tmux select-pane -R %i' | else | execute 'wincmd l' | endif<cr>

" Open file in new instance of neovim
nnoremap o :!nvim %f<cr>
" Open file in existing instance of neovim if possible
if executable("nvr")
    nnoremap O :!nvr --remote %f<cr>
" Fallback to creating a new instance
else
    nmap O o
endif

" yank current directory path into the clipboard
nnoremap yd :!echo -n %d | cb %i<cr>
            \:echo expand('%"d') "is yanked to clipboard"<cr>
" yank current file path into the clipboard
nnoremap yf :!echo -n %c:p | cb %i<cr>
            \:echo expand('%"c:p') "is yanked to clipboard"<cr>
" yank current filename without path into the clipboard
nnoremap yn :!echo -n %c | cb %i<cr>
            \:echo expand('%"c') "is yanked to clipboard"<cr>
" yank root of current file's name into the clipboard
nnoremap yr :!echo -n %c:r | cb %i<cr>
            \:echo expand('%"c:r') "is yanked to clipboard"<cr>


" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" Open console in current directory
if $TERMINAL
    nnoremap \t :!$TERMINAL 2>/dev/null &<cr>
endif

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap \c :write | edit $MYVIFMRC | restart full<cr>

" toggle wrap setting on \w key
nnoremap <silent> \w :set invwrap<cr>

" faster search of files that start with a particular string
nnoremap f/ /^

" toggle view columns
set viewcolumns=*{name}..,6{}.
command! toggleview
        \ :if &viewcolumns == '*{name}..,6{}.'
        \ |    set viewcolumns=*{name}.,10{perms},12{uname},-7{gname},10{size}.,20{mtime}
        \ |else
        \ |set viewcolumns=*{name}..,6{}.
        \ |endif
nnoremap \v :toggleview<cr>

" toggle between sorting: by name <--> by size <--> by mtime
command! togglesort
         \ :if &sort == '-size,+name'
         \ |    set sort=+mtime
         \ |    echo 'Sorted by modification date'
         \ |elseif &sort == '+name'
         \ |    set sort=-size
         \ |    echo 'Sorted by size'
         \ |else
         \ |    set sort=+name
         \ |    echo 'Sorted by name'
         \ |endif
nnoremap <silent> \s :togglesort<cr>

" Midnight commander alike mappings
" Open current directory in the other pane
nnoremap <A-s> :sync<cr>
" Open directory under cursor in the other pane
nnoremap <A-o> :sync %c<cr>
" Swap panes
nnoremap <A-u> <c-w>x

" Various customization examples {{{1
" Use ag (the silver searcher) instead of grep
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

" Disable screen/tmux support
" if expand($TMUX) != ""
"     screen
" endif

" Miscellaneous {{{1
command! FZFfind : set noquickview
        \| let $FZF_PICK = term('fd | fzf-tmux -p 80% 2>/dev/tty')
        \| if $FZF_PICK != ''
        \|  execute system('[ -f "$FZF_PICK" ] && echo goto || echo cd')
        \     fnameescape($FZF_PICK)
        \| endif

nnoremap <A-f> :FZFfind<cr>

nnoremap <C-a> ggvG<cr>
nnoremap <A-i> <c-g>

" create new tab
nnoremap <C-t> :tabnew<cr>:view!<cr>

" switch to tab to the left
nnoremap [t :tabprevious<cr>:view!<cr>

" switch to tab to the right
nnoremap ]t :tabnext<cr>:view!<cr>

nnoremap - :qa<cr>

" Devicons require a patched font (or wezterm which ships with them)
if expand($NERD_ICONS) != "0" && (expand($NERD_ICONS) == "1" || expand($WEZTERM_PANE) != "")
  source ~/.config/vifm/scripts/icons.vifm
endif

" load local config if it exists
if filereadable(expand("$HOME/.config/vifm/vifmrc.local"))
    source ~/.config/vifm/vifmrc.local
endif
