[include]
    ; https://github.com/dandavison/delta
    path = ~/.config/git/delta.gitconfig

[github]
    user = benelan

[user]
    name = Ben Elan
    email = no-reply@benelan.dev
    signingKey = 4675D4844DB91AC6849FF5C10E54F3EFE936CE58

[commit]
    template = ~/.config/git/message
    gpgSign = true

[core]
    excludesfile = ~/.dotfiles/assets/templates/.gitignore
    ; Disable line endings output conversion.
    autocrlf = input

    ; Treat spaces before tabs and all kinds of trailing whitespace as an error.
    ; [default] trailing-space: looks for spaces at the end of a line
    ; [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    ; Speed up commands involving untracked files such as `git status`.
    ; See --untracked-cache in https://git-scm.com/docs/git-update-index
    untrackedCache = true

[credential "https://github.com"]
    helper =
    ; Use the GitHub CLI for authenticating git.
	helper = !/usr/bin/gh auth git-credential

[credential "https://gist.github.com"]
    helper =
    helper = !/usr/bin/gh auth git-credential

[apply]
    ; Detect whitespace errors when applying a patch.
    whitespace = fix

[branch]
    ; Show most recently changed branches first.
    sort = -committerdate
    autosetuprebase = always

[color]
    ; Use colors in Git commands when possible
    ui = auto
    interactive = auto
    branch = true
    diff = true
    grep = true
    log = true
    status = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "status"]
    added = green
    changed = yellow
    untracked = magenta
    removed = red

[color "diff"]
    meta = yellow bold
    frag = magenta bold ; line info
    old = red           ; deletions
    new = green         ; additions

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[color "interactive"]
    help = red
    prompt = blue

[diff]
    algorithm = patience
    tool = vimdiff
    colorMoved = default
    keepBackup = false
    ; Detect copies as well as renames.
    renames = copies
    renameLimit = 9328
    compactionHeuristic = true

[diff "bin"]
    ; Use `hexdump` to diff binary files.
    textconv = hexdump -v -C

[difftool "fugitive"]
    cmd = vim -f +'packadd vim-fugitive | Gvdiffsplit!' $MERGED
    prompt = false

[merge]
    ; Include summaries of merged commits in newly created merge commit messages.
    log = true
    keepBackup = false
    tool = vimdiff ; alternatives: nvimdiff or fugitive

[mergetool]
    keepBackup = false
    keepTemporaries = true

[mergetool "vimdiff"]
    ; https://git-scm.com/docs/vimdiff
    ; The layout option is available since git v2.37
    layout = LOCAL,MERGED,REMOTE+LOCAL,BASE,REMOTE/MERGED

[mergetool "fugitive"]
    ; https://github.com/tpope/vim-fugitive
    cmd = nvim -f +DiagnosticToggle! \
        +'nnoremap <leader>h :diffget //2<CR> \
        | nnoremap <leader>l :diffget //3<CR> \
        | nnoremap <leader>H :%diffget //2<CR> \
        | nnoremap <leader>L :%diffget //3<CR> \
        | nnoremap <leader>w <CMD>w<CR><CMD>qa<CR> \
        | Gvdiffsplit!' $MERGED

[status]
    ; Enable submodule summary of commits.
    submoduleSummary = true

[help]
    ; Correct and execute mistyped commands.
    ; autocorrect = 1

[advice]
    addIgnoredFile = false
    statusHint = false

[log]
    date = human-local

[format]
    ; man --pager='less -p "^PRETTY FORMATS"' git-log
    pretty = format:"%C(green)%h %C(yellow)%ad %C(cyan)%an %C(reset)%s %C(auto)%d%C(reset)"
    ; pretty = format:"%C(blue)%h %Cgreen%an%Creset %C(yellow)%cd%Creset %C(auto)%d %s %+b %n%n %Creset"

[init]
    defaultBranch = main

; URL shorthands
[url "git@github.com:"]
    insteadOf = "gh:"
    insteadOf = "github:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git@gist.github.com:"]
    insteadOf = "gst:"
    insteadOf = "gist:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[alias]
    a = add
    all = add --all
    au = add --update
    
    ; add unmerged files
    aum  = !"git ls-files --unmerged | cut -f2 | sort -u | xargs git add"

    ; interactively add unstaged files using fzf
    af = !git ls-files --modified | fzf --height 20% --reverse -m --ansi | xargs git add --verbose

    b = branch
    bd = branch -D
    buoc = !git branch -u origin/$(git symbolic-ref --short HEAD)

    ; delete multiple branches
    fbd = !git branch | fzf --multi | xargs git branch -D

    ; list branches with author names and the most recently created at the bottom
    bc = for-each-ref --format='%(color:cyan)%(authordate:format:%m/%d/%Y %I:%M %p) %(align:25,left)%(color:yellow)%(authorname)%(end) %(color:reset)%(refname:strip=3)' --sort=authordate refs/remotes

    c = commit --verbose
    call = commit --verbose --all
    cm = commit --verbose -m
    ca = commit --verbose --amend
    cane = commit --verbose --amend --no-edit

    ; use fzf to pick an unpushed commit to fixup and then autosquash
    cf = "!f() { \
        sha=$(git log @{push}.. --color=always --no-merges \
        --pretty=format:'%C(green)%h% C(yellow)%ad %C(auto)%d %C(reset)%s %C(blue)<%an>%C(reset)' \
        | fzf-tmux --no-sort --ansi \
        | awk '{print $1}') \
        && git commit --fixup $sha \
        && git -c sequence.editor=: rebase --autosquash --autostash -i $sha~1 \
    }; f"

    ; same as above but pick an unmerged (to default branch) commit.
    ; likely requires a force push, hence the extra 'f'
    cff = "!f() { \
        sha=$(git log $(git bdefault)..HEAD --color=always --no-merges \
        --pretty=format:'%C(green)%h% C(yellow)%ad %C(auto)%d %C(reset)%s %C(blue)<%an>%C(reset)' \
        | fzf-tmux --no-sort --ansi \
        | awk '{print $1}') \
        && git commit --fixup $sha \
        && git -c sequence.editor=: rebase --autosquash --autostash -i $sha~1 \
    }; f"

    co = checkout
    cob = checkout -b
    com = !git checkout "$(git bdefault)"

    cl = clone

    cpk = cherry-pick

    d = diff
    ds = diff --staged
    dt = difftool

    ; edit the files changed locally
    e = !$EDITOR $(git diff --name-only HEAD)

    ; edit modified (unstaged) files
    em = !$(git var GIT_EDITOR) $(git ls-files --modified | sort -u)

    ; edit staged files
    es = !$(git var GIT_EDITOR) $(git ls-files --stage    | cut -f2 | sort -u)

    ; edit unmerged files (usually due to a merge conflict)
    eum = !$(git var GIT_EDITOR) $(git ls-files --unmerged | cut -f2 | sort -u)

    ; open Fugitive's difftool
    edf = !$EDITOR +'Git difftool -y'

    ; sync origin's default branch and edit the changed files
    eom = "!f() { default_branch=$(git bdefault); git fetch --prune --tags; git merge origin/$default_branch; $EDITOR $(git diff --name-only HEAD origin/$default_branch); }; f"

    f = fetch --all --prune --tags
    g = grep

    m = merge
    mm = !git merge "$(git bdefault)"
    mom = !git fetch && git merge "origin/$(git bdefault)"
    mt = mergetool --tool=fugitive

    p = push
    puoc = !git push --set-upstream origin $(git symbolic-ref --short HEAD)

    pl = pull --rebase --autostash
    plum = !git pull --rebase --autostash upstream "$(git bdefault)"

    r = reset
    rs = reset --soft
    rh = reset --hard
    pristine = !git reset --hard && git clean -dfx

    rb = rebase --autostash --autosquash
    rba = rebase --abort
    rbc = rebase --continue
    rbs = rebase --skip
    rbu = rebase --autostash --autosquash --interactive @{upstream}
    rbom = "!f() { \
        default_branch="$(git bdefault)" && \
        git fetch origin "$default_branch" && \
        git rebase --autostash --autosquash "origin/$default_branch" && \
        git update-ref "refs/heads/$default_branch" "origin/$default_branch"; }; f"

    s = status --short

    st = stash
    sta = stash apply
    stl = stash list
    std = stash drop
    stpo = stash pop
    stpu = stash push

    sm = submodule
    smu = submodule update --init --recursive

    t = tag
    tnext = name-rev --tags --name-only
    treset = !git tag -l | xargs git tag -d && git fetch --tags

    tf = !git tag --sort -version:refname | fzf --reverse --multi \
        --bind='ctrl-x:execute(git tag -d {})+accept' \
        --bind='ctrl-o:execute(git checkout {})+accept' \
        --header='(delete:ctrl-x) (checkout:ctrl-o)' \
        --preview 'git show --color=always {} | head -'$LINES

    w = worktree
    wa = worktree add
    wr = worktree remove
    wl = worktree list
    wp = worktree prune

    ls = ls-files

    l = log
    lg = log --graph

    ; log graph with relative dates
    lgr = log --graph --abbrev-commit --date=relative --pretty=format:'%C(bold)%C(blue)%h%Creset%C(auto)%d%Creset %s %C(yellow)<%an> %C(cyan)(%cr)%Creset'

    ; log with full commit messages
    lmsg = log --stat --pretty=format:'%C(blue)%h %Cgreen%an%Creset %C(yellow)%cd%Creset %C(auto)%d %s%+b%n%Creset'

    ; log unpushed commits
    lup = log --branches --not --remotes --no-walk --decorate --oneline

    ; log unmerged commits
    lum = !git log "$(git bdefault)" ^HEAD

    new = log HEAD@{1}..HEAD@{0}

    ; log the last n commits, e.g. $ git ln 69
    ln = "!f() { git log -n \"$1\" --graph --abbrev-commit; }; f"

    ; find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    ; find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    ; find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    ; find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    ; checkout commit by fuzzy finding w/ fzf
    fcoc = !git log --pretty=oneline --abbrev-commit --reverse | fzf --tac +s +m -e | sed "s/ .*//" | xargs git checkout

    ; get commit sha by fuzzy finding w/ fzf
    fsha = !git log --color=always --pretty=oneline --abbrev-commit --reverse | fzf --tac +s +m -e --ansi --reverse | sed "s/ .*//"

    ; Pull in remote changes for the current repository and all its submodules.
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive

    ; switch to a branch, creating it if necessary.
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    ; add/remove file(s) to/from index
    hide = update-index --assume-unchanged
    unhide = update-index --no-assume-unchanged

    ; remove a tag by name and recreate it on a specified commit
    ; arg1: tag name to recreate on different commit (required)
    ; arg2: commit to tag (optional, defaults to HEAD)
    ; arg3: message for the tag (optional, defaults to arg1)
    retag = "!f() { [ -z "$1" ] && echo 'Error: provide a tag name' && return || \
      git tag -d \"$1\" && \
      git tag -a \"$1\" -m \"${3:-$1}\" \"${2:-HEAD}\" && \
      printf \"\nDo you want to 'git push origin %s --force'?\n[y/N]: \" \"$1\" && \
      read -r should_push && \
      case \"$should_push\" in [yY]*) git push origin \"$1\" --force ;; esac; }; f"

    ; credit an author on the latest commit.
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    ; list contributors with number of commits.
    contributors = shortlog --summary --numbered

    ; get the default branch
    bdefault = "!f() { echo $(if [ $(git config --get core.bare) = 'true' ]; then git bdefault-bare; else git bdefault-fast; fi); }; f"
    bdefault-fast = "!f() { basename $(git rev-parse --abbrev-ref origin/HEAD);}; f"
    bdefault-bare = "!f() { git remote show $(git remote | grep -Eo '(upstream|origin)' | tail -1) | grep 'HEAD branch' | cut -d' ' -f5; }; f"

    ; list of local branches and their most recent commit
    blist = branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate

    # Sync with origin's default branch by rebasing, then commit and push all changes.
    # The first argument is the path to the git repo, defaults to the current directory.
    # The second argument is the globs to add or any `git add` flags, defaults to "--all".
    # The third argument is the commit message, defaults to "chore: sync changes".
    sync-changes =  "!f() { \
        branch=\"$(git -C \"${1:-$PWD}\" bdefault)\" && \
        path=\"${1:-$PWD}\"  && \
        echo "repo path: $path" && echo "default branch: $branch" && \
        git -C \"$path\" fetch origin \"$branch\" && \
        git -C \"$path\" rebase --autostash --autosquash \"origin/$branch\" && \
        git -C \"$path\" update-ref \"refs/heads/$branch\" \"origin/$branch\" && \
        git -C \"$path\" add ${2:---all} && \
        git -C \"$path\" commit -m \"${3:-chore: sync changes}\" && \
        git -C \"$path\" push; }; f"

    ;----------------------------------------------------------------------------
    ; The following aliases are yoinked from https://github.com/GitAlias/gitalias
    ;----------------------------------------------------------------------------

    ll = log --graph --topo-order --date=short --abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'

    lll = log --graph --topo-order --date=iso8601-strict --no-abbrev-commit --abbrev=40 --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn <%ce>]%Creset %Cblue%G?%Creset'

    ; Ignore all untracked files by appending them to .gitignore:
    ignore-untracked = "!git status --short | grep -P \"^\\t\" | grep -vF .gitignore | sed \"s/^\\t//\" >> .gitignore"

    ; resolve merge conflicts by file, accepts globs as args
    ours   = !"f() { git checkout --ours   $@ && git add $@; }; f"
    theirs = !"f() { git checkout --theirs $@ && git add $@; }; f"

    ; Work In Progress: from https://gist.github.com/492227 and VonC on stackoverflow.
    ; This enables a quick way to add all new and modified files to the index,
    ; while cleaning the index from the files removed from the working tree;
    ; this cleaning will facilitate a rebase, because there won't be any conflict
    ; due to an "unclean" working directory (not in sync with the index).
    ; The unwip will restore the deleted files to the working tree.
    wip = !"git add --all; git ls-files --deleted -z | xargs -0 git rm; git commit --message='chore: WIP'"
    unwip = !"git log -n 1 | grep -q -c 'chore: WIP' && git reset HEAD~1"


    ; Take a snapshot of your current working tree without removing changes.
    ; This is handy for refactoring where you can't quite fit what you've done
    ; into a commit but daren't stray too far from now without a backup.
    ;
    ; Running this:
    ;    $ git snapshot
    ;
    ; Creates this stash:
    ;    stash@{0}: On feature/handy-git-tricks: snapshot: Mon Apr 8 12:39:06 BST 2013
    ;
    ; And seemingly no changes to your working tree.
    snapshot = !git stash push "chore: SNAPSHOT $(date)" && git stash apply "stash@{0}"

    ; List all issues mentioned in commit messages between range of commits
    ;
    ; Best used with tags:
    ;    $ git issues v1.0..v1.1
    ;
    ; But will work with any valid commit range:
    ;    $ git issues master..HEAD
    issues = !"sh -c \"git log $1 --oneline | grep -o \\\"#[0-9]\\+\\\" | sort -u\""
