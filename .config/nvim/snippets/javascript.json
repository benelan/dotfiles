{
  "fetch json": {
    "prefix": "fjson",
    "body": [
      "fetch(\"${1:url}\")",
      "\t.then(response => response.json())",
      "\t.then(data => ${2:console.log(data)})",
      "\t.catch(error => ${3:console.error(error)});",
      "$0"
    ],
    "description": "Fetch request with JSON response and error handling"
  },
  "then/catch": {
    "prefix": "thenc",
    "body": [
      ".then((result) => {",
      "\t${2:console.log(result)}",
      "}).catch((error) => {",
      "\t${3:console.error(error)}",
      "});",
      "$0"
    ],
    "description": "Add the .then and .catch methods to handle promises"
  },
  "console.assert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object});\n$0",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "console.count": {
    "prefix": "cc",
    "body": "console.count(${1:label});\n$0",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
  "console.debug": {
    "prefix": "cdb",
    "body": "console.debug(${1:object});\n$0",
    "description": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari"
  },
  "console.group": {
    "prefix": "cgs",
    "body": "console.group('${1:label}');\n$0",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "console.groupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd();\n$0",
    "description": "Closes out the corresponding console.group()."
  },
  "console.trace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object});\n$0",
    "description": "Prints a stack trace from the point where the method was called"
  },
  "console.info": {
    "prefix": "cin",
    "body": "console.info(${1:object});\n$0",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "console.table": {
    "prefix": "cta",
    "body": "console.table(${1:object});\n$0",
    "description": "Displays tabular data as a table."
  },
  "console.time": {
    "prefix": "cts",
    "body": "console.time(${1:object});\n$0",
    "description": "Sets starting point for execution time measurement"
  },
  "console.timeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd(${1:object});\n$0",
    "description": "Sets end point for execution time measurement"
  },
  "innerHTML": {
    "prefix": "ih",
    "body": ["${1:document}.innerHTML = '${2:element}';\n$0"],
    "description": "Code snippet for `innerHTML`"
  },
  "textContent": {
    "prefix": "tc",
    "body": ["${1:document}.textContent = '${2:content}';\n$0"],
    "description": "Code snippet for `textContent`"
  }
}
