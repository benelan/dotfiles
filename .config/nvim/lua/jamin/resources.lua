local M = {}

M.filetypes = {
  excluded = {
    "-",
    "Outline",
    "OverseerList",
    "OversserForm",
    "TelescopePreview",
    "TelescopePrompt",
    "TelescopeResults",
    "Trouble",
    "chatgpt-input",
    "checkhealth",
    "cmp_menu",
    "copilot-chat",
    "dap-preview",
    "dap-repl",
    "dap-terminal",
    "dapui_breakpoints",
    "dapui_console",
    "dapui_hover",
    "dapui_scopes",
    "dapui_stacks",
    "dapui_watches",
    "floggraph",
    "fugitive",
    "fugitiveblame",
    "harpoon",
    "help",
    "lazy",
    "lspinfo",
    "man",
    "mason",
    "neotest-output",
    "neotest-output-panel",
    "neotest-summary",
    "netrw",
    "octo",
    "qf",
    "undotree",
  },
  writing = {
    "asciidoc",
    "changelog",
    "chatgpt-input",
    "copilot-chat",
    "gitcommit",
    "mail",
    "markdown",
    "octo",
    "org",
    "pdf",
    "rmd",
    "rrst",
    "rst",
    "text",
  },
  webdev = {
    "astro",
    "html",
    "javascript",
    "javascriptreact",
    "svelte",
    "typescript",
    "typescriptreact",
    "vue",
  },
  marker_folds = {
    "",
    "conf",
    "text",
    "sh",
    "tmux",
    "vim",
    "vifm",
  },
}

M.lsp_servers = {
  "astro",
  "bashls",
  "cssls",
  -- "docker_compose_language_service",
  "dockerls",
  -- "efm",
  -- "emmet_language_server",
  "eslint",
  -- "gopls",
  -- "graphql",
  "html",
  "jsonls",
  "lua_ls",
  "marksman",
  -- "mdx_analyzer",
  -- "pyright",
  -- "rust_analyzer",
  -- "sqlls",
  "svelte",
  "tailwindcss",
  "taplo",
  -- "typos_lsp",
  -- "tsserver",
  "vimls",
  "volar",
  "yamlls",
  "zk",
}

M.mason_packages = {
  "actionlint", -- github action linter
  "fixjson", -- json formatter
  "hadolint", -- dockerfile linter
  "markdownlint", -- markdown linter and formatter
  "prettier", -- everything formatter
  "shellcheck", -- shell linter
  "shfmt", -- shell formatter
  "stylelint", -- css/scss linter
  "stylua", -- lua formatter
}

M.treesitter_parsers = {
  "astro",
  "bash",
  "css",
  "diff",
  "dockerfile",
  "git_rebase",
  "gitcommit",
  "go",
  -- "gomod",
  -- "gosum",
  -- "gowork",
  "graphql",
  "html",
  "http",
  -- "ini",
  "javascript",
  "jsdoc",
  "json",
  "json5",
  "jsonc",
  -- "latex",
  "lua",
  "luadoc",
  "luap",
  "make",
  "markdown",
  "markdown_inline",
  -- "perl",
  -- "printf",
  "python",
  "query",
  "regex",
  -- "rst",
  -- "rust",
  "scss",
  "sql",
  "svelte",
  "toml",
  "tsx",
  "typescript",
  "vim",
  "vimdoc",
  "vue",
  "xml",
  "yaml",
}

M.path = {
  include = {
    ".",
    "",
    "src/**",
    "api/**",
    "lua/**",
    "utils/**",
    "scripts/**",
    "support/**",
    "server/**",
    "packages/**",
    "apps/**",
    "examples/**",
    "docs/**",
    "tests/**",
    ".github/**",
    "static",
    "config",
    "public",
  },
  suffixes = {
    ".db",
    ".doc",
    ".gif",
    ".gpg",
    ".ico",
    ".jpeg",
    ".jpg",
    ".lock",
    ".odt",
    ".orig",
    ".pdf",
    ".png",
    ".tmp",
  },
  ignore = {
    "*.7z",
    "*.avi",
    "*.docx",
    "*.filepart",
    "*.flac",
    "*.gifv",
    "*.gz",
    "*.iso",
    "*.m4a",
    "*.mkv",
    "*.mp3",
    "*.mp4",
    "*.min.*",
    "*.ogg",
    "*.pbm",
    "*.ppt",
    "*.psd",
    "*.pyc",
    "*.rar",
    "*.sqlite*",
    "*.swp",
    "*.tar",
    "*.tga",
    "*.ttf",
    "*.wav",
    "*.webm",
    "*.xbm",
    "*.xcf",
    "*.xls",
    "*.xlsx",
    "*.xpm",
    "*.xz",
    "*.zip",
    ".git/*",
    "build/*",
    "dist/*",
    "node_modules/*",
  },
}

local i = function(icon, backup) return vim.g.use_devicons and icon or backup or "" end

M.icons = {
  ui = {
    docs = i("Ó™§ ", "üñπ "),
    -- utf8 icons don't need fallbacks
    prompt = "‚ù± ",
    select = "‚û§  ",
    play = "‚Øà ",
    skip = "‚è©Ô∏é",
    x = "‚úò ",
    checkmark = "‚úî ",
    question_mark = "Ôºü",
    square = "‚ñ† ",
    box = "‚òê ",
    box_checked = "‚òë ",
    box_crossed = "‚òí ",
    box_dot = "üûî ",
    circle = "‚óè ",
    collapsed = "üûÇ ",
    expanded = "üûÉ ",
    eol = "‚§∂",
    linebreak = "‚Ü≥ ",
    nbsp = "‚ê£",
    extends = "¬ª",
    precedes = "¬´",
    ellipses = "‚Ä¶  ",
    dot = "¬∑",
    dot_outline = "‚ó¶",
    separator = "‚îä",
    fill_slash = "‚ï±",
    fill_shade = "‚ñë",
    fill_solid = "‚ñà",
    speech_bubble = "üó© ",
    pencil = "üñâ ",
    pin = "üñà ",
    clock = "‚è≤ ",
    bell = "üï≠ ",
    map = "üó∫ ",
    key = "üóù ",
  },
  lsp_kind = {
    Array = i("Ó™ä "),
    Boolean = i("Ó™è "), -- Û∞®ô ‚ó©
    Class = i("Ó≠õ "), -- ÓÆ∫  ÓÆπ  ÔÜ≥
    Codeium = i("Û∞ò¶ "),
    Color = i("Ó≠ú "),
    Comment = i("ÔÉ• "),
    Control = i("Ó©® "),
    Component = i("ÔÑ° "),
    Conditional = i("Ôäú "),
    Constant = i("Û∞≠∏ "),
    Constructor = i("Ó≠• "), -- Ó™å
    Copilot = i("ÔÑì "), -- ÓÆ°  Ó¨Ä
    Enum = i("Ó™ï "),
    EnumMember = i("Ó≠û "),
    Error = i("Û∞õâ "), -- ÓØ¶
    Event = i("Ó™Ü "),
    Field = i("Û∞ìΩ "), -- Ó≠ü
    File = i("Ó©ª "),
    Folder = i("ÔÑï "),
    Fragment = i("ÔÑ° "),
    Function = i("Ó™å "), -- Û∞°±
    Interface = i("ÔÉ® "), -- Ó≠°
    Key = i("Û∞∑ñ "), -- Û∞åã  Ó¨ë üóù
    Keyword = i("Ó¨ë "), -- Ó≠¢
    Macro = i("ÓÆß "),
    TypeAlias = i("Óö≤ "),
    Method = i("Ó™å "),
    StaticMethod = i("Ó™å "),
    Module = i("ÔÜ≤ "), -- Û∞∂Æ
    Namespace = i("Û∞¶Æ "), --   Ó™ã
    Null = i("Û∞ü¢ "),
    Number = i("Ó™ê "),
    Object = i("Û∞Ö© "),
    Operator = i("Ó≠§ "),
    Package = i("ÔÜ≤ "), -- Ó¨©
    Property = i("Û∞ìΩ "), -- Ó≠•
    Reference = i("Ó¨∂ "), -- ÔÇé
    Snippet = i("ÔÉÑ "),
    Spell = i("Û∞ìÜ "),
    String = i("Û±Äç "), -- Ó™ì  ÓÆç
    Struct = i("Ó™ë "),
    Text = i("Û∞àç "), -- Û∞¶®
    TypeParameter = i("Ó™í "),
    Parameter = i("Ó™í "),
    Unit = i("Ó™ñ "),
    Value = i("Ó≠£ "), -- Û∞†±
    Variable = i("Ó™à "),
    Fallback = i("ÓÆÖ "), -- Û∞íÖ  Û∞íâ
  },
  diagnostics = {
    [vim.diagnostic.severity.ERROR] = i("Û∞Öù ", "E"),
    [vim.diagnostic.severity.WARN] = i("Û∞Ä™ ", "W"),
    [vim.diagnostic.severity.INFO] = i("Û∞ãΩ ", "I"),
    [vim.diagnostic.severity.HINT] = i("Û∞∞Ä ", "H"),
  },
  debug = {
    breakpoint = i("Û∞Ü§ ", "B"),
    breakpoint_condition = i("Û±Ñ∂ ", "C"),
    breakpoint_rejected = i("Û∞ΩÖ ", "R"),
    logpoint = i("Û∞Ü£ ", "L"),
    stopped = i("Û∞øÖ ", "S"),
  },
  git = {
    branch = i("ÔÑ¶ "),
    added = i("Û∞úÑ ", "+"),
    changed = i("Û±óù ", "‚àó"),
    removed = i("Û∞õ≤ ", "‚Äí"),
  },
  progress = { "‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è" },
  border = "rounded", -- i({ "ü≠Ω", "‚ñî", "ü≠æ", "‚ñï", "ü≠ø", "‚ñÅ", "ü≠º", "‚ñè" }, "rounded"),
}

M.icons.test = {
  passed = i("Û∞ó° ", M.icons.ui.checkmark),
  running = i("Û∞Åö ", M.icons.ui.play),
  skipped = i("Û∞ç∑ ", M.icons.ui.skip),
  failed = i("Û∞Öö ", M.icons.ui.x),
  unknown = i("Û∞ò• ", M.icons.ui.question_mark),
  running_animated = M.icons.progress,
}

M.art = {
  bender_ascii = [[
          _
         ( )
          H
          H
         _H_
      .-'-.-'-.
     /         \
    |           |
    |   .-------'._     ,--------------------.
    |  / /  '.' '. \    | Hey lazy dev, want |
    |  \ \ @   @ / /    |   me to replace    |
    |   '---------'     |    all humans?     |
    |  .'-+-+-+|        ,--------------------'
    |  `.-+-+-+|    ---'
    |    """""" |
    '-.__   __.-'
         """
  ]],
  bender_dots = [[
                  ‚†ò‚°Ä Hey‚†Älazy dev, want ‚°ú
                   ‚†ë‚°Ä‚†Ä me to replace   ‚°ú
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚†ê‚£µ    ‚†à‚†¢‚¢Ñ‚†Äall humans? ‚£Ä‚†¥‚†ä
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚°Ä   ‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚†§‚†Ñ‚†í‚†à
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†Ä‚°á    ‚†Ä‚†ò‚£Ä‚†Ñ‚†ä‚†Å
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†ö‚†í‚†ä‚£≤‚†§‚£Ä
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†à‚†Ä‚†à‚†â‚†â‚†Ä‚†Ä‚†Ä‚†â‚¢Ü
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†á
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚°†‚†Ä‚†í‚†Ä‚†Ä‚†Ä‚†ê‚†í‚†í‚†à‚†ê‚††‚°Ä
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†ê‚†Ä‚†Ä‚°î‚†à‚†ô‚†õ‚†ª‚¢ø‚†ø‚†õ‚†â‚†ª‚£∑‚°ï‚°Ñ
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢†‚†Ä‚†Ä‚°Ä‚†∞‚†Ü‚†Ä‚†Ä‚¢à‚†∞‚†∂‚†Ä‚¢†‚£ø‚°ø‚°á
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ä‚†Ä‚†Ä‚†ë‚††‚†¨‚†Ö‚†ê‚†í‚†í‚†ì‚†≤‚¢∂‚†∂‚†Ø‚†â‚†Ç‚†Å
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚£Ä‚£Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚°Ä‚†Ä‚£Ä‚†∏
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚£å‚†Å‚†ì‚†í‚¢∫‚†í‚†í‚°ó‚†í‚°á
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°á‚†Ä‚†à‚†´‚†Ω‚†Ä‚¢∏‚†Ç‚†Ä‚†á‚†©‚†ì‚°Ñ
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°†‚†Ç‚†Å‚†à‚†ê‚†Ç‚†§‚†Ñ‚†Ä‚†Ä‚†Ä‚†§‚†§‚†Ñ‚†í‚†â‚†ê‚¢Ñ‚°Ä
 ‚†Ä‚†Ä‚†Ä‚†Ä‚°î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ò‚£Ñ
 ‚†Ä‚†Ä‚¢Ä‚†§‚†Ø‚†≠‚£í‚†Ç‚†§‚†Ñ‚¢Ä‚£Ä‚£Ä‚£Ä‚£Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†§‚†ê‚†ä‚†Å‚¢∏‚¢¢‚†Ä
 ‚†Ä‚¢∞‚£Å‚†§‚¢§‚°Ä‚†Ä‚¢£‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°Ä‚†Ä‚°Ñ‚†à‚°ß‚°Ä
 ‚°†‚†ã‚†Ä‚†Ä‚¢Ä‚†á‚†Ä‚¢∏‚†Ä‚¢∞‚†ã‚†Ä‚†í‚†í‚†í‚†í‚†í‚†í‚†Ç‚†â‚†â‚†Ä‚†Ä‚¢∏‚†Ä‚°á‚¢∞‚°ø‚†õ‚†Ü
 ]],
}

return M
