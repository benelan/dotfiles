return {
  "nvim-telescope/telescope.nvim", -- fuzzy finding tool
  cmd = "Telescope",
  dependencies = {
    "nvim-lua/plenary.nvim",
    {
      "nvim-telescope/telescope-fzf-native.nvim", -- fzf syntax for telescope
      build = "make",
    },
    -- "ThePrimeagen/git-worktree.nvim", -- Git worktree helper for bare repos
    -- "ThePrimeagen/harpoon", -- file marks on steroids
  },
  keys = function()
    -- when a count N is given to a telescope mapping called through the following
    -- function, the search is started in the Nth parent directory
    local function telescope_cwd(picker, args)
      require("telescope.builtin")[picker](
        vim.tbl_extend(
          "error",
          args or {},
          { cwd = ("../"):rep(vim.v.count) .. "." }
        )
      )
    end
    return {
      { "<leader>f", "<cmd>Telescope<cr>", desc = "Fuzzy find" },
      {
        "<leader>fo",
        "<cmd>Telescope oldfiles<cr>",
        desc = "Find recent file",
      },
      { "<leader>fb", "<cmd>Telescope buffers<cr>", desc = "Find buffer" },
      {
        "<leader>fr",
        "<cmd>Telescope resume<cr>",
        desc = "Resume previous fuzzying",
      },
      {
        "<leader>ff",
        function()
          telescope_cwd("find_files", { hidden = true })
        end,
        desc = "Find file",
      },
      {
        "<leader>ft",
        function()
          telescope_cwd "live_grep"
        end,
        desc = "Find text",
      },
      -- LSP keymaps
      -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
      {
        "<leader>lr",
        "<cmd>Telescope lsp_references<cr>",
        desc = "References",
      },
      {
        "<leader>lq",
        "<cmd>Telescope quickfix<cr>",
        desc = "Telescope quickfix",
      },
      {
        "<leader>lQ",
        "<cmd>Telescope quickfixhistory<cr>",
        desc = "Telescope quickfix history",
      },
      {
        "<leader>lt",
        "<cmd>Telescope lsp_type_definitions<cr>",
        desc = "Type definitions",
      },
      {
        "<leader>ld",
        "<cmd>Telescope diagnostics bufnr=0 theme=get_ivy<cr>",
        desc = "Buffer diagnostics",
      },
      {
        "<leader>lD",
        "<cmd>Telescope diagnostics<cr>",
        desc = "Workspace diagnostics",
      },
      {
        "<leader>ls",
        "<cmd>Telescope lsp_document_symbols<cr>",
        desc = "Document symbols",
      },
      {
        "<leader>lS",
        "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>",
        desc = "Workspace symbols",
      },
      -- Git keymaps
      -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
      {
        "<leader>fg",
        function()
          telescope_cwd "git_files"
        end,
        desc = "Find git files",
      },
      {
        "<leader>gb",
        "<cmd>Telescope git_branches<cr>",
        { "n", "x" },
        desc = "Checkout branch",
      },
      {
        "<leader>gc",
        "<cmd>Telescope git_bcommits<cr>",
        { "n", "x" },
        desc = "Checkout buffer commit",
      },
      {
        "<leader>gC",
        "<cmd>Telescope git_commits<cr>",
        { "n", "x" },
        desc = "Checkout commit",
      },
      {
        "<leader>gg",
        "<cmd>Telescope git_status<cr>",
        { "n", "x" },
        desc = "Checkout commit",
      },
    }
  end,
  opts = function()
    local icons = require("user.resources").icons.ui
    return {
      defaults = {
        prompt_prefix = icons.Prompt,
        selection_caret = icons.Select,
        multi_icon = icons.X,
        entry_prefix = "   ",
        layout_config = { prompt_position = "top" },
        sorting_strategy = "ascending",
        cycle_layout_list = { "horizontal", "vertical", "bottom_pane" },
        set_env = { ["COLORTERM"] = "truecolor" },
        file_ignore_patterns = {
          -- dev directories
          "%.git/",
          "node_modules/",
          "dist/",
          "build/",
          -- home directories
          "%.cache/",
          "%.var/",
          "%.mozilla/",
          "%.pki/",
          "%.cert/",
          "%.gnupg/",
          "%.ssh/",
          "~/Music",
          "~/Videos",
          "~/Steam",
          "~/Pictures",
          -- media files
          "%.mp3",
          "%.mp4",
          "%.mkv",
          "%.m4a",
          "%.m4p",
          "%.png",
          "%.jpeg",
          "%.avi",
          "%.ico",
          -- packages
          "%.7z",
          "%.dmg%",
          "%.gz",
          "%.iso",
          "%.jar",
          "%.rar",
          "%.tar",
          "%.zip",
          -- autogenerated files
          -- "%.tmp", "%.orig", "%.lock", "%.bak",
          -- compiled
          -- "%.com", "%.class", "%.dll", "%.exe", "%.o", "%.so", "%.map", "%.min.js",
        },
        vimgrep_arguments = {
          "rg",
          "--color=never",
          "--no-heading",
          "--with-filename",
          "--line-number",
          "--column",
          "--smart-case",
          "--trim",
          "--hidden",
          "--glob=!.git/",
          "--glob=!node_modules/",
        },
        mappings = {
          i = {
            ["<C-c>"] = require("telescope.actions").close,
            ["<Down>"] = require("telescope.actions").cycle_history_next,
            ["<Up>"] = require("telescope.actions").cycle_history_prev,
            ["<M-j"] = require("telescope.actions").cycle_history_next,
            ["<M-k>"] = require("telescope.actions").cycle_history_prev,
            ["<C-j>"] = require("telescope.actions").move_selection_next,
            ["<C-k>"] = require("telescope.actions").move_selection_previous,
            ["<tab>"] = require("telescope.actions").toggle_selection
              + require("telescope.actions").move_selection_next,
            ["<s-tab>"] = require("telescope.actions").toggle_selection
              + require("telescope.actions").move_selection_previous,
            ["<esc>"] = require("telescope.actions").close,
            ["<M-p>"] = require("telescope.actions.layout").toggle_preview,
            ["<M-m>"] = require("telescope.actions.layout").toggle_mirror,
            ["<A-l>"] = require("telescope.actions.layout").cycle_layout_next,
            ["<A-h>"] = require("telescope.actions.layout").cycle_layout_prev,
            ["<C-q>"] = function(...)
              require("telescope.actions").smart_send_to_qflist(...)
              require("telescope.actions").open_qflist(...)
            end,
          },
          n = {
            ["<C-j>"] = require("telescope.actions").move_selection_next,
            ["<C-k>"] = require("telescope.actions").move_selection_previous,
            ["<C-q>"] = function(...)
              require("telescope.actions").smart_send_to_qflist(...)
              require("telescope.actions").open_qflist(...)
            end,
          },
        },
      },
      pickers = {
        live_grep = { only_sort_text = true },
        buffers = {
          initial_mode = "normal",
          mappings = {
            i = { ["<C-d>"] = require("telescope.actions").delete_buffer },
            n = { ["dd"] = require("telescope.actions").delete_buffer },
          },
        },
        find_files = {
          mappings = {
            n = {
              -- change directory in normal mode
              ["<leader>cd"] = function(prompt_bufnr)
                local selection =
                  require("telescope.actions").state.get_selected_entry()
                local dir = vim.fn.fnamemodify(selection.path, ":p:h")
                require("telescope.actions").close(prompt_bufnr)
                vim.cmd(string.format("silent cd %s", dir))
              end,
            },
          },
        },
      },
    }
  end,
  config = function(_, opts)
    require("telescope").setup(opts)
    require("telescope").load_extension "fzf"
  end,
}
