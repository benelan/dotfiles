local status_ok, telescope = pcall(require, "telescope")
if not status_ok then return end

local telescope_actions = require "telescope.actions"
local telescope_action_layout = require "telescope.actions.layout"

telescope.setup {
  defaults = {
    prompt_prefix = " ",
    selection_caret = " ",
    layout_strategy = "horizontal",
    layout_config = {
      width = 0.9,
      height = 0.9,
      prompt_position = "top",
      horizontal = {
        preview_width = function(_, cols, _)
          if cols > 200 then
            return math.floor(cols * 0.4)
          else
            return math.floor(cols * 0.6)
          end
        end,
      },
      vertical = {
        anchor = "N",
        preview_height = 0.5
      },
    },
    sorting_strategy = "ascending",
    cycle_layout_list = {
      "horizontal", "vertical", "bottom_pane"
    },
    set_env = { ["COLORTERM"] = "truecolor" },
    file_ignore_patterns = {
      -- dev directories
      "%.git/", "node_modules/", "dist/", "build/",
      -- home directories
      "%.cache/", "%.var/", "%.mozilla/",
      "%.pki/", "%.cert/", "%.gnupg/", "%.ssh/",
      "~/Music", "~/Videos", "~/Steam", "~/Pictures",
      -- media files
      "%.mp3", "%.mp4", "%.mkv", "%.m4a", "%.m4p",
      "%.png", "%.jpeg", "%.avi", "%.ico",
      -- packages
      "%.7z", "%.dmg%", "%.gz", "%.iso", "%.jar", "%.rar", "%.tar", "%.zip",
      -- autogenerated files
      -- "%.tmp", "%.orig", "%.lock", "%.bak",
      -- compiled
      -- "%.com", "%.class", "%.dll", "%.exe", "%.o", "%.so", "%.map", "%.min.js",
    },
    vimgrep_arguments = {
      "rg",
      "--color=never",
      "--no-heading",
      "--with-filename",
      "--line-number",
      "--column",
      "--smart-case",
      "--trim",
      "--hidden",
      "--glob=!.git/",
    },
    mappings = {
      i = {
        ["<Down>"] = telescope_actions.cycle_history_next,
        ["<Up>"] = telescope_actions.cycle_history_prev,
        ["<C-j>"] = telescope_actions.move_selection_next,
        ["<C-k>"] = telescope_actions.move_selection_previous,
        ["<tab>"] = telescope_actions.toggle_selection + telescope_actions.move_selection_next,
        ["<s-tab>"] = telescope_actions.toggle_selection + telescope_actions.move_selection_previous,
        ["<esc>"] = telescope_actions.close,
        ["<M-p>"] = telescope_action_layout.toggle_preview,
        ["<M-m>"] = telescope_action_layout.toggle_mirror,
        ["<A-l>"] = telescope_action_layout.cycle_layout_next,
        ["<A-h>"] = telescope_action_layout.cycle_layout_prev,


      },
      n = {
        ["<C-j>"] = telescope_actions.move_selection_next,
        ["<C-k>"] = telescope_actions.move_selection_previous
      }
    },
  },
  pickers = {
    find_files = {
      mappings = {
        n = {
          -- change directory in normal mode
          ["<leader>cd"] = function(prompt_bufnr)
            local selection = telescope_actions.state.get_selected_entry()
            local dir = vim.fn.fnamemodify(selection.path, ":p:h")
            telescope_actions.close(prompt_bufnr)
            vim.cmd(string.format("silent cd %s", dir))
          end
        }
      }
    },
  },
  extensions = {
    project = {
      hidden_files = true,
      -- sync_with_nvim_tree = true,
      base_dirs = {
        "~/.dotfiles",
        "~/.config/nvim",
        "~/dev/work/calcite-components",
        "~/dev/work/calcite-components-examples",
        "~/dev/work/arcgis-esm-samples",
      }
    },
    file_browser = {
      -- theme = "ivy",
      hijack_netrw = false,
    },
  },
}

telescope.load_extension("fzf")
telescope.load_extension("project")
telescope.load_extension("file_browser")
