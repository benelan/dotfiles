local status_ok, telescope = pcall(require, "telescope")
if not status_ok then
  return
end

local telescope_actions = require "telescope.actions"
local telescope_action_layout = require "telescope.actions.layout"

telescope.setup {
  defaults = {
    prompt_prefix = " ❯  ", -- ❯ ❱ ⧽
    selection_caret = "  ", -- ➜  ⮞     🡺  🡲
    multi_icon = "✘  ", -- ✘  ✔
    entry_prefix = "   ",
    layout_strategy = "horizontal",
    layout_config = {
      width = 0.9,
      height = 0.9,
      prompt_position = "top",
      horizontal = {
        preview_width = function(_, cols, _)
          if cols > 200 then
            return math.floor(cols * 0.4)
          else
            return math.floor(cols * 0.6)
          end
        end,
      },
      vertical = { anchor = "N", preview_height = 0.5 },
    },
    sorting_strategy = "ascending",
    cycle_layout_list = { "horizontal", "vertical", "bottom_pane" },
    set_env = { ["COLORTERM"] = "truecolor" },
    file_ignore_patterns = {
      -- dev directories
      "%.git/",
      "node_modules/",
      "dist/",
      "build/",
      -- home directories
      "%.cache/",
      "%.var/",
      "%.mozilla/",
      "%.pki/",
      "%.cert/",
      "%.gnupg/",
      "%.ssh/",
      "~/Music",
      "~/Videos",
      "~/Steam",
      "~/Pictures",
      -- media files
      "%.mp3",
      "%.mp4",
      "%.mkv",
      "%.m4a",
      "%.m4p",
      "%.png",
      "%.jpeg",
      "%.avi",
      "%.ico",
      -- packages
      "%.7z",
      "%.dmg%",
      "%.gz",
      "%.iso",
      "%.jar",
      "%.rar",
      "%.tar",
      "%.zip",
      -- autogenerated files
      -- "%.tmp", "%.orig", "%.lock", "%.bak",
      -- compiled
      -- "%.com", "%.class", "%.dll", "%.exe", "%.o", "%.so", "%.map", "%.min.js",
    },
    vimgrep_arguments = {
      "rg",
      "--color=never",
      "--no-heading",
      "--with-filename",
      "--line-number",
      "--column",
      "--smart-case",
      "--trim",
      "--hidden",
      "--glob=!.git/",
      "--glob=!node_modules/",
    },
    mappings = {
      i = {
        ["<C-c>"] = telescope_actions.close,
        ["<Down>"] = telescope_actions.cycle_history_next,
        ["<Up>"] = telescope_actions.cycle_history_prev,
        ["<M-j"] = telescope_actions.cycle_history_next,
        ["<M-k>"] = telescope_actions.cycle_history_prev,
        ["<C-j>"] = telescope_actions.move_selection_next,
        ["<C-k>"] = telescope_actions.move_selection_previous,
        ["<tab>"] = telescope_actions.toggle_selection
          + telescope_actions.move_selection_next,
        ["<s-tab>"] = telescope_actions.toggle_selection
          + telescope_actions.move_selection_previous,
        ["<esc>"] = telescope_actions.close,
        ["<M-p>"] = telescope_action_layout.toggle_preview,
        ["<M-m>"] = telescope_action_layout.toggle_mirror,
        ["<A-l>"] = telescope_action_layout.cycle_layout_next,
        ["<A-h>"] = telescope_action_layout.cycle_layout_prev,
        ["<C-q>"] = function(...)
          telescope_actions.smart_send_to_qflist(...)
          telescope_actions.open_qflist(...)
        end,
      },
      n = {
        ["<C-j>"] = telescope_actions.move_selection_next,
        ["<C-k>"] = telescope_actions.move_selection_previous,
        ["<C-q>"] = function(...)
          telescope_actions.smart_send_to_qflist(...)
          telescope_actions.open_qflist(...)
        end,
      },
    },
  },
  pickers = {
    live_grep = { only_sort_text = true },
    buffers = {
      initial_mode = "normal",
      mappings = {
        i = { ["<C-d>"] = telescope_actions.delete_buffer },
        n = { ["dd"] = telescope_actions.delete_buffer },
      },
    },
    find_files = {
      mappings = {
        n = {
          -- change directory in normal mode
          ["<leader>cd"] = function(prompt_bufnr)
            local selection = telescope_actions.state.get_selected_entry()
            local dir = vim.fn.fnamemodify(selection.path, ":p:h")
            telescope_actions.close(prompt_bufnr)
            vim.cmd(string.format("silent cd %s", dir))
          end,
        },
      },
    },
  },
}

telescope.load_extension "fzf"

-------------------------------------------------------------------------------
-- Keymaps
-------------------------------------------------------------------------------
local telescope_builtin = require "telescope.builtin"

-- when a count N is given to a telescope mapping called through the following
-- function, the search is started in the Nth parent directory
local function telescope_cwd(picker, args)
  telescope_builtin[picker](
    vim.tbl_extend(
      "error",
      args or {},
      { cwd = ("../"):rep(vim.v.count) .. "." }
    )
  )
end

keymap("n", "<leader>f", "<cmd>Telescope<cr>", "Fuzzy Find")
keymap("n", "<leader>fo", "<cmd>Telescope oldfiles<cr>", "Find Recent File")
keymap("n", "<leader>fb", "<cmd>Telescope buffers<cr>", "Find Buffer")
keymap(
  "n",
  "<leader>fr",
  "<cmd>Telescope resume<cr>",
  "Resume Previous Fuzzying"
)
keymap("n", "<leader>ff", function()
  telescope_cwd("find_files", { hidden = true })
end, "Find File")
keymap("n", "<leader>ft", function()
  telescope_cwd "live_grep"
end, "Find Text")

-- LSP keymaps
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
keymap("n", "<leader>lr", "<cmd>Telescope lsp_references<cr>", "References")
keymap("n", "<leader>lq", "<cmd>Telescope quickfix<cr>", "Telescope Quickfix")
keymap(
  "n",
  "<leader>lQ",
  "<cmd>Telescope quickfixhistory<cr>",
  "Telescope Quickfix History"
)
keymap(
  "n",
  "<leader>lt",
  "<cmd>Telescope lsp_type_definitions<cr>",
  "Workspace Diagnostics"
)
keymap(
  "n",
  "<leader>ld",
  "<cmd>Telescope diagnostics bufnr=0 theme=get_ivy<cr>",
  "Buffer Diagnostics"
)
keymap(
  "n",
  "<leader>lD",
  "<cmd>Telescope diagnostics<cr>",
  "Workspace Diagnostics"
)
keymap(
  "n",
  "<leader>ls",
  "<cmd>Telescope lsp_document_symbols<cr>",
  "Document Symbols"
)
keymap(
  "n",
  "<leader>lS",
  "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>",
  "Workspace Symbols"
)

-- Git keymaps
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
keymap("n", "<leader>fg", function()
  telescope_cwd "live_grep"
end, "Find Git Files")
keymap(
  { "n", "x" },
  "<leader>gb",
  "<cmd>Telescope git_branches<cr>",
  "Checkout Branch"
)
keymap(
  { "n", "x" },
  "<leader>gc",
  "<cmd>Telescope git_bcommits<cr>",
  "Checkout Buffer Commit"
)
keymap(
  { "n", "x" },
  "<leader>gC",
  "<cmd>Telescope git_commits<cr>",
  "Checkout Commit"
)
keymap(
  { "n", "x" },
  "<leader>gg",
  "<cmd>Telescope git_status<cr>",
  "Checkout Commit"
)
