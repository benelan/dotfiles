local status_ok, telescope = pcall(require, "telescope")
if not status_ok then
  return
end

local telescope_actions = require "telescope.actions"
local telescope_action_layout = require "telescope.actions.layout"

telescope.setup {
  defaults = {
    prompt_prefix = " ❯  ", -- ❯ ❱ ⧽
    selection_caret = "  ", -- ➜  ⮞     🡺  🡲
    multi_icon = "✘  ", -- ✘  ✔
    entry_prefix = "   ",
    layout_strategy = "horizontal",
    layout_config = {
      width = 0.9,
      height = 0.9,
      prompt_position = "top",
      horizontal = {
        preview_width = function(_, cols, _)
          if cols > 200 then
            return math.floor(cols * 0.4)
          else
            return math.floor(cols * 0.6)
          end
        end,
      },
      vertical = { anchor = "N", preview_height = 0.5 },
    },
    sorting_strategy = "ascending",
    cycle_layout_list = { "horizontal", "vertical", "bottom_pane" },
    set_env = { ["COLORTERM"] = "truecolor" },
    file_ignore_patterns = {
      -- dev directories
      "%.git/",
      "node_modules/",
      "dist/",
      "build/", -- home directories
      "%.cache/",
      "%.var/",
      "%.mozilla/",
      "%.pki/",
      "%.cert/",
      "%.gnupg/",
      "%.ssh/",
      "~/Music",
      "~/Videos",
      "~/Steam",
      "~/Pictures",
      -- media files
      "%.mp3",
      "%.mp4",
      "%.mkv",
      "%.m4a",
      "%.m4p",
      "%.png",
      "%.jpeg",
      "%.avi",
      "%.ico", -- packages
      "%.7z",
      "%.dmg%",
      "%.gz",
      "%.iso",
      "%.jar",
      "%.rar",
      "%.tar",
      "%.zip",
      -- autogenerated files
      -- "%.tmp", "%.orig", "%.lock", "%.bak",
      -- compiled
      -- "%.com", "%.class", "%.dll", "%.exe", "%.o", "%.so", "%.map", "%.min.js",
    },
    vimgrep_arguments = {
      "rg",
      "--color=never",
      "--no-heading",
      "--with-filename",
      "--line-number",
      "--column",
      "--smart-case",
      "--trim",
      "--hidden",
      "--glob=!.git/",
    },
    mappings = {
      i = {
        ["<Down>"] = telescope_actions.cycle_history_next,
        ["<Up>"] = telescope_actions.cycle_history_prev,
        ["<M-j"] = telescope_actions.cycle_history_next,
        ["<M-k>"] = telescope_actions.cycle_history_prev,
        ["<C-j>"] = telescope_actions.move_selection_next,
        ["<C-k>"] = telescope_actions.move_selection_previous,
        ["<tab>"] = telescope_actions.toggle_selection + telescope_actions.move_selection_next,
        ["<s-tab>"] = telescope_actions.toggle_selection + telescope_actions.move_selection_previous,
        ["<esc>"] = telescope_actions.close,
        ["<M-p>"] = telescope_action_layout.toggle_preview,
        ["<M-m>"] = telescope_action_layout.toggle_mirror,
        ["<A-l>"] = telescope_action_layout.cycle_layout_next,
        ["<A-h>"] = telescope_action_layout.cycle_layout_prev,
      },
      n = {
        ["<C-j>"] = telescope_actions.move_selection_next,
        ["<C-k>"] = telescope_actions.move_selection_previous,
      },
    },
  },
  pickers = {
    find_files = {
      mappings = {
        n = {
          -- change directory in normal mode
          ["<leader>cd"] = function(prompt_bufnr)
            local selection = telescope_actions.state.get_selected_entry()
            local dir = vim.fn.fnamemodify(selection.path, ":p:h")
            telescope_actions.close(prompt_bufnr)
            vim.cmd(string.format("silent cd %s", dir))
          end,
        },
      },
    },
  },
  -- extensions = {
  --   project = {
  --     hidden_files = true,
  --     base_dirs = {
  --       "~/.dotfiles",
  --       "~/.config/nvim",
  --       "~/dev/work/calcite-components",
  --       "~/dev/work/calcite-components-examples",
  --       "~/dev/work/arcgis-esm-samples",
  --     },
  --   },
  -- },
}
keymap("n", "<leader>f", "<cmd>Telescope<cr>", "Fuzzy Find")
keymap("n", "<leader>ff", "<cmd>Telescope find_files hidden=true<cr>", "Find File")
keymap("n", "<leader>fr", "<cmd>Telescope oldfiles<cr>", "Find Recent File")
keymap("n", "<leader>ft", "<cmd>Telescope live_grep<cr>", "Find Text")
keymap("n", "<leader>fg", "<cmd>Telescope git_files<cr>", "Find Text")

keymap("n", "<leader>lB", "<cmd>Telescope diagnostics bufnr=0 theme=get_ivy<cr>", "Buffer Diagnostics")
keymap("n", "<leader>lQ", "<cmd>Telescope quickfix<cr>", "Telescope Quickfix")
keymap("n", "<leader>lS", "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>", "Workspace Symbols")
keymap("n", "<leader>lW", "<cmd>Telescope diagnostics<cr>", "Workspace Diagnostics")
keymap("n", "<leader>lW", "<cmd>Telescope lsp_references<cr>", "References")
keymap("n", "<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>", "Document Symbols")

telescope.load_extension "fzf"
-- telescope.load_extension "project"
-- telescope.load_extension "git_worktree"
-- telescope.load_extension "session-lens"

-- keymap(
--   "n",
--   "<leader>gws",
--   "<cmd>lua require('telescope').extensions.git_worktree.git_worktrees()<cr>",
--   "Switch worktree"
-- )
-- keymap(
--   "n",
--   "<leader>gwa",
--   "<cmd>lua require('telescope').extensions.git_worktree.create_git_worktree()<cr>",
--   "Create worktree"
-- )

-- keymap("n", "<leader>Sf", "<cmd>SearchSession<cr>", "Search Session")
-- keymap("n", "<leader>Ss", "<cmd>SaveSession<cr>", "Search Session")
